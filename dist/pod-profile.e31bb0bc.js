// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"node_modules/events/events.js":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {
  return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;

if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys;
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
};

function EventEmitter() {
  EventEmitter.init.call(this);
}

module.exports = EventEmitter;
module.exports.once = once; // Backwards-compat with node 0.10.x

EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined; // By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.

var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function () {
    return defaultMaxListeners;
  },
  set: function (arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }

    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function () {
  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
}; // Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.


EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }

  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];

  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);

  var doError = type === 'error';
  var events = this._events;
  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false; // If there is no 'error' event listener then throw.

  if (doError) {
    var er;
    if (args.length > 0) er = args[0];

    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    } // At least give some kind of context to the user


    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];
  if (handler === undefined) return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);

    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;
  checkListener(listener);
  events = target._events;

  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type, listener.listener ? listener.listener : listener); // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object

      events = target._events;
    }

    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] = prepend ? [listener, existing] : [existing, listener]; // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    } // Check for listener leak


    m = _getMaxListeners(target);

    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true; // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax

      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener = function prependListener(type, listener) {
  return _addListener(this, type, listener, true);
};

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0) return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = {
    fired: false,
    wrapFn: undefined,
    target: target,
    type: type,
    listener: listener
  };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
  checkListener(listener);
  this.prependListener(type, _onceWrap(this, type, listener));
  return this;
}; // Emits a 'removeListener' event if and only if the listener was removed.


EventEmitter.prototype.removeListener = function removeListener(type, listener) {
  var list, events, position, i, originalListener;
  checkListener(listener);
  events = this._events;
  if (events === undefined) return this;
  list = events[type];
  if (list === undefined) return this;

  if (list === listener || list.listener === listener) {
    if (--this._eventsCount === 0) this._events = Object.create(null);else {
      delete events[type];
      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
    }
  } else if (typeof list !== 'function') {
    position = -1;

    for (i = list.length - 1; i >= 0; i--) {
      if (list[i] === listener || list[i].listener === listener) {
        originalListener = list[i].listener;
        position = i;
        break;
      }
    }

    if (position < 0) return this;
    if (position === 0) list.shift();else {
      spliceOne(list, position);
    }
    if (list.length === 1) events[type] = list[0];
    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
  }

  return this;
};

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
  var listeners, events, i;
  events = this._events;
  if (events === undefined) return this; // not listening for removeListener, no need to emit

  if (events.removeListener === undefined) {
    if (arguments.length === 0) {
      this._events = Object.create(null);
      this._eventsCount = 0;
    } else if (events[type] !== undefined) {
      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];
    }

    return this;
  } // emit removeListener for all listeners on all events


  if (arguments.length === 0) {
    var keys = Object.keys(events);
    var key;

    for (i = 0; i < keys.length; ++i) {
      key = keys[i];
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }

    this.removeAllListeners('removeListener');
    this._events = Object.create(null);
    this._eventsCount = 0;
    return this;
  }

  listeners = events[type];

  if (typeof listeners === 'function') {
    this.removeListener(type, listeners);
  } else if (listeners !== undefined) {
    // LIFO order
    for (i = listeners.length - 1; i >= 0; i--) {
      this.removeListener(type, listeners[i]);
    }
  }

  return this;
};

function _listeners(target, type, unwrap) {
  var events = target._events;
  if (events === undefined) return [];
  var evlistener = events[type];
  if (evlistener === undefined) return [];
  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];
  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function (emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;

function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);

  for (var i = 0; i < n; ++i) copy[i] = arr[i];

  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++) list[index] = list[index + 1];

  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);

  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }

  return ret;
}

function once(emitter, name) {
  return new Promise(function (resolve, reject) {
    function errorListener(err) {
      emitter.removeListener(name, resolver);
      reject(err);
    }

    function resolver() {
      if (typeof emitter.removeListener === 'function') {
        emitter.removeListener('error', errorListener);
      }

      resolve([].slice.call(arguments));
    }

    ;
    eventTargetAgnosticAddListener(emitter, name, resolver, {
      once: true
    });

    if (name !== 'error') {
      addErrorHandlerIfEventEmitter(emitter, errorListener, {
        once: true
      });
    }
  });
}

function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
  if (typeof emitter.on === 'function') {
    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
  }
}

function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
  if (typeof emitter.on === 'function') {
    if (flags.once) {
      emitter.once(name, listener);
    } else {
      emitter.on(name, listener);
    }
  } else if (typeof emitter.addEventListener === 'function') {
    // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
      // IE does not have builtin `{ once: true }` support so we
      // have to do it manually.
      if (flags.once) {
        emitter.removeEventListener(name, wrapListener);
      }

      listener(arg);
    });
  } else {
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
  }
}
},{}],"node_modules/uuid/dist/esm-browser/rng.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rng;
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);

function rng() {
  // lazy load so that environments that need to polyfill have a chance to do so
  if (!getRandomValues) {
    // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
    // find the complete implementation of crypto (msCrypto) on IE11.
    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);

    if (!getRandomValues) {
      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');
    }
  }

  return getRandomValues(rnds8);
}
},{}],"node_modules/uuid/dist/esm-browser/regex.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/validate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regex = _interopRequireDefault(require("./regex.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports.default = _default;
},{"./regex.js":"node_modules/uuid/dist/esm-browser/regex.js"}],"node_modules/uuid/dist/esm-browser/stringify.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];

for (var i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0; // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434

  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;

var _clockseq; // Previous uuid creation time


var _lastMSecs = 0;
var _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || new Array(16);
  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    var seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  var msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/parse.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  var v;
  var arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/v35.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  var bytes = [];

  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

var DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
var URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}
},{"./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/uuid/dist/esm-browser/md5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/*
 * Browser-compatible JavaScript MD5
 *
 * Modification of JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */
function md5(bytes) {
  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = new Uint8Array(msg.length);

    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }

  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
/*
 * Convert an array of little-endian words to an array of bytes
 */


function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = '0123456789abcdef';

  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 0xff;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 0x0f) + hexTab.charAt(x & 0x0f), 16);
    output.push(hex);
  }

  return output;
}
/**
 * Calculate output length with padding and bit length
 */


function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
/*
 * Calculate the MD5 of an array of little-endian words, and a bit length.
 */


function wordsToMd5(x, len) {
  /* append padding */
  x[len >> 5] |= 0x80 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;

  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }

  return [a, b, c, d];
}
/*
 * Convert an array bytes to an array of little-endian words
 * Characters >255 have their high-byte silently ignored.
 */


function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }

  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));

  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 0xff) << i % 32;
  }

  return output;
}
/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */


function safeAdd(x, y) {
  var lsw = (x & 0xffff) + (y & 0xffff);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 0xffff;
}
/*
 * Bitwise rotate a 32-bit number to the left.
 */


function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
/*
 * These functions implement the four basic operations the algorithm uses.
 */


function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}

function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}

function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}

function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}

function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}

var _default = md5;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _md = _interopRequireDefault(require("./md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./md5.js":"node_modules/uuid/dist/esm-browser/md5.js"}],"node_modules/uuid/dist/esm-browser/v4.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _rng = _interopRequireDefault(require("./rng.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  var rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports.default = _default;
},{"./rng.js":"node_modules/uuid/dist/esm-browser/rng.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js"}],"node_modules/uuid/dist/esm-browser/sha1.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

// Adapted from Chris Veness' SHA1 code at
// http://www.movable-type.co.uk/scripts/sha1.html
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;

    case 1:
      return x ^ y ^ z;

    case 2:
      return x & y ^ x & z ^ y & z;

    case 3:
      return x ^ y ^ z;
  }
}

function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}

function sha1(bytes) {
  var K = [0x5a827999, 0x6ed9eba1, 0x8f1bbcdc, 0xca62c1d6];
  var H = [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];

  if (typeof bytes === 'string') {
    var msg = unescape(encodeURIComponent(bytes)); // UTF8 escape

    bytes = [];

    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    // Convert Array-like to Array
    bytes = Array.prototype.slice.call(bytes);
  }

  bytes.push(0x80);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);

  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);

    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }

    M[_i] = arr;
  }

  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 0xffffffff;

  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);

    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }

    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }

    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];

    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }

    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }

  return [H[0] >> 24 & 0xff, H[0] >> 16 & 0xff, H[0] >> 8 & 0xff, H[0] & 0xff, H[1] >> 24 & 0xff, H[1] >> 16 & 0xff, H[1] >> 8 & 0xff, H[1] & 0xff, H[2] >> 24 & 0xff, H[2] >> 16 & 0xff, H[2] >> 8 & 0xff, H[2] & 0xff, H[3] >> 24 & 0xff, H[3] >> 16 & 0xff, H[3] >> 8 & 0xff, H[3] & 0xff, H[4] >> 24 & 0xff, H[4] >> 16 & 0xff, H[4] >> 8 & 0xff, H[4] & 0xff];
}

var _default = sha1;
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/v5.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _v = _interopRequireDefault(require("./v35.js"));

var _sha = _interopRequireDefault(require("./sha1.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports.default = _default;
},{"./v35.js":"node_modules/uuid/dist/esm-browser/v35.js","./sha1.js":"node_modules/uuid/dist/esm-browser/sha1.js"}],"node_modules/uuid/dist/esm-browser/nil.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports.default = _default;
},{}],"node_modules/uuid/dist/esm-browser/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _validate = _interopRequireDefault(require("./validate.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports.default = _default;
},{"./validate.js":"node_modules/uuid/dist/esm-browser/validate.js"}],"node_modules/uuid/dist/esm-browser/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "v1", {
  enumerable: true,
  get: function () {
    return _v.default;
  }
});
Object.defineProperty(exports, "v3", {
  enumerable: true,
  get: function () {
    return _v2.default;
  }
});
Object.defineProperty(exports, "v4", {
  enumerable: true,
  get: function () {
    return _v3.default;
  }
});
Object.defineProperty(exports, "v5", {
  enumerable: true,
  get: function () {
    return _v4.default;
  }
});
Object.defineProperty(exports, "NIL", {
  enumerable: true,
  get: function () {
    return _nil.default;
  }
});
Object.defineProperty(exports, "version", {
  enumerable: true,
  get: function () {
    return _version.default;
  }
});
Object.defineProperty(exports, "validate", {
  enumerable: true,
  get: function () {
    return _validate.default;
  }
});
Object.defineProperty(exports, "stringify", {
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
});
Object.defineProperty(exports, "parse", {
  enumerable: true,
  get: function () {
    return _parse.default;
  }
});

var _v = _interopRequireDefault(require("./v1.js"));

var _v2 = _interopRequireDefault(require("./v3.js"));

var _v3 = _interopRequireDefault(require("./v4.js"));

var _v4 = _interopRequireDefault(require("./v5.js"));

var _nil = _interopRequireDefault(require("./nil.js"));

var _version = _interopRequireDefault(require("./version.js"));

var _validate = _interopRequireDefault(require("./validate.js"));

var _stringify = _interopRequireDefault(require("./stringify.js"));

var _parse = _interopRequireDefault(require("./parse.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./v1.js":"node_modules/uuid/dist/esm-browser/v1.js","./v3.js":"node_modules/uuid/dist/esm-browser/v3.js","./v4.js":"node_modules/uuid/dist/esm-browser/v4.js","./v5.js":"node_modules/uuid/dist/esm-browser/v5.js","./nil.js":"node_modules/uuid/dist/esm-browser/nil.js","./version.js":"node_modules/uuid/dist/esm-browser/version.js","./validate.js":"node_modules/uuid/dist/esm-browser/validate.js","./stringify.js":"node_modules/uuid/dist/esm-browser/stringify.js","./parse.js":"node_modules/uuid/dist/esm-browser/parse.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/constant.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PREFERRED_SIGNING_ALG = exports.SOLID_CLIENT_AUTHN_KEY_PREFIX = void 0;
exports.SOLID_CLIENT_AUTHN_KEY_PREFIX = "solidClientAuthn:";
exports.PREFERRED_SIGNING_ALG = ["ES256", "RS256"];

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InruptError extends Error {
    constructor(messageOrIri, messageParams, appendErrorIri = true) {
        super(typeof messageOrIri === "string"
            ? InruptError.substituteParams(messageOrIri, messageParams)
            : InruptError.appendErrorIri(InruptError.lookupErrorIri(messageOrIri, messageParams), messageOrIri, appendErrorIri));
    }
    httpResponse(httpErrorResponse, appendHttpDetails = true) {
        this.message = InruptError.appendHttpResponseDetails(this.message, httpErrorResponse, appendHttpDetails);
        this.httpErrorResponse = httpErrorResponse;
        return this;
    }
    hasHttpResponse() {
        return this.httpErrorResponse !== undefined;
    }
    getHttpResponse() {
        return this.httpErrorResponse;
    }
    getHttpStatusCode() {
        if (this.httpErrorResponse === undefined) {
            throw new InruptError("This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Code.");
        }
        return this.httpErrorResponse.status;
    }
    getHttpStatusText() {
        if (this.httpErrorResponse === undefined) {
            throw new InruptError("This InruptError was not provided with a HTTP response - so we can't get its HTTP Status Text!");
        }
        return this.httpErrorResponse.statusText;
    }
    static determineIfVocabTerm(value) {
        if (value.strict !== undefined) {
            return true;
        }
        return false;
    }
    static lookupErrorIri(iri, messageParams) {
        if (InruptError.determineIfVocabTerm(iri)) {
            const message = messageParams === undefined
                ? iri.message
                : iri.messageParams(...messageParams);
            return message === undefined
                ? `Looked up error message IRI [${iri.value}], but found no message value.`
                : message;
        }
        return `Error message looked up at: [${iri.value}]${messageParams === undefined
            ? ""
            : `, with params [${messageParams.toString()}]`}`;
    }
    static appendHttpResponseDetails(message, response, append) {
        if (append && typeof response !== "undefined") {
            return `${message} HTTP details: status code [${response.status}], status text [${response.statusText}].`;
        }
        return message;
    }
    static appendErrorIri(message, iri, append) {
        return append ? `${message} Error IRI: [${iri.value}].` : message;
    }
    static substituteParams(message, params) {
        let fullMessage = message;
        if (params !== undefined) {
            const paramsRequired = message.split("{{").length - 1;
            if (paramsRequired !== params.length) {
                throw new Error(`Setting parameters on message [${message}], but it requires [${paramsRequired}] params and we received [${params.length}].`);
            }
            for (let i = 0; i < params.length; i += 1) {
                const marker = `{{${i}}}`;
                fullMessage = fullMessage.replace(marker, params[i]);
            }
        }
        return fullMessage;
    }
}
exports.default = InruptError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/util/handlerPattern/AggregateHandler.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const InruptError_1 = __importDefault(require("../../errors/InruptError"));
class AggregateHandler {
    constructor(handleables) {
        this.handleables = handleables;
    }
    async getProperHandler(params) {
        const canHandleList = await Promise.all(this.handleables.map((handleable) => handleable.canHandle(...params)));
        for (let i = 0; i < canHandleList.length; i += 1) {
            if (canHandleList[i]) {
                return this.handleables[i];
            }
        }
        return null;
    }
    async canHandle(...params) {
        return (await this.getProperHandler(params)) !== null;
    }
    async handle(...params) {
        const handler = await this.getProperHandler(params);
        if (handler) {
            return handler.handle(...params);
        }
        throw new InruptError_1.default(`[${this.constructor.name}] cannot find a suitable handler for: ${params
            .map((param) => {
            try {
                return JSON.stringify(param);
            }
            catch (err) {
                return param.toString();
            }
        })
            .join(", ")}`);
    }
}
exports.default = AggregateHandler;

},{"../../errors/InruptError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js"}],"node_modules/cross-fetch/dist/browser-ponyfill.js":[function(require,module,exports) {

var global = typeof self !== 'undefined' ? self : this;
var __self__ = (function () {
function F() {
this.fetch = false;
this.DOMException = global.DOMException
}
F.prototype = global;
return new F();
})();
(function(self) {

var irrelevant = (function (exports) {

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  exports.DOMException = self.DOMException;
  try {
    new exports.DOMException();
  } catch (err) {
    exports.DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    exports.DOMException.prototype = Object.create(Error.prototype);
    exports.DOMException.prototype.constructor = exports.DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new exports.DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function() {
        reject(new exports.DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    self.fetch = fetch;
    self.Headers = Headers;
    self.Request = Request;
    self.Response = Response;
  }

  exports.Headers = Headers;
  exports.Request = Request;
  exports.Response = Response;
  exports.fetch = fetch;

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;

}({}));
})(__self__);
__self__.fetch.ponyfill = true;
// Remove "polyfill" property added by whatwg-fetch
delete __self__.fetch.polyfill;
// Choose between native implementation (global) or custom implementation (__self__)
// var ctx = global.fetch ? global : __self__;
var ctx = __self__; // this line disable service worker support temporarily
exports = ctx.fetch // To enable: import fetch from 'cross-fetch'
exports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.
exports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'
exports.Headers = ctx.Headers
exports.Request = ctx.Request
exports.Response = ctx.Response
module.exports = exports

},{}],"node_modules/@inrupt/jose-legacy-modules/dist/index.browser.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

class JOSEError extends Error {
    constructor(message) {
        super(message);
        this.code = JOSEError.code;
        this.name = this.constructor.name;
        if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
        }
    }
}
JOSEError.code = 'ERR_JOSE_GENERIC';
class JWTClaimValidationFailed extends JOSEError {
    constructor(message, claim = 'unspecified', reason = 'unspecified') {
        super(message);
        this.code = JWTClaimValidationFailed.code;
        this.claim = claim;
        this.reason = reason;
    }
}
JWTClaimValidationFailed.code = 'ERR_JWT_CLAIM_VALIDATION_FAILED';
class JOSEAlgNotAllowed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JOSEAlgNotAllowed.code;
    }
}
JOSEAlgNotAllowed.code = 'ERR_JOSE_ALG_NOT_ALLOWED';
class JOSENotSupported extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JOSENotSupported.code;
    }
}
JOSENotSupported.code = 'ERR_JOSE_NOT_SUPPORTED';
class JWEDecryptionFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWEDecryptionFailed.code;
        this.message = 'decryption operation failed';
    }
}
JWEDecryptionFailed.code = 'ERR_JWE_DECRYPTION_FAILED';
class JWEInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWEInvalid.code;
    }
}
JWEInvalid.code = 'ERR_JWE_INVALID';
class JWSInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWSInvalid.code;
    }
}
JWSInvalid.code = 'ERR_JWS_INVALID';
class JWTInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWTInvalid.code;
    }
}
JWTInvalid.code = 'ERR_JWT_INVALID';
class JWKInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWKInvalid.code;
    }
}
JWKInvalid.code = 'ERR_JWK_INVALID';
class JWKSInvalid extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWKSInvalid.code;
    }
}
JWKSInvalid.code = 'ERR_JWKS_INVALID';
class JWKSNoMatchingKey extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWKSNoMatchingKey.code;
        this.message = 'no applicable key found in the JSON Web Key Set';
    }
}
JWKSNoMatchingKey.code = 'ERR_JWKS_NO_MATCHING_KEY';
class JWKSMultipleMatchingKeys extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWKSMultipleMatchingKeys.code;
        this.message = 'multiple matching keys found in the JSON Web Key Set';
    }
}
JWKSMultipleMatchingKeys.code = 'ERR_JWKS_MULTIPLE_MATCHING_KEYS';
class JWSSignatureVerificationFailed extends JOSEError {
    constructor() {
        super(...arguments);
        this.code = JWSSignatureVerificationFailed.code;
        this.message = 'signature verification failed';
    }
}
JWSSignatureVerificationFailed.code = 'ERR_JWS_SIGNATURE_VERIFICATION_FAILED';
class JWTExpired extends JWTClaimValidationFailed {
    constructor() {
        super(...arguments);
        this.code = JWTExpired.code;
    }
}
JWTExpired.code = 'ERR_JWT_EXPIRED';

const isDisjoint = (...headers) => {
    const sources = headers.filter(Boolean);
    if (sources.length === 0 || sources.length === 1) {
        return true;
    }
    let acc;
    for (const header of sources) {
        const parameters = Object.keys(header);
        if (!acc || acc.size === 0) {
            acc = new Set(parameters);
            continue;
        }
        for (const parameter of parameters) {
            if (acc.has(parameter)) {
                return false;
            }
            acc.add(parameter);
        }
    }
    return true;
};

function isObjectLike(value) {
    return typeof value === 'object' && value !== null;
}
function isObject(input) {
    if (!isObjectLike(input) || Object.prototype.toString.call(input) !== '[object Object]') {
        return false;
    }
    if (Object.getPrototypeOf(input) === null) {
        return true;
    }
    let proto = input;
    while (Object.getPrototypeOf(proto) !== null) {
        proto = Object.getPrototypeOf(proto);
    }
    return Object.getPrototypeOf(input) === proto;
}

const encoder = new TextEncoder();
const decoder = new TextDecoder();
const MAX_INT32 = 2 ** 32;
function concat(...buffers) {
    const size = buffers.reduce((acc, { length }) => acc + length, 0);
    const buf = new Uint8Array(size);
    let i = 0;
    buffers.forEach((buffer) => {
        buf.set(buffer, i);
        i += buffer.length;
    });
    return buf;
}
function p2s(alg, p2sInput) {
    return concat(encoder.encode(alg), new Uint8Array([0]), p2sInput);
}
function writeUInt32BE(buf, value, offset) {
    if (value < 0 || value >= MAX_INT32) {
        throw new RangeError(`value must be >= 0 and <= ${MAX_INT32 - 1}. Received ${value}`);
    }
    buf.set([value >>> 24, value >>> 16, value >>> 8, value & 0xff], offset);
}
function uint64be(value) {
    const high = Math.floor(value / MAX_INT32);
    const low = value % MAX_INT32;
    const buf = new Uint8Array(8);
    writeUInt32BE(buf, high, 0);
    writeUInt32BE(buf, low, 4);
    return buf;
}
function uint32be(value) {
    const buf = new Uint8Array(4);
    writeUInt32BE(buf, value);
    return buf;
}
function lengthAndInput(input) {
    return concat(uint32be(input.length), input);
}
async function concatKdf(digest, secret, bits, value) {
    const iterations = Math.ceil((bits >> 3) / 32);
    let res;
    for (let iter = 1; iter <= iterations; iter++) {
        const buf = new Uint8Array(4 + secret.length + value.length);
        buf.set(uint32be(iter));
        buf.set(secret, 4);
        buf.set(value, 4 + secret.length);
        if (!res) {
            res = await digest('sha256', buf);
        }
        else {
            res = concat(res, await digest('sha256', buf));
        }
    }
    res = res.slice(0, bits >> 3);
    return res;
}

function getGlobal() {
    if (typeof globalThis !== 'undefined')
        return globalThis;
    if (typeof self !== 'undefined')
        return self;
    if (typeof window !== 'undefined')
        return window;
    throw new Error('unable to locate global object');
}
var globalThis$1 = getGlobal();

const encode$1 = (input) => {
    let unencoded = input;
    if (typeof unencoded === 'string') {
        unencoded = encoder.encode(unencoded);
    }
    const CHUNK_SIZE = 0x8000;
    const arr = [];
    for (let i = 0; i < unencoded.length; i += CHUNK_SIZE) {
        arr.push(String.fromCharCode.apply(null, unencoded.subarray(i, i + CHUNK_SIZE)));
    }
    const base64string = globalThis$1.btoa(arr.join(''));
    return base64string.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
};
const decode$1 = (input) => {
    let encoded = input;
    if (encoded instanceof Uint8Array) {
        encoded = decoder.decode(encoded);
    }
    encoded = encoded.replace(/-/g, '+').replace(/_/g, '/').replace(/\s/g, '');
    try {
        return new Uint8Array(globalThis$1
            .atob(encoded)
            .split('')
            .map((c) => c.charCodeAt(0)));
    }
    catch (_a) {
        throw new TypeError('The input to be decoded is not correctly encoded.');
    }
};

const bitLengths$1 = new Map([
    ['A128CBC-HS256', 128],
    ['A128GCM', 96],
    ['A128GCMKW', 96],
    ['A192CBC-HS384', 128],
    ['A192GCM', 96],
    ['A192GCMKW', 96],
    ['A256CBC-HS512', 128],
    ['A256GCM', 96],
    ['A256GCMKW', 96],
]);
const factory$1 = (random) => (alg) => {
    const bitLength = bitLengths$1.get(alg);
    if (!bitLength) {
        throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
    return random(new Uint8Array(bitLength >> 3));
};

const checkIvLength = (enc, iv) => {
    if (iv.length << 3 !== bitLengths$1.get(enc)) {
        throw new JWEInvalid('Invalid Initialization Vector length');
    }
};

const checkCekLength = (enc, cek) => {
    let expected;
    switch (enc) {
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            expected = parseInt(enc.substr(-3), 10);
            if (!(cek instanceof Uint8Array)) {
                throw new TypeError(`${enc} content encryption requires Uint8Array as key input`);
            }
            break;
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            expected = parseInt(enc.substr(1, 3), 10);
            break;
        default:
            throw new JOSENotSupported(`Content Encryption Algorithm ${enc} is not supported either by JOSE or your javascript runtime`);
    }
    if (cek instanceof Uint8Array) {
        if (cek.length << 3 !== expected) {
            throw new JWEInvalid('Invalid Content Encryption Key length');
        }
        return;
    }
    if (cek.algorithm !== undefined) {
        const { length } = cek.algorithm;
        if (length !== expected) {
            throw new JWEInvalid('Invalid Content Encryption Key length');
        }
        return;
    }
    throw new TypeError('Invalid Content Encryption Key type');
};

const timingSafeEqual = (a, b) => {
    if (!(a instanceof Uint8Array)) {
        throw new TypeError('First argument must be a buffer');
    }
    if (!(b instanceof Uint8Array)) {
        throw new TypeError('Second argument must be a buffer');
    }
    if (a.length !== b.length) {
        throw new TypeError('Input buffers must have the same length');
    }
    const len = a.length;
    let out = 0;
    let i = -1;
    while (++i < len) {
        out |= a[i] ^ b[i];
    }
    return out === 0;
};

var crypto = globalThis$1.crypto;
function isCryptoKey(key) {
    if (typeof globalThis$1.CryptoKey === 'undefined') {
        return false;
    }
    return key != null && key instanceof globalThis$1.CryptoKey;
}

async function cbcDecrypt(enc, cek, ciphertext, iv, tag, aad) {
    const keySize = parseInt(enc.substr(1, 3), 10);
    const encKey = await crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['decrypt']);
    const macKey = await crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: { name: `SHA-${keySize << 1}` },
        name: 'HMAC',
    }, false, ['sign']);
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const expectedTag = new Uint8Array((await crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    let macCheckPassed;
    try {
        macCheckPassed = timingSafeEqual(tag, expectedTag);
    }
    catch (_a) {
    }
    if (!macCheckPassed) {
        throw new JWEDecryptionFailed();
    }
    let plaintext;
    try {
        plaintext = new Uint8Array(await crypto.subtle.decrypt({ iv, name: 'AES-CBC' }, encKey, ciphertext));
    }
    catch (_b) {
    }
    if (!plaintext) {
        throw new JWEDecryptionFailed();
    }
    return plaintext;
}
async function gcmDecrypt(cek, ciphertext, iv, tag, aad) {
    const encKey = cek instanceof Uint8Array
        ? await crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['decrypt'])
        : cek;
    try {
        return new Uint8Array(await crypto.subtle.decrypt({
            additionalData: aad,
            iv,
            name: 'AES-GCM',
            tagLength: 128,
        }, encKey, concat(ciphertext, tag)));
    }
    catch (err) {
        throw new JWEDecryptionFailed();
    }
}
const decrypt$2 = async (enc, cek, ciphertext, iv, tag, aad) => {
    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError('invalid key input');
    }
    checkCekLength(enc, cek);
    checkIvLength(enc, iv);
    if (enc.substr(4, 3) === 'CBC') {
        return cbcDecrypt(enc, cek, ciphertext, iv, tag, aad);
    }
    return gcmDecrypt(cek, ciphertext, iv, tag, aad);
};

const inflate = async () => {
    throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime. You need to use the `inflateRaw` decrypt option to provide Inflate Raw implementation, e.g. using the "pako" module.');
};
const deflate = async () => {
    throw new JOSENotSupported('JWE "zip" (Compression Algorithm) Header Parameter is not supported by your javascript runtime.');
};

const bogusWebCrypto = [
    { hash: { name: 'SHA-256' }, name: 'HMAC' },
    true,
    ['sign'],
];

function checkKeySize(key, alg) {
    if (key.algorithm.length !== parseInt(alg.substr(1, 3), 10)) {
        throw new TypeError(`invalid key size for alg: ${alg}`);
    }
}
function getCryptoKey$2(key, usage) {
    if (isCryptoKey(key)) {
        return key;
    }
    if (key instanceof Uint8Array) {
        return crypto.subtle.importKey('raw', key, 'AES-KW', true, [usage]);
    }
    throw new TypeError('invalid key input');
}
const wrap$1 = async (alg, key, cek) => {
    const cryptoKey = await getCryptoKey$2(key, 'wrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);
    return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, cryptoKey, 'AES-KW'));
};
const unwrap$1 = async (alg, key, encryptedKey) => {
    const cryptoKey = await getCryptoKey$2(key, 'unwrapKey');
    checkKeySize(cryptoKey, alg);
    const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, cryptoKey, 'AES-KW', ...bogusWebCrypto);
    return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));
};

const digest = async (algorithm, data) => {
    const subtleDigest = `SHA-${algorithm.substr(-3)}`;
    return new Uint8Array(await crypto.subtle.digest(subtleDigest, data));
};

const deriveKey = async (publicKey, privateKey, algorithm, keyLength, apu = new Uint8Array(0), apv = new Uint8Array(0)) => {
    if (!isCryptoKey(publicKey)) {
        throw new TypeError('invalid key input');
    }
    if (!isCryptoKey(privateKey)) {
        throw new TypeError('invalid key input');
    }
    const value = concat(lengthAndInput(encoder.encode(algorithm)), lengthAndInput(apu), lengthAndInput(apv), uint32be(keyLength));
    if (!privateKey.usages.includes('deriveBits')) {
        throw new TypeError('ECDH-ES private key "usages" must include "deriveBits"');
    }
    const sharedSecret = new Uint8Array(await crypto.subtle.deriveBits({
        name: 'ECDH',
        public: publicKey,
    }, privateKey, Math.ceil(parseInt(privateKey.algorithm.namedCurve.substr(-3), 10) / 8) <<
        3));
    return concatKdf(digest, sharedSecret, keyLength, value);
};
const generateEpk = async (key) => {
    if (!isCryptoKey(key)) {
        throw new TypeError('invalid key input');
    }
    return (await crypto.subtle.generateKey({ name: 'ECDH', namedCurve: key.algorithm.namedCurve }, true, ['deriveBits'])).privateKey;
};
const ecdhAllowed = (key) => {
    if (!isCryptoKey(key)) {
        throw new TypeError('invalid key input');
    }
    return ['P-256', 'P-384', 'P-521'].includes(key.algorithm.namedCurve);
};

const random$1 = crypto.getRandomValues.bind(crypto);

function checkP2s(p2s) {
    if (!(p2s instanceof Uint8Array) || p2s.length < 8) {
        throw new JWEInvalid('PBES2 Salt Input must be 8 or more octets');
    }
}

function getCryptoKey$1(key) {
    if (key instanceof Uint8Array) {
        return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);
    }
    if (isCryptoKey(key)) {
        return key;
    }
    throw new TypeError('invalid key input');
}
const encrypt$2 = async (alg, key, cek, p2c = Math.floor(Math.random() * 2049) + 2048, p2s$1 = random$1(new Uint8Array(16))) => {
    checkP2s(p2s$1);
    const salt = p2s(alg, p2s$1);
    const keylen = parseInt(alg.substr(13, 3), 10);
    const subtleAlg = {
        hash: { name: `SHA-${alg.substr(8, 3)}` },
        iterations: p2c,
        name: 'PBKDF2',
        salt,
    };
    const wrapAlg = {
        length: keylen,
        name: 'AES-KW',
    };
    const cryptoKey = await getCryptoKey$1(key);
    let derived;
    if (cryptoKey.usages.includes('deriveBits')) {
        derived = new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    }
    else if (cryptoKey.usages.includes('deriveKey')) {
        derived = await crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey']);
    }
    else {
        throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
    }
    const encryptedKey = await wrap$1(alg.substr(-6), derived, cek);
    return { encryptedKey, p2c, p2s: encode$1(p2s$1) };
};
const decrypt$1 = async (alg, key, encryptedKey, p2c, p2s$1) => {
    checkP2s(p2s$1);
    const salt = p2s(alg, p2s$1);
    const keylen = parseInt(alg.substr(13, 3), 10);
    const subtleAlg = {
        hash: { name: `SHA-${alg.substr(8, 3)}` },
        iterations: p2c,
        name: 'PBKDF2',
        salt,
    };
    const wrapAlg = {
        length: keylen,
        name: 'AES-KW',
    };
    const cryptoKey = await getCryptoKey$1(key);
    let derived;
    if (cryptoKey.usages.includes('deriveBits')) {
        derived = new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));
    }
    else if (cryptoKey.usages.includes('deriveKey')) {
        derived = await crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['unwrapKey']);
    }
    else {
        throw new TypeError('PBKDF2 key "usages" must include "deriveBits" or "deriveKey"');
    }
    return unwrap$1(alg.substr(-6), derived, encryptedKey);
};

function subtleRsaEs(alg) {
    switch (alg) {
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            return 'RSA-OAEP';
        default:
            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

var checkKeyLength = (alg, key) => {
    if (alg.startsWith('HS')) {
        const bitlen = parseInt(alg.substr(-3), 10);
        const { length } = key.algorithm;
        if (typeof length !== 'number' || length < bitlen) {
            throw new TypeError(`${alg} requires symmetric keys to be ${bitlen} bits or larger`);
        }
    }
    if (alg.startsWith('RS') || alg.startsWith('PS')) {
        const { modulusLength } = key.algorithm;
        if (typeof modulusLength !== 'number' || modulusLength < 2048) {
            throw new TypeError(`${alg} requires key modulusLength to be 2048 bits or larger`);
        }
    }
};

const encrypt$1 = async (alg, key, cek) => {
    if (!isCryptoKey(key)) {
        throw new TypeError('invalid key input');
    }
    checkKeyLength(alg, key);
    if (key.usages.includes('encrypt')) {
        return new Uint8Array(await crypto.subtle.encrypt(subtleRsaEs(alg), key, cek));
    }
    if (key.usages.includes('wrapKey')) {
        const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);
        return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleRsaEs(alg)));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "encrypt" or "wrapKey" for this operation');
};
const decrypt = async (alg, key, encryptedKey) => {
    if (!isCryptoKey(key)) {
        throw new TypeError('invalid key input');
    }
    checkKeyLength(alg, key);
    if (key.usages.includes('decrypt')) {
        return new Uint8Array(await crypto.subtle.decrypt(subtleRsaEs(alg), key, encryptedKey));
    }
    if (key.usages.includes('unwrapKey')) {
        const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleRsaEs(alg), ...bogusWebCrypto);
        return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));
    }
    throw new TypeError('RSA-OAEP key "usages" must include "decrypt" or "unwrapKey" for this operation');
};

async function cbcEncrypt(enc, plaintext, cek, iv, aad) {
    const keySize = parseInt(enc.substr(1, 3), 10);
    const encKey = await crypto.subtle.importKey('raw', cek.subarray(keySize >> 3), 'AES-CBC', false, ['encrypt']);
    const macKey = await crypto.subtle.importKey('raw', cek.subarray(0, keySize >> 3), {
        hash: { name: `SHA-${keySize << 1}` },
        name: 'HMAC',
    }, false, ['sign']);
    const ciphertext = new Uint8Array(await crypto.subtle.encrypt({
        iv,
        name: 'AES-CBC',
    }, encKey, plaintext));
    const macData = concat(aad, iv, ciphertext, uint64be(aad.length << 3));
    const tag = new Uint8Array((await crypto.subtle.sign('HMAC', macKey, macData)).slice(0, keySize >> 3));
    return { ciphertext, tag };
}
async function gcmEncrypt(plaintext, cek, iv, aad) {
    const encKey = cek instanceof Uint8Array
        ? await crypto.subtle.importKey('raw', cek, 'AES-GCM', false, ['encrypt'])
        : cek;
    const encrypted = new Uint8Array(await crypto.subtle.encrypt({
        additionalData: aad,
        iv,
        name: 'AES-GCM',
        tagLength: 128,
    }, encKey, plaintext));
    const tag = encrypted.slice(-16);
    const ciphertext = encrypted.slice(0, -16);
    return { ciphertext, tag };
}
const encrypt = async (enc, plaintext, cek, iv, aad) => {
    if (!isCryptoKey(cek) && !(cek instanceof Uint8Array)) {
        throw new TypeError('invalid key input');
    }
    checkCekLength(enc, cek);
    checkIvLength(enc, iv);
    if (enc.substr(4, 3) === 'CBC') {
        return cbcEncrypt(enc, plaintext, cek, iv, aad);
    }
    return gcmEncrypt(plaintext, cek, iv, aad);
};

const generateIv$1 = factory$1(random$1);
const wrap = async (alg, key, cek, iv) => {
    const jweAlgorithm = alg.substr(0, 7);
    iv || (iv = generateIv$1(jweAlgorithm));
    const { ciphertext: encryptedKey, tag } = await encrypt(jweAlgorithm, cek, key, iv, new Uint8Array(0));
    return { encryptedKey, iv: encode$1(iv), tag: encode$1(tag) };
};
const unwrap = async (alg, key, encryptedKey, iv, tag) => {
    const jweAlgorithm = alg.substr(0, 7);
    return decrypt$2(jweAlgorithm, key, encryptedKey, iv, tag, new Uint8Array(0));
};

const bitLengths = new Map([
    ['A128CBC-HS256', 256],
    ['A128GCM', 128],
    ['A192CBC-HS384', 384],
    ['A192GCM', 192],
    ['A256CBC-HS512', 512],
    ['A256GCM', 256],
]);
const factory = (random) => (alg) => {
    const bitLength = bitLengths.get(alg);
    if (!bitLength) {
        throw new JOSENotSupported(`Unsupported JWE Algorithm: ${alg}`);
    }
    return random(new Uint8Array(bitLength >> 3));
};

function subtleMapping(jwk) {
    let algorithm;
    let keyUsages;
    switch (jwk.kty) {
        case 'oct': {
            switch (jwk.alg) {
                case 'HS256':
                case 'HS384':
                case 'HS512':
                    algorithm = { name: 'HMAC', hash: { name: `SHA-${jwk.alg.substr(-3)}` } };
                    keyUsages = ['sign', 'verify'];
                    break;
                case 'A128CBC-HS256':
                case 'A192CBC-HS384':
                case 'A256CBC-HS512':
                    throw new JOSENotSupported(`${jwk.alg} keys cannot be imported as CryptoKey instances`);
                case 'A128GCM':
                case 'A192GCM':
                case 'A256GCM':
                case 'A128GCMKW':
                case 'A192GCMKW':
                case 'A256GCMKW':
                    algorithm = { name: 'AES-GCM' };
                    keyUsages = ['encrypt', 'decrypt'];
                    break;
                case 'A128KW':
                case 'A192KW':
                case 'A256KW':
                    algorithm = { name: 'AES-KW' };
                    keyUsages = ['wrapKey', 'unwrapKey'];
                    break;
                case 'PBES2-HS256+A128KW':
                case 'PBES2-HS384+A192KW':
                case 'PBES2-HS512+A256KW':
                    algorithm = { name: 'PBKDF2' };
                    keyUsages = ['deriveBits'];
                    break;
                default:
                    throw new JOSENotSupported('unsupported or invalid JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'RSA': {
            switch (jwk.alg) {
                case 'PS256':
                case 'PS384':
                case 'PS512':
                    algorithm = { name: 'RSA-PSS', hash: { name: `SHA-${jwk.alg.substr(-3)}` } };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RS256':
                case 'RS384':
                case 'RS512':
                    algorithm = { name: 'RSASSA-PKCS1-v1_5', hash: { name: `SHA-${jwk.alg.substr(-3)}` } };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'RSA-OAEP':
                case 'RSA-OAEP-256':
                case 'RSA-OAEP-384':
                case 'RSA-OAEP-512':
                    algorithm = {
                        name: 'RSA-OAEP',
                        hash: { name: `SHA-${parseInt(jwk.alg.substr(-3), 10) || 1}` },
                    };
                    keyUsages = jwk.d ? ['decrypt', 'unwrapKey'] : ['encrypt', 'wrapKey'];
                    break;
                default:
                    throw new JOSENotSupported('unsupported or invalid JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        case 'EC': {
            switch (jwk.alg) {
                case 'ES256':
                case 'ES384':
                case 'ES512':
                    algorithm = { name: 'ECDSA', namedCurve: jwk.crv };
                    keyUsages = jwk.d ? ['sign'] : ['verify'];
                    break;
                case 'ECDH-ES':
                case 'ECDH-ES+A128KW':
                case 'ECDH-ES+A192KW':
                case 'ECDH-ES+A256KW':
                    algorithm = { name: 'ECDH', namedCurve: jwk.crv };
                    keyUsages = jwk.d ? ['deriveBits'] : [];
                    break;
                default:
                    throw new JOSENotSupported('unsupported or invalid JWK "alg" (Algorithm) Parameter value');
            }
            break;
        }
        default:
            throw new JOSENotSupported('unsupported or invalid JWK "kty" (Key Type) Parameter value');
    }
    return { algorithm, keyUsages };
}
const parse = async (jwk) => {
    var _a, _b;
    const { algorithm, keyUsages } = subtleMapping(jwk);
    let format = 'jwk';
    let keyData = { ...jwk };
    delete keyData.alg;
    if (algorithm.name === 'PBKDF2') {
        format = 'raw';
        keyData = decode$1(jwk.k);
    }
    return crypto.subtle.importKey(format, keyData, algorithm, (_a = jwk.ext) !== null && _a !== void 0 ? _a : false, (_b = jwk.key_ops) !== null && _b !== void 0 ? _b : keyUsages);
};

async function parseJwk(jwk, alg, octAsKeyObject) {
    if (!isObject(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    alg || (alg = jwk.alg);
    if (typeof alg !== 'string' || !alg) {
        throw new TypeError('"alg" argument is required when "jwk.alg" is not present');
    }
    switch (jwk.kty) {
        case 'oct':
            if (typeof jwk.k !== 'string' || !jwk.k) {
                throw new TypeError('missing "k" (Key Value) Parameter value');
            }
            octAsKeyObject !== null && octAsKeyObject !== void 0 ? octAsKeyObject : (octAsKeyObject = jwk.ext !== true);
            if (octAsKeyObject) {
                return parse({ ...jwk, alg, ext: false });
            }
            return decode$1(jwk.k);
        case 'RSA':
            if (jwk.oth !== undefined) {
                throw new JOSENotSupported('RSA JWK "oth" (Other Primes Info) Parameter value is not supported');
            }
        case 'EC':
        case 'OKP':
            return parse({ ...jwk, alg });
        default:
            throw new JOSENotSupported('unsupported "kty" (Key Type) Parameter value');
    }
}

function assertEnryptedKey(encryptedKey) {
    if (!encryptedKey) {
        throw new JWEInvalid('JWE Encrypted Key missing');
    }
}
function assertHeaderParameter(joseHeader, parameter, name) {
    if (joseHeader[parameter] === undefined) {
        throw new JWEInvalid(`JOSE Header ${name} (${parameter}) missing`);
    }
}
async function decryptKeyManagement(alg, key, encryptedKey, joseHeader) {
    switch (alg) {
        case 'dir': {
            if (encryptedKey !== undefined) {
                throw new JWEInvalid('Encountered unexpected JWE Encrypted Key');
            }
            return key;
        }
        case 'ECDH-ES':
            if (encryptedKey !== undefined) {
                throw new JWEInvalid('Encountered unexpected JWE Encrypted Key');
            }
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            assertHeaderParameter(joseHeader, 'epk', 'Ephemeral Public Key');
            if (!ecdhAllowed(key)) {
                throw new JOSENotSupported('ECDH-ES with the provided key is not allowed or not supported by your javascript runtime');
            }
            const epk = await parseJwk(joseHeader.epk, alg);
            let partyUInfo;
            let partyVInfo;
            if (joseHeader.apu !== undefined)
                partyUInfo = decode$1(joseHeader.apu);
            if (joseHeader.apv !== undefined)
                partyVInfo = decode$1(joseHeader.apv);
            const sharedSecret = await deriveKey(epk, key, alg === 'ECDH-ES' ? joseHeader.enc : alg, parseInt(alg.substr(-5, 3), 10) || bitLengths.get(joseHeader.enc), partyUInfo, partyVInfo);
            if (alg === 'ECDH-ES') {
                return sharedSecret;
            }
            assertEnryptedKey(encryptedKey);
            const kwAlg = alg.substr(-6);
            return unwrap$1(kwAlg, sharedSecret, encryptedKey);
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            assertEnryptedKey(encryptedKey);
            return decrypt(alg, key, encryptedKey);
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            assertEnryptedKey(encryptedKey);
            assertHeaderParameter(joseHeader, 'p2c', 'PBES2 Count');
            assertHeaderParameter(joseHeader, 'p2s', 'PBES2 Salt');
            const { p2c } = joseHeader;
            const p2s = decode$1(joseHeader.p2s);
            return decrypt$1(alg, key, encryptedKey, p2c, p2s);
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            assertEnryptedKey(encryptedKey);
            return unwrap$1(alg, key, encryptedKey);
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            assertEnryptedKey(encryptedKey);
            assertHeaderParameter(joseHeader, 'iv', 'Initialization Vector');
            assertHeaderParameter(joseHeader, 'tag', 'Authentication Tag');
            const iv = decode$1(joseHeader.iv);
            const tag = decode$1(joseHeader.tag);
            return unwrap(alg, key, encryptedKey, iv, tag);
        }
        default: {
            throw new JOSENotSupported('unsupported or invalid "alg" (JWE Algorithm) header value');
        }
    }
}

function validateCrit(Err, recognizedDefault, recognizedOption, protectedHeader, joseHeader) {
    if (joseHeader.crit !== undefined && protectedHeader.crit === undefined) {
        throw new Err('"crit" (Critical) Header Parameter MUST be integrity protected');
    }
    if (!protectedHeader || protectedHeader.crit === undefined) {
        return new Set();
    }
    if (!Array.isArray(protectedHeader.crit) ||
        protectedHeader.crit.length === 0 ||
        protectedHeader.crit.some((input) => typeof input !== 'string' || input.length === 0)) {
        throw new Err('"crit" (Critical) Header Parameter MUST be an array of non-empty strings when present');
    }
    let recognized;
    if (recognizedOption !== undefined) {
        recognized = new Map([...Object.entries(recognizedOption), ...recognizedDefault.entries()]);
    }
    else {
        recognized = recognizedDefault;
    }
    for (const parameter of protectedHeader.crit) {
        if (!recognized.has(parameter)) {
            throw new JOSENotSupported(`Extension Header Parameter "${parameter}" is not recognized`);
        }
        if (joseHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" is missing`);
        }
        else if (recognized.get(parameter) && protectedHeader[parameter] === undefined) {
            throw new Err(`Extension Header Parameter "${parameter}" MUST be integrity protected`);
        }
    }
    return new Set(protectedHeader.crit);
}

const validateAlgorithms = (option, algorithms) => {
    if (algorithms !== undefined &&
        (!Array.isArray(algorithms) || algorithms.some((s) => typeof s !== 'string'))) {
        throw new TypeError(`"${option}" option must be an array of strings`);
    }
    if (!algorithms) {
        return undefined;
    }
    return new Set(algorithms);
};

const generateCek$1 = factory(random$1);
const checkExtensions$3 = validateCrit.bind(undefined, JWEInvalid, new Map());
const checkAlgOption$1 = validateAlgorithms.bind(undefined, 'keyManagementAlgorithms');
const checkEncOption = validateAlgorithms.bind(undefined, 'contentEncryptionAlgorithms');
async function flattenedDecrypt(jwe, key, options) {
    var _a;
    if (!isObject(jwe)) {
        throw new JWEInvalid('Flattened JWE must be an object');
    }
    if (jwe.protected === undefined && jwe.header === undefined && jwe.unprotected === undefined) {
        throw new JWEInvalid('JOSE Header missing');
    }
    if (typeof jwe.iv !== 'string') {
        throw new JWEInvalid('JWE Initialization Vector missing or incorrect type');
    }
    if (typeof jwe.ciphertext !== 'string') {
        throw new JWEInvalid('JWE Ciphertext missing or incorrect type');
    }
    if (typeof jwe.tag !== 'string') {
        throw new JWEInvalid('JWE Authentication Tag missing or incorrect type');
    }
    if (jwe.protected !== undefined && typeof jwe.protected !== 'string') {
        throw new JWEInvalid('JWE Protected Header incorrect type');
    }
    if (jwe.encrypted_key !== undefined && typeof jwe.encrypted_key !== 'string') {
        throw new JWEInvalid('JWE Encrypted Key incorrect type');
    }
    if (jwe.aad !== undefined && typeof jwe.aad !== 'string') {
        throw new JWEInvalid('JWE AAD incorrect type');
    }
    if (jwe.header !== undefined && !isObject(jwe.header)) {
        throw new JWEInvalid('JWE Shared Unprotected Header incorrect type');
    }
    if (jwe.unprotected !== undefined && !isObject(jwe.unprotected)) {
        throw new JWEInvalid('JWE Per-Recipient Unprotected Header incorrect type');
    }
    let parsedProt;
    if (jwe.protected) {
        const protectedHeader = decode$1(jwe.protected);
        parsedProt = JSON.parse(decoder.decode(protectedHeader));
    }
    if (!isDisjoint(parsedProt, jwe.header, jwe.unprotected)) {
        throw new JWEInvalid('JWE Protected, JWE Unprotected Header, and JWE Per-Recipient Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jwe.header,
        ...jwe.unprotected,
    };
    checkExtensions$3(options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    if (joseHeader.zip !== undefined) {
        if (!parsedProt || !parsedProt.zip) {
            throw new JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
        }
        if (joseHeader.zip !== 'DEF') {
            throw new JOSENotSupported('unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
        }
    }
    const { alg, enc } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new JWEInvalid('missing JWE Algorithm (alg) in JWE Header');
    }
    if (typeof enc !== 'string' || !enc) {
        throw new JWEInvalid('missing JWE Encryption Algorithm (enc) in JWE Header');
    }
    const keyManagementAlgorithms = options && checkAlgOption$1(options.keyManagementAlgorithms);
    const contentEncryptionAlgorithms = options && checkEncOption(options.contentEncryptionAlgorithms);
    if (keyManagementAlgorithms && !keyManagementAlgorithms.has(alg)) {
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
    }
    if (contentEncryptionAlgorithms && !contentEncryptionAlgorithms.has(enc)) {
        throw new JOSEAlgNotAllowed('"enc" (Encryption Algorithm) Header Parameter not allowed');
    }
    let encryptedKey;
    if (jwe.encrypted_key !== undefined) {
        encryptedKey = decode$1(jwe.encrypted_key);
    }
    if (typeof key === 'function') {
        key = await key(parsedProt, jwe);
    }
    let cek;
    try {
        cek = await decryptKeyManagement(alg, key, encryptedKey, joseHeader);
    }
    catch (err) {
        if (err instanceof TypeError) {
            throw err;
        }
        cek = generateCek$1(enc);
    }
    const iv = decode$1(jwe.iv);
    const tag = decode$1(jwe.tag);
    const protectedHeader = encoder.encode((_a = jwe.protected) !== null && _a !== void 0 ? _a : '');
    let additionalData;
    if (jwe.aad !== undefined) {
        additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(jwe.aad));
    }
    else {
        additionalData = protectedHeader;
    }
    let plaintext = await decrypt$2(enc, cek, decode$1(jwe.ciphertext), iv, tag, additionalData);
    if (joseHeader.zip === 'DEF') {
        plaintext = await ((options === null || options === void 0 ? void 0 : options.inflateRaw) || inflate)(plaintext);
    }
    const result = { plaintext };
    if (jwe.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jwe.aad !== undefined) {
        result.additionalAuthenticatedData = decode$1(jwe.aad);
    }
    if (jwe.unprotected !== undefined) {
        result.sharedUnprotectedHeader = jwe.unprotected;
    }
    if (jwe.header !== undefined) {
        result.unprotectedHeader = jwe.header;
    }
    return result;
}

async function compactDecrypt(jwe, key, options) {
    if (jwe instanceof Uint8Array) {
        jwe = decoder.decode(jwe);
    }
    if (typeof jwe !== 'string') {
        throw new JWEInvalid('Compact JWE must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: encryptedKey, 2: iv, 3: ciphertext, 4: tag, length, } = jwe.split('.');
    if (length !== 5) {
        throw new JWEInvalid('Invalid Compact JWE');
    }
    const decrypted = await flattenedDecrypt({
        ciphertext: (ciphertext || undefined),
        iv: (iv || undefined),
        protected: protectedHeader || undefined,
        tag: (tag || undefined),
        encrypted_key: encryptedKey || undefined,
    }, key, options);
    return { plaintext: decrypted.plaintext, protectedHeader: decrypted.protectedHeader };
}

const keyToJWK = async (key) => {
    if (!isCryptoKey(key)) {
        throw new TypeError('invalid key input');
    }
    if (!key.extractable) {
        throw new TypeError('non-extractable CryptoKey cannot be exported as a JWK');
    }
    const { ext, key_ops, alg, use, ...jwk } = await crypto.subtle.exportKey('jwk', key);
    return jwk;
};

async function fromKeyLike(key) {
    if (key instanceof Uint8Array) {
        return {
            kty: 'oct',
            k: encode$1(key),
        };
    }
    return keyToJWK(key);
}

const generateCek = factory(random$1);
async function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {
    let encryptedKey;
    let parameters;
    let cek;
    switch (alg) {
        case 'dir': {
            cek = key;
            break;
        }
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW': {
            if (!ecdhAllowed(key)) {
                throw new JOSENotSupported('ECDH-ES with the provided key is not allowed or not supported by your javascript runtime');
            }
            const { apu, apv } = providedParameters;
            let { epk: ephemeralKey } = providedParameters;
            ephemeralKey || (ephemeralKey = await generateEpk(key));
            const { x, y, crv, kty } = await fromKeyLike(ephemeralKey);
            const sharedSecret = await deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, parseInt(alg.substr(-5, 3), 10) || bitLengths.get(enc), apu, apv);
            parameters = { epk: { x, y, crv, kty } };
            if (apu)
                parameters.apu = encode$1(apu);
            if (apv)
                parameters.apv = encode$1(apv);
            if (alg === 'ECDH-ES') {
                cek = sharedSecret;
                break;
            }
            cek = providedCek || generateCek(enc);
            const kwAlg = alg.substr(-6);
            encryptedKey = await wrap$1(kwAlg, sharedSecret, cek);
            break;
        }
        case 'RSA1_5':
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512': {
            cek = providedCek || generateCek(enc);
            encryptedKey = await encrypt$1(alg, key, cek);
            break;
        }
        case 'PBES2-HS256+A128KW':
        case 'PBES2-HS384+A192KW':
        case 'PBES2-HS512+A256KW': {
            cek = providedCek || generateCek(enc);
            const { p2c, p2s } = providedParameters;
            ({ encryptedKey, ...parameters } = await encrypt$2(alg, key, cek, p2c, p2s));
            break;
        }
        case 'A128KW':
        case 'A192KW':
        case 'A256KW': {
            cek = providedCek || generateCek(enc);
            encryptedKey = await wrap$1(alg, key, cek);
            break;
        }
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW': {
            cek = providedCek || generateCek(enc);
            const { iv } = providedParameters;
            ({ encryptedKey, ...parameters } = await wrap(alg, key, cek, iv));
            break;
        }
        default: {
            throw new JOSENotSupported('unsupported or invalid "alg" (JWE Algorithm) header value');
        }
    }
    return { cek, encryptedKey, parameters };
}

const generateIv = factory$1(random$1);
const checkExtensions$2 = validateCrit.bind(undefined, JWEInvalid, new Map());
class FlattenedEncrypt {
    constructor(plaintext) {
        this._plaintext = plaintext;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
            throw new TypeError('setKeyManagementParameters can only be called once');
        }
        this._keyManagementParameters = parameters;
        return this;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setSharedUnprotectedHeader(sharedUnprotectedHeader) {
        if (this._sharedUnprotectedHeader) {
            throw new TypeError('setSharedUnprotectedHeader can only be called once');
        }
        this._sharedUnprotectedHeader = sharedUnprotectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    setAdditionalAuthenticatedData(aad) {
        this._aad = aad;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) {
            throw new TypeError('setContentEncryptionKey can only be called once');
        }
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) {
            throw new TypeError('setInitializationVector can only be called once');
        }
        this._iv = iv;
        return this;
    }
    async encrypt(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {
            throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');
        }
        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {
            throw new JWEInvalid('JWE Shared Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
            ...this._sharedUnprotectedHeader,
        };
        checkExtensions$2(options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        if (joseHeader.zip !== undefined) {
            if (!this._protectedHeader || !this._protectedHeader.zip) {
                throw new JWEInvalid('JWE "zip" (Compression Algorithm) Header MUST be integrity protected');
            }
            if (joseHeader.zip !== 'DEF') {
                throw new JOSENotSupported('unsupported JWE "zip" (Compression Algorithm) Header Parameter value');
            }
        }
        const { alg, enc } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new JWEInvalid('JWE "alg" (Algorithm) Header Parameter missing or invalid');
        }
        if (typeof enc !== 'string' || !enc) {
            throw new JWEInvalid('JWE "enc" (Encryption Algorithm) Header Parameter missing or invalid');
        }
        let encryptedKey;
        if (alg === 'dir') {
            if (this._cek) {
                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');
            }
        }
        else if (alg === 'ECDH-ES') {
            if (this._cek) {
                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');
            }
        }
        let cek;
        {
            let parameters;
            ({ cek, encryptedKey, parameters } = await encryptKeyManagement(alg, enc, key, this._cek, this._keyManagementParameters));
            if (parameters) {
                if (!this._protectedHeader) {
                    this.setProtectedHeader(parameters);
                }
                else {
                    this._protectedHeader = { ...this._protectedHeader, ...parameters };
                }
            }
        }
        this._iv || (this._iv = generateIv(enc));
        let additionalData;
        let protectedHeader;
        let aadMember;
        if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode$1(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = encoder.encode('');
        }
        if (this._aad) {
            aadMember = encode$1(this._aad);
            additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));
        }
        else {
            additionalData = protectedHeader;
        }
        let ciphertext;
        let tag;
        if (joseHeader.zip === 'DEF') {
            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || deflate)(this._plaintext);
            ({ ciphertext, tag } = await encrypt(enc, deflated, cek, this._iv, additionalData));
        }
        else {
            ({ ciphertext, tag } = await encrypt(enc, this._plaintext, cek, this._iv, additionalData));
        }
        const jwe = {
            ciphertext: encode$1(ciphertext),
            iv: encode$1(this._iv),
            tag: encode$1(tag),
        };
        if (encryptedKey) {
            jwe.encrypted_key = encode$1(encryptedKey);
        }
        if (aadMember) {
            jwe.aad = aadMember;
        }
        if (this._protectedHeader) {
            jwe.protected = decoder.decode(protectedHeader);
        }
        if (this._sharedUnprotectedHeader) {
            jwe.unprotected = this._sharedUnprotectedHeader;
        }
        if (this._unprotectedHeader) {
            jwe.header = this._unprotectedHeader;
        }
        return jwe;
    }
}

class CompactEncrypt {
    constructor(plaintext) {
        this._flattened = new FlattenedEncrypt(plaintext);
    }
    setContentEncryptionKey(cek) {
        this._flattened.setContentEncryptionKey(cek);
        return this;
    }
    setInitializationVector(iv) {
        this._flattened.setInitializationVector(iv);
        return this;
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    setKeyManagementParameters(parameters) {
        this._flattened.setKeyManagementParameters(parameters);
        return this;
    }
    async encrypt(key, options) {
        const jwe = await this._flattened.encrypt(key, options);
        return [jwe.protected, jwe.encrypted_key, jwe.iv, jwe.ciphertext, jwe.tag].join('.');
    }
}

async function generalDecrypt(jwe, key, options) {
    if (!isObject(jwe)) {
        throw new JWEInvalid('General JWE must be an object');
    }
    if (!Array.isArray(jwe.recipients) || !jwe.recipients.every(isObject)) {
        throw new JWEInvalid('JWE Recipients missing or incorrect type');
    }
    for (const recipient of jwe.recipients) {
        try {
            return await flattenedDecrypt({
                aad: jwe.aad,
                ciphertext: jwe.ciphertext,
                encrypted_key: recipient.encrypted_key,
                header: recipient.header,
                iv: jwe.iv,
                protected: jwe.protected,
                tag: jwe.tag,
                unprotected: jwe.unprotected,
            }, key, options);
        }
        catch (_a) {
        }
    }
    throw new JWEDecryptionFailed();
}

async function EmbeddedJWK(protectedHeader, token) {
    const joseHeader = {
        ...protectedHeader,
        ...token.header,
    };
    if (!isObject(joseHeader.jwk)) {
        throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a JSON object');
    }
    const key = await parseJwk(joseHeader.jwk, joseHeader.alg, true);
    if (key.type !== 'public') {
        throw new JWSInvalid('"jwk" (JSON Web Key) Header Parameter must be a public key');
    }
    return key;
}

const check = (value, description) => {
    if (typeof value !== 'string' || !value) {
        throw new JWKInvalid(`${description} missing or invalid`);
    }
};
async function calculateThumbprint(jwk, digestAlgorithm = 'sha256') {
    if (!isObject(jwk)) {
        throw new TypeError('JWK must be an object');
    }
    let components;
    switch (jwk.kty) {
        case 'EC':
            check(jwk.crv, '"crv" (Curve) Parameter');
            check(jwk.x, '"x" (X Coordinate) Parameter');
            check(jwk.y, '"y" (Y Coordinate) Parameter');
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x, y: jwk.y };
            break;
        case 'OKP':
            check(jwk.crv, '"crv" (Subtype of Key Pair) Parameter');
            check(jwk.x, '"x" (Public Key) Parameter');
            components = { crv: jwk.crv, kty: jwk.kty, x: jwk.x };
            break;
        case 'RSA':
            check(jwk.e, '"e" (Exponent) Parameter');
            check(jwk.n, '"n" (Modulus) Parameter');
            components = { e: jwk.e, kty: jwk.kty, n: jwk.n };
            break;
        case 'oct':
            check(jwk.k, '"k" (Key Value) Parameter');
            components = { k: jwk.k, kty: jwk.kty };
            break;
        default:
            throw new JOSENotSupported('"kty" (Key Type) Parameter missing or unsupported');
    }
    const data = encoder.encode(JSON.stringify(components));
    return encode$1(await digest(digestAlgorithm, data));
}

const fetchJwks = async (url, timeout) => {
    let controller;
    if (typeof AbortController === 'function') {
        controller = new AbortController();
        setTimeout(() => controller.abort(), timeout);
    }
    const response = await globalThis$1.fetch(url.href, {
        signal: controller ? controller.signal : undefined,
        redirect: 'manual',
        referrerPolicy: 'no-referrer',
        credentials: 'omit',
        mode: 'cors',
        method: 'GET',
    });
    if (response.status !== 200) {
        throw new JOSEError('Expected 200 OK from the JSON Web Key Set HTTP response');
    }
    try {
        return await response.json();
    }
    catch (err) {
        throw new JOSEError('Failed to parse the JSON Web Key Set HTTP response as JSON');
    }
};

function getKtyFromAlg(alg) {
    switch (alg.substr(0, 2)) {
        case 'RS':
        case 'PS':
            return 'RSA';
        case 'ES':
            return 'EC';
        case 'Ed':
            return 'OKP';
        default:
            throw new JOSENotSupported('Unsupported "alg" value for a JSON Web Key Set');
    }
}
function isJWKLike(key) {
    return isObject(key);
}
class RemoteJWKSet {
    constructor(url, options) {
        this._cached = new WeakMap();
        if (!(url instanceof URL)) {
            throw new TypeError('url must be an instance of URL');
        }
        this._url = new URL(url.href);
        this._options = { agent: options === null || options === void 0 ? void 0 : options.agent };
        this._timeoutDuration =
            typeof (options === null || options === void 0 ? void 0 : options.timeoutDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.timeoutDuration : 5000;
        this._cooldownDuration =
            typeof (options === null || options === void 0 ? void 0 : options.cooldownDuration) === 'number' ? options === null || options === void 0 ? void 0 : options.cooldownDuration : 30000;
    }
    coolingDown() {
        if (typeof this._cooldownStarted === 'undefined') {
            return false;
        }
        return Date.now() < this._cooldownStarted + this._cooldownDuration;
    }
    async getKey(protectedHeader) {
        if (!this._jwks) {
            await this.reload();
        }
        const candidates = this._jwks.keys.filter((jwk) => {
            let candidate = jwk.kty === getKtyFromAlg(protectedHeader.alg);
            if (candidate && typeof protectedHeader.kid === 'string') {
                candidate = protectedHeader.kid === jwk.kid;
            }
            if (candidate && typeof jwk.alg === 'string') {
                candidate = protectedHeader.alg === jwk.alg;
            }
            if (candidate && typeof jwk.use === 'string') {
                candidate = jwk.use === 'sig';
            }
            if (candidate && Array.isArray(jwk.key_ops)) {
                candidate = jwk.key_ops.includes('verify');
            }
            if (candidate && protectedHeader.alg === 'EdDSA') {
                candidate = ['Ed25519', 'Ed448'].includes(jwk.crv);
            }
            if (candidate) {
                switch (protectedHeader.alg) {
                    case 'ES256':
                        candidate = jwk.crv === 'P-256';
                        break;
                    case 'ES256K':
                        candidate = jwk.crv === 'secp256k1';
                        break;
                    case 'ES384':
                        candidate = jwk.crv === 'P-384';
                        break;
                    case 'ES512':
                        candidate = jwk.crv === 'P-521';
                        break;
                }
            }
            return candidate;
        });
        const { 0: jwk, length } = candidates;
        if (length === 0) {
            if (this.coolingDown() === false) {
                await this.reload();
                return this.getKey(protectedHeader);
            }
            throw new JWKSNoMatchingKey();
        }
        else if (length !== 1) {
            throw new JWKSMultipleMatchingKeys();
        }
        if (!this._cached.has(jwk)) {
            this._cached.set(jwk, {});
        }
        const cached = this._cached.get(jwk);
        if (cached[protectedHeader.alg] === undefined) {
            const keyObject = (await parseJwk({ ...jwk, alg: protectedHeader.alg }));
            if (keyObject.type !== 'public') {
                throw new JWKSInvalid('JSON Web Key Set members must be public keys');
            }
            cached[protectedHeader.alg] = keyObject;
        }
        return cached[protectedHeader.alg];
    }
    async reload() {
        if (!this._pendingFetch) {
            this._pendingFetch = fetchJwks(this._url, this._timeoutDuration, this._options)
                .then((json) => {
                if (typeof json !== 'object' ||
                    !json ||
                    !Array.isArray(json.keys) ||
                    !json.keys.every(isJWKLike)) {
                    throw new JWKSInvalid('JSON Web Key Set malformed');
                }
                this._jwks = { keys: json.keys };
                this._cooldownStarted = Date.now();
                this._pendingFetch = undefined;
            })
                .catch((err) => {
                this._pendingFetch = undefined;
                throw err;
            });
        }
        await this._pendingFetch;
    }
}
function createRemoteJWKSet(url, options) {
    const set = new RemoteJWKSet(url, options);
    return set.getKey.bind(set);
}

function subtleDsa(alg) {
    switch (alg) {
        case 'HS256':
            return { hash: { name: 'SHA-256' }, name: 'HMAC' };
        case 'HS384':
            return { hash: { name: 'SHA-384' }, name: 'HMAC' };
        case 'HS512':
            return { hash: { name: 'SHA-512' }, name: 'HMAC' };
        case 'PS256':
            return {
                hash: { name: 'SHA-256' },
                name: 'RSA-PSS',
                saltLength: 256 >> 3,
            };
        case 'PS384':
            return {
                hash: { name: 'SHA-384' },
                name: 'RSA-PSS',
                saltLength: 384 >> 3,
            };
        case 'PS512':
            return {
                hash: { name: 'SHA-512' },
                name: 'RSA-PSS',
                saltLength: 512 >> 3,
            };
        case 'RS256':
            return { hash: { name: 'SHA-256' }, name: 'RSASSA-PKCS1-v1_5' };
        case 'RS384':
            return { hash: { name: 'SHA-384' }, name: 'RSASSA-PKCS1-v1_5' };
        case 'RS512':
            return { hash: { name: 'SHA-512' }, name: 'RSASSA-PKCS1-v1_5' };
        case 'ES256':
            return { hash: { name: 'SHA-256' }, name: 'ECDSA', namedCurve: 'P-256' };
        case 'ES384':
            return { hash: { name: 'SHA-384' }, name: 'ECDSA', namedCurve: 'P-384' };
        case 'ES512':
            return { hash: { name: 'SHA-512' }, name: 'ECDSA', namedCurve: 'P-521' };
        default:
            throw new JOSENotSupported(`alg ${alg} is not supported either by JOSE or your javascript runtime`);
    }
}

function getCryptoKey(alg, key, usage) {
    if (isCryptoKey(key)) {
        return key;
    }
    if (key instanceof Uint8Array) {
        if (!alg.startsWith('HS')) {
            throw new TypeError('symmetric keys are only applicable for HMAC-based algorithms');
        }
        return crypto.subtle.importKey('raw', key, { hash: { name: `SHA-${alg.substr(-3)}` }, name: 'HMAC' }, false, [usage]);
    }
    throw new TypeError('invalid key input');
}

const sign = async (alg, key, data) => {
    const cryptoKey = await getCryptoKey(alg, key, 'sign');
    checkKeyLength(alg, cryptoKey);
    const signature = await crypto.subtle.sign(subtleDsa(alg), cryptoKey, data);
    return new Uint8Array(signature);
};

const checkKeyType = (alg, key) => {
    if (alg.startsWith('HS') ||
        alg === 'dir' ||
        alg.startsWith('PBES2') ||
        alg.match(/^A\d{3}(?:GCM)KW$/)) {
        if (key instanceof Uint8Array || key.type === 'secret') {
            return;
        }
        throw new TypeError('CryptoKey or KeyObject instances for symmetric algorithms must be of type "secret"');
    }
    if (key instanceof Uint8Array) {
        throw new TypeError('CryptoKey or KeyObject instances must be used for asymmetric algorithms');
    }
    if (key.type === 'secret') {
        throw new TypeError('CryptoKey or KeyObject instances for asymmetric algorithms must not be of type "secret"');
    }
};

const checkExtensions$1 = validateCrit.bind(undefined, JWSInvalid, new Map([['b64', true]]));
class FlattenedSign {
    constructor(payload) {
        this._payload = payload;
    }
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    async sign(key, options) {
        if (!this._protectedHeader && !this._unprotectedHeader) {
            throw new JWSInvalid('either setProtectedHeader or setUnprotectedHeader must be called before #sign()');
        }
        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader)) {
            throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
        }
        const joseHeader = {
            ...this._protectedHeader,
            ...this._unprotectedHeader,
        };
        const extensions = checkExtensions$1(options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);
        let b64 = true;
        if (extensions.has('b64')) {
            b64 = this._protectedHeader.b64;
            if (typeof b64 !== 'boolean') {
                throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
            }
        }
        const { alg } = joseHeader;
        if (typeof alg !== 'string' || !alg) {
            throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
        }
        checkKeyType(alg, key);
        let payload = this._payload;
        if (b64) {
            payload = encoder.encode(encode$1(payload));
        }
        let protectedHeader;
        if (this._protectedHeader) {
            protectedHeader = encoder.encode(encode$1(JSON.stringify(this._protectedHeader)));
        }
        else {
            protectedHeader = encoder.encode('');
        }
        const data = concat(protectedHeader, encoder.encode('.'), payload);
        const signature = await sign(alg, key, data);
        const jws = {
            signature: encode$1(signature),
        };
        if (b64) {
            jws.payload = decoder.decode(payload);
        }
        if (this._unprotectedHeader) {
            jws.header = this._unprotectedHeader;
        }
        if (this._protectedHeader) {
            jws.protected = decoder.decode(protectedHeader);
        }
        return jws;
    }
}

class CompactSign {
    constructor(payload) {
        this._flattened = new FlattenedSign(payload);
    }
    setProtectedHeader(protectedHeader) {
        this._flattened.setProtectedHeader(protectedHeader);
        return this;
    }
    async sign(key, options) {
        const jws = await this._flattened.sign(key, options);
        if (jws.payload === undefined) {
            throw new TypeError('use the flattened module for creating JWS with b64: false');
        }
        return `${jws.protected}.${jws.payload}.${jws.signature}`;
    }
}

const verify = async (alg, key, signature, data) => {
    const cryptoKey = await getCryptoKey(alg, key, 'verify');
    checkKeyLength(alg, cryptoKey);
    const algorithm = subtleDsa(alg);
    try {
        return await crypto.subtle.verify(algorithm, cryptoKey, signature, data);
    }
    catch (_a) {
        return false;
    }
};

const checkExtensions = validateCrit.bind(undefined, JWSInvalid, new Map([['b64', true]]));
const checkAlgOption = validateAlgorithms.bind(undefined, 'algorithms');
async function flattenedVerify(jws, key, options) {
    var _a;
    if (!isObject(jws)) {
        throw new JWSInvalid('Flattened JWS must be an object');
    }
    if (jws.protected === undefined && jws.header === undefined) {
        throw new JWSInvalid('Flattened JWS must have either of the "protected" or "header" members');
    }
    if (jws.protected !== undefined && typeof jws.protected !== 'string') {
        throw new JWSInvalid('JWS Protected Header incorrect type');
    }
    if (jws.payload === undefined) {
        throw new JWSInvalid('JWS Payload missing');
    }
    if (typeof jws.signature !== 'string') {
        throw new JWSInvalid('JWS Signature missing or incorrect type');
    }
    if (jws.header !== undefined && !isObject(jws.header)) {
        throw new JWSInvalid('JWS Unprotected Header incorrect type');
    }
    let parsedProt = {};
    if (jws.protected) {
        const protectedHeader = decode$1(jws.protected);
        parsedProt = JSON.parse(decoder.decode(protectedHeader));
    }
    if (!isDisjoint(parsedProt, jws.header)) {
        throw new JWSInvalid('JWS Protected and JWS Unprotected Header Parameter names must be disjoint');
    }
    const joseHeader = {
        ...parsedProt,
        ...jws.header,
    };
    const extensions = checkExtensions(options === null || options === void 0 ? void 0 : options.crit, parsedProt, joseHeader);
    let b64 = true;
    if (extensions.has('b64')) {
        b64 = parsedProt.b64;
        if (typeof b64 !== 'boolean') {
            throw new JWSInvalid('The "b64" (base64url-encode payload) Header Parameter must be a boolean');
        }
    }
    const { alg } = joseHeader;
    if (typeof alg !== 'string' || !alg) {
        throw new JWSInvalid('JWS "alg" (Algorithm) Header Parameter missing or invalid');
    }
    const algorithms = options && checkAlgOption(options.algorithms);
    if (algorithms && !algorithms.has(alg)) {
        throw new JOSEAlgNotAllowed('"alg" (Algorithm) Header Parameter not allowed');
    }
    if (b64) {
        if (typeof jws.payload !== 'string') {
            throw new JWSInvalid('JWS Payload must be a string');
        }
    }
    else if (typeof jws.payload !== 'string' && !(jws.payload instanceof Uint8Array)) {
        throw new JWSInvalid('JWS Payload must be a string or an Uint8Array instance');
    }
    if (typeof key === 'function') {
        key = await key(parsedProt, jws);
    }
    checkKeyType(alg, key);
    const data = concat(encoder.encode((_a = jws.protected) !== null && _a !== void 0 ? _a : ''), encoder.encode('.'), typeof jws.payload === 'string' ? encoder.encode(jws.payload) : jws.payload);
    const signature = decode$1(jws.signature);
    const verified = await verify(alg, key, signature, data);
    if (!verified) {
        throw new JWSSignatureVerificationFailed();
    }
    let payload;
    if (b64) {
        payload = decode$1(jws.payload);
    }
    else if (typeof jws.payload === 'string') {
        payload = encoder.encode(jws.payload);
    }
    else {
        payload = jws.payload;
    }
    const result = { payload };
    if (jws.protected !== undefined) {
        result.protectedHeader = parsedProt;
    }
    if (jws.header !== undefined) {
        result.unprotectedHeader = jws.header;
    }
    return result;
}

async function compactVerify(jws, key, options) {
    if (jws instanceof Uint8Array) {
        jws = decoder.decode(jws);
    }
    if (typeof jws !== 'string') {
        throw new JWSInvalid('Compact JWS must be a string or Uint8Array');
    }
    const { 0: protectedHeader, 1: payload, 2: signature, length } = jws.split('.');
    if (length !== 3) {
        throw new JWSInvalid('Invalid Compact JWS');
    }
    const verified = await flattenedVerify({
        payload: (payload || undefined),
        protected: protectedHeader || undefined,
        signature: (signature || undefined),
    }, key, options);
    return { payload: verified.payload, protectedHeader: verified.protectedHeader };
}

const signatureRef = new WeakMap();
class IndividualSignature {
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setUnprotectedHeader(unprotectedHeader) {
        if (this._unprotectedHeader) {
            throw new TypeError('setUnprotectedHeader can only be called once');
        }
        this._unprotectedHeader = unprotectedHeader;
        return this;
    }
    set _protectedHeader(value) {
        signatureRef.get(this).protectedHeader = value;
    }
    get _protectedHeader() {
        return signatureRef.get(this).protectedHeader;
    }
    set _unprotectedHeader(value) {
        signatureRef.get(this).unprotectedHeader = value;
    }
    get _unprotectedHeader() {
        return signatureRef.get(this).unprotectedHeader;
    }
}
class GeneralSign {
    constructor(payload) {
        this._signatures = [];
        this._payload = payload;
    }
    addSignature(key, options) {
        const signature = new IndividualSignature();
        signatureRef.set(signature, { key, options });
        this._signatures.push(signature);
        return signature;
    }
    async sign() {
        if (!this._signatures.length) {
            throw new JWSInvalid('at least one signature must be added');
        }
        const jws = {
            signatures: [],
        };
        await Promise.all(this._signatures.map(async (sig, i) => {
            const { protectedHeader, unprotectedHeader, options, key } = signatureRef.get(sig);
            const flattened = new FlattenedSign(this._payload);
            if (protectedHeader) {
                flattened.setProtectedHeader(protectedHeader);
            }
            if (unprotectedHeader) {
                flattened.setUnprotectedHeader(unprotectedHeader);
            }
            const { payload, ...rest } = await flattened.sign(key, options);
            if ('payload' in jws && jws.payload !== payload) {
                throw new JWSInvalid(`index ${i} signature produced a different payload`);
            }
            else {
                jws.payload = payload;
            }
            jws.signatures.push(rest);
        }));
        if ('payload' in jws && jws.payload === undefined) {
            delete jws.payload;
        }
        return jws;
    }
}

async function generalVerify(jws, key, options) {
    if (!isObject(jws)) {
        throw new JWSInvalid('General JWS must be an object');
    }
    if (!Array.isArray(jws.signatures) || !jws.signatures.every(isObject)) {
        throw new JWSInvalid('JWS Signatures missing or incorrect type');
    }
    for (const signature of jws.signatures) {
        try {
            return await flattenedVerify({
                header: signature.header,
                payload: jws.payload,
                protected: signature.protected,
                signature: signature.signature,
            }, key, options);
        }
        catch (_a) {
        }
    }
    throw new JWSSignatureVerificationFailed();
}

var epoch = (date) => Math.floor(date.getTime() / 1000);

const minute = 60;
const hour = minute * 60;
const day = hour * 24;
const week = day * 7;
const year = day * 365.25;
const REGEX = /^(\d+|\d+\.\d+) ?(seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)$/i;
var secs = (str) => {
    const matched = REGEX.exec(str);
    if (!matched) {
        throw new TypeError('invalid time period format');
    }
    const value = parseFloat(matched[1]);
    const unit = matched[2].toLowerCase();
    switch (unit) {
        case 'sec':
        case 'secs':
        case 'second':
        case 'seconds':
        case 's':
            return Math.round(value);
        case 'minute':
        case 'minutes':
        case 'min':
        case 'mins':
        case 'm':
            return Math.round(value * minute);
        case 'hour':
        case 'hours':
        case 'hr':
        case 'hrs':
        case 'h':
            return Math.round(value * hour);
        case 'day':
        case 'days':
        case 'd':
            return Math.round(value * day);
        case 'week':
        case 'weeks':
        case 'w':
            return Math.round(value * week);
        default:
            return Math.round(value * year);
    }
};

const normalizeTyp = (value) => value.toLowerCase().replace(/^application\//, '');
const checkAudiencePresence = (audPayload, audOption) => {
    if (typeof audPayload === 'string') {
        return audOption.includes(audPayload);
    }
    if (Array.isArray(audPayload)) {
        return audOption.some(Set.prototype.has.bind(new Set(audPayload)));
    }
    return false;
};
var jwtPayload = (protectedHeader, encodedPayload, options = {}) => {
    const { typ } = options;
    if (typ &&
        (typeof protectedHeader.typ !== 'string' ||
            normalizeTyp(protectedHeader.typ) !== normalizeTyp(typ))) {
        throw new JWTClaimValidationFailed('unexpected "typ" JWT header value', 'typ', 'check_failed');
    }
    let payload;
    try {
        payload = JSON.parse(decoder.decode(encodedPayload));
    }
    catch (_a) {
    }
    if (!isObject(payload)) {
        throw new JWTInvalid('JWT Claims Set must be a top-level JSON object');
    }
    const { issuer } = options;
    if (issuer && !(Array.isArray(issuer) ? issuer : [issuer]).includes(payload.iss)) {
        throw new JWTClaimValidationFailed('unexpected "iss" claim value', 'iss', 'check_failed');
    }
    const { subject } = options;
    if (subject && payload.sub !== subject) {
        throw new JWTClaimValidationFailed('unexpected "sub" claim value', 'sub', 'check_failed');
    }
    const { audience } = options;
    if (audience &&
        !checkAudiencePresence(payload.aud, typeof audience === 'string' ? [audience] : audience)) {
        throw new JWTClaimValidationFailed('unexpected "aud" claim value', 'aud', 'check_failed');
    }
    let tolerance;
    switch (typeof options.clockTolerance) {
        case 'string':
            tolerance = secs(options.clockTolerance);
            break;
        case 'number':
            tolerance = options.clockTolerance;
            break;
        case 'undefined':
            tolerance = 0;
            break;
        default:
            throw new TypeError('invalid clockTolerance option type');
    }
    const { currentDate } = options;
    const now = epoch(currentDate || new Date());
    if (payload.iat !== undefined || options.maxTokenAge) {
        if (typeof payload.iat !== 'number') {
            throw new JWTClaimValidationFailed('"iat" claim must be a number', 'iat', 'invalid');
        }
        if (payload.exp === undefined && payload.iat > now + tolerance) {
            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
        }
    }
    if (payload.nbf !== undefined) {
        if (typeof payload.nbf !== 'number') {
            throw new JWTClaimValidationFailed('"nbf" claim must be a number', 'nbf', 'invalid');
        }
        if (payload.nbf > now + tolerance) {
            throw new JWTClaimValidationFailed('"nbf" claim timestamp check failed', 'nbf', 'check_failed');
        }
    }
    if (payload.exp !== undefined) {
        if (typeof payload.exp !== 'number') {
            throw new JWTClaimValidationFailed('"exp" claim must be a number', 'exp', 'invalid');
        }
        if (payload.exp <= now - tolerance) {
            throw new JWTExpired('"exp" claim timestamp check failed', 'exp', 'check_failed');
        }
    }
    if (options.maxTokenAge) {
        const age = now - payload.iat;
        const max = typeof options.maxTokenAge === 'number' ? options.maxTokenAge : secs(options.maxTokenAge);
        if (age - tolerance > max) {
            throw new JWTExpired('"iat" claim timestamp check failed (too far in the past)', 'iat', 'check_failed');
        }
        if (age < 0 - tolerance) {
            throw new JWTClaimValidationFailed('"iat" claim timestamp check failed (it should be in the past)', 'iat', 'check_failed');
        }
    }
    return payload;
};

async function jwtDecrypt(jwt, key, options) {
    const decrypted = await compactDecrypt(jwt, key, options);
    const payload = jwtPayload(decrypted.protectedHeader, decrypted.plaintext, options);
    const { protectedHeader } = decrypted;
    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {
        throw new JWTClaimValidationFailed('replicated "iss" claim header parameter mismatch', 'iss', 'mismatch');
    }
    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {
        throw new JWTClaimValidationFailed('replicated "sub" claim header parameter mismatch', 'sub', 'mismatch');
    }
    if (protectedHeader.aud !== undefined &&
        JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {
        throw new JWTClaimValidationFailed('replicated "aud" claim header parameter mismatch', 'aud', 'mismatch');
    }
    return { payload, protectedHeader };
}

class ProduceJWT {
    constructor(payload) {
        if (!isObject(payload)) {
            throw new TypeError('JWT Claims Set MUST be an object');
        }
        this._payload = payload;
    }
    setIssuer(issuer) {
        this._payload = { ...this._payload, iss: issuer };
        return this;
    }
    setSubject(subject) {
        this._payload = { ...this._payload, sub: subject };
        return this;
    }
    setAudience(audience) {
        this._payload = { ...this._payload, aud: audience };
        return this;
    }
    setJti(jwtId) {
        this._payload = { ...this._payload, jti: jwtId };
        return this;
    }
    setNotBefore(input) {
        if (typeof input === 'number') {
            this._payload = { ...this._payload, nbf: input };
        }
        else {
            this._payload = { ...this._payload, nbf: epoch(new Date()) + secs(input) };
        }
        return this;
    }
    setExpirationTime(input) {
        if (typeof input === 'number') {
            this._payload = { ...this._payload, exp: input };
        }
        else {
            this._payload = { ...this._payload, exp: epoch(new Date()) + secs(input) };
        }
        return this;
    }
    setIssuedAt(input) {
        if (typeof input === 'undefined') {
            this._payload = { ...this._payload, iat: epoch(new Date()) };
        }
        else {
            this._payload = { ...this._payload, iat: input };
        }
        return this;
    }
}

class EncryptJWT extends ProduceJWT {
    setProtectedHeader(protectedHeader) {
        if (this._protectedHeader) {
            throw new TypeError('setProtectedHeader can only be called once');
        }
        this._protectedHeader = protectedHeader;
        return this;
    }
    setKeyManagementParameters(parameters) {
        if (this._keyManagementParameters) {
            throw new TypeError('setKeyManagementParameters can only be called once');
        }
        this._keyManagementParameters = parameters;
        return this;
    }
    setContentEncryptionKey(cek) {
        if (this._cek) {
            throw new TypeError('setContentEncryptionKey can only be called once');
        }
        this._cek = cek;
        return this;
    }
    setInitializationVector(iv) {
        if (this._iv) {
            throw new TypeError('setInitializationVector can only be called once');
        }
        this._iv = iv;
        return this;
    }
    replicateIssuerAsHeader() {
        this._replicateIssuerAsHeader = true;
        return this;
    }
    replicateSubjectAsHeader() {
        this._replicateSubjectAsHeader = true;
        return this;
    }
    replicateAudienceAsHeader() {
        this._replicateAudienceAsHeader = true;
        return this;
    }
    async encrypt(key, options) {
        const enc = new CompactEncrypt(encoder.encode(JSON.stringify(this._payload)));
        if (this._replicateIssuerAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, iss: this._payload.iss };
        }
        if (this._replicateSubjectAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, sub: this._payload.sub };
        }
        if (this._replicateAudienceAsHeader) {
            this._protectedHeader = { ...this._protectedHeader, aud: this._payload.aud };
        }
        enc.setProtectedHeader(this._protectedHeader);
        if (this._iv) {
            enc.setInitializationVector(this._iv);
        }
        if (this._cek) {
            enc.setContentEncryptionKey(this._cek);
        }
        if (this._keyManagementParameters) {
            enc.setKeyManagementParameters(this._keyManagementParameters);
        }
        return enc.encrypt(key, options);
    }
}

class SignJWT extends ProduceJWT {
    setProtectedHeader(protectedHeader) {
        this._protectedHeader = protectedHeader;
        return this;
    }
    async sign(key, options) {
        var _a;
        const sig = new CompactSign(encoder.encode(JSON.stringify(this._payload)));
        sig.setProtectedHeader(this._protectedHeader);
        if (((_a = this._protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && this._protectedHeader.b64 === false) {
            throw new JWTInvalid('JWTs MUST NOT use unencoded payload');
        }
        return sig.sign(key, options);
    }
}

class UnsecuredJWT extends ProduceJWT {
    encode() {
        const header = encode$1(JSON.stringify({ alg: 'none' }));
        const payload = encode$1(JSON.stringify(this._payload));
        return `${header}.${payload}.`;
    }
    static decode(jwt, options) {
        if (typeof jwt !== 'string') {
            throw new JWTInvalid('Unsecured JWT must be a string');
        }
        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split('.');
        if (length !== 3 || signature !== '') {
            throw new JWTInvalid('Invalid Unsecured JWT');
        }
        let header;
        try {
            header = JSON.parse(decoder.decode(decode$1(encodedHeader)));
            if (header.alg !== 'none')
                throw new Error();
        }
        catch (_a) {
            throw new JWTInvalid('Invalid Unsecured JWT');
        }
        const payload = jwtPayload(header, decode$1(encodedPayload), options);
        return { payload, header };
    }
}

async function jwtVerify(jwt, key, options) {
    var _a;
    const verified = await compactVerify(jwt, key, options);
    if (((_a = verified.protectedHeader.crit) === null || _a === void 0 ? void 0 : _a.includes('b64')) && verified.protectedHeader.b64 === false) {
        throw new JWTInvalid('JWTs MUST NOT use unencoded payload');
    }
    const payload = jwtPayload(verified.protectedHeader, verified.payload, options);
    return { payload, protectedHeader: verified.protectedHeader };
}

const encode = encode$1;
const decode = decode$1;

function decodeProtectedHeader(token) {
    let protectedB64u;
    if (typeof token === 'string') {
        const parts = token.split('.');
        if (parts.length === 3 || parts.length === 5) {
            [protectedB64u] = parts;
        }
    }
    else if (typeof token === 'object' && token) {
        if ('protected' in token) {
            protectedB64u = token.protected;
        }
        else {
            throw new TypeError('Token does not contain a Protected Header');
        }
    }
    try {
        if (typeof protectedB64u !== 'string' || !protectedB64u) {
            throw new Error();
        }
        const result = JSON.parse(decoder.decode(decode(protectedB64u)));
        if (!isObject(result)) {
            throw new Error();
        }
        return result;
    }
    catch (err) {
        throw new TypeError('Invalid Token or Protected Header formatting');
    }
}

async function generateSecret$1(alg, options) {
    var _a;
    let length;
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'HS256':
        case 'HS384':
        case 'HS512':
            length = parseInt(alg.substr(-3), 10);
            algorithm = { name: 'HMAC', hash: { name: `SHA-${alg.substr(-3)}` }, length };
            keyUsages = ['sign', 'verify'];
            break;
        case 'A128CBC-HS256':
        case 'A192CBC-HS384':
        case 'A256CBC-HS512':
            length = parseInt(alg.substr(-3), 10);
            return random$1(new Uint8Array(length >> 3));
        case 'A128KW':
        case 'A192KW':
        case 'A256KW':
            length = parseInt(alg.substring(1, 4), 10);
            algorithm = { name: 'AES-KW', length };
            keyUsages = ['wrapKey', 'unwrapKey'];
            break;
        case 'A128GCMKW':
        case 'A192GCMKW':
        case 'A256GCMKW':
        case 'A128GCM':
        case 'A192GCM':
        case 'A256GCM':
            length = parseInt(alg.substring(1, 4), 10);
            algorithm = { name: 'AES-GCM', length };
            keyUsages = ['encrypt', 'decrypt'];
            break;
        default:
            throw new JOSENotSupported('unsupported or invalid JWK "alg" (Algorithm) Parameter value');
    }
    return (crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages));
}
function getModulusLengthOption(options) {
    var _a;
    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;
    if (typeof modulusLength !== 'number' || modulusLength < 2048) {
        throw new JOSENotSupported('invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');
    }
    return modulusLength;
}
async function generateKeyPair$1(alg, options) {
    var _a, _b;
    let algorithm;
    let keyUsages;
    switch (alg) {
        case 'PS256':
        case 'PS384':
        case 'PS512':
            algorithm = {
                name: 'RSA-PSS',
                hash: { name: `SHA-${alg.substr(-3)}` },
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RS256':
        case 'RS384':
        case 'RS512':
            algorithm = {
                name: 'RSASSA-PKCS1-v1_5',
                hash: { name: `SHA-${alg.substr(-3)}` },
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['sign', 'verify'];
            break;
        case 'RSA-OAEP':
        case 'RSA-OAEP-256':
        case 'RSA-OAEP-384':
        case 'RSA-OAEP-512':
            algorithm = {
                name: 'RSA-OAEP',
                hash: { name: `SHA-${parseInt(alg.substr(-3), 10) || 1}` },
                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),
                modulusLength: getModulusLengthOption(options),
            };
            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];
            break;
        case 'ES256':
            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES384':
            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ES512':
            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };
            keyUsages = ['sign', 'verify'];
            break;
        case 'ECDH-ES':
        case 'ECDH-ES+A128KW':
        case 'ECDH-ES+A192KW':
        case 'ECDH-ES+A256KW':
            algorithm = { name: 'ECDH', namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256' };
            keyUsages = ['deriveKey', 'deriveBits'];
            break;
        default:
            throw new JOSENotSupported('unsupported or invalid JWK "alg" (Algorithm) Parameter value');
    }
    return (crypto.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages));
}

async function generateKeyPair(alg, options) {
    return generateKeyPair$1(alg, options);
}

async function generateSecret(alg, options) {
    return generateSecret$1(alg, options);
}

const random = random$1;

exports.CompactEncrypt = CompactEncrypt;
exports.CompactSign = CompactSign;
exports.EmbeddedJWK = EmbeddedJWK;
exports.EncryptJWT = EncryptJWT;
exports.FlattenedEncrypt = FlattenedEncrypt;
exports.FlattenedSign = FlattenedSign;
exports.GeneralSign = GeneralSign;
exports.JOSEAlgNotAllowed = JOSEAlgNotAllowed;
exports.JOSEError = JOSEError;
exports.JOSENotSupported = JOSENotSupported;
exports.JWEDecryptionFailed = JWEDecryptionFailed;
exports.JWEInvalid = JWEInvalid;
exports.JWKInvalid = JWKInvalid;
exports.JWKSInvalid = JWKSInvalid;
exports.JWKSMultipleMatchingKeys = JWKSMultipleMatchingKeys;
exports.JWKSNoMatchingKey = JWKSNoMatchingKey;
exports.JWSInvalid = JWSInvalid;
exports.JWSSignatureVerificationFailed = JWSSignatureVerificationFailed;
exports.JWTClaimValidationFailed = JWTClaimValidationFailed;
exports.JWTExpired = JWTExpired;
exports.JWTInvalid = JWTInvalid;
exports.SignJWT = SignJWT;
exports.UnsecuredJWT = UnsecuredJWT;
exports.base64UrlDecode = decode;
exports.base64UrlEncode = encode;
exports.calculateThumbprint = calculateThumbprint;
exports.compactDecrypt = compactDecrypt;
exports.compactVerify = compactVerify;
exports.createRemoteJWKSet = createRemoteJWKSet;
exports.decodeProtectedHeader = decodeProtectedHeader;
exports.flattenedDecrypt = flattenedDecrypt;
exports.flattenedVerify = flattenedVerify;
exports.fromKeyLike = fromKeyLike;
exports.generalDecrypt = generalDecrypt;
exports.generalVerify = generalVerify;
exports.generateKeyPair = generateKeyPair;
exports.generateSecret = generateSecret;
exports.jwtDecrypt = jwtDecrypt;
exports.jwtVerify = jwtVerify;
exports.parseJwk = parseJwk;
exports.random = random;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/redirectHandler/IRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWebidFromTokenPayload = exports.fetchJwks = void 0;
const cross_fetch_1 = require("cross-fetch");
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
async function fetchJwks(jwksIri, issuerIri) {
    const jwksResponse = await cross_fetch_1.fetch(jwksIri);
    if (jwksResponse.status !== 200) {
        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);
    }
    let jwk;
    try {
        jwk = (await jwksResponse.json()).keys[0];
    }
    catch (e) {
        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);
    }
    return jwk;
}
exports.fetchJwks = fetchJwks;
async function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {
    const jwk = await fetchJwks(jwksIri, issuerIri);
    let payload;
    try {
        const { payload: verifiedPayload } = await jose_legacy_modules_1.jwtVerify(idToken, await jose_legacy_modules_1.parseJwk(jwk), {
            issuer: issuerIri,
            audience: clientId,
        });
        payload = verifiedPayload;
    }
    catch (e) {
        throw new Error(`ID token verification failed: ${e.stack}`);
    }
    if (typeof payload.webid === "string") {
        return payload.webid;
    }
    if (typeof payload.sub !== "string") {
        throw new Error(`The ID token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);
    }
    try {
        new URL(payload.sub);
        return payload.sub;
    }
    catch (e) {
        throw new Error(`The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);
    }
}
exports.getWebidFromTokenPayload = getWebidFromTokenPayload;

},{"cross-fetch":"node_modules/cross-fetch/dist/browser-ponyfill.js","@inrupt/jose-legacy-modules":"node_modules/@inrupt/jose-legacy-modules/dist/index.browser.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfo.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSupportedTokenType = void 0;
function isSupportedTokenType(token) {
    return typeof token === "string" && ["DPoP", "Bearer"].includes(token);
}
exports.isSupportedTokenType = isSupportedTokenType;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfoManager.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.USER_SESSION_PREFIX = void 0;
exports.USER_SESSION_PREFIX = "solidClientAuthenticationUser";

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleRegistration = exports.determineSigningAlg = void 0;
function isValidUrl(url) {
    try {
        new URL(url);
        return true;
    }
    catch (_a) {
        return false;
    }
}
function determineSigningAlg(supported, preferred) {
    var _a;
    return ((_a = preferred.find((signingAlg) => {
        return supported.includes(signingAlg);
    })) !== null && _a !== void 0 ? _a : null);
}
exports.determineSigningAlg = determineSigningAlg;
async function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {
    if (options.clientId === undefined ||
        (issuerConfig.solidOidcSupported !==
            "https://solidproject.org/TR/solid-oidc" &&
            isValidUrl(options.clientId))) {
        return clientRegistrar.getClient({
            sessionId: options.sessionId,
            clientName: options.clientName,
            redirectUrl: options.redirectUrl,
        }, issuerConfig);
    }
    await storageUtility.setForUser(options.sessionId, {
        clientId: options.clientId,
    });
    if (options.clientSecret) {
        await storageUtility.setForUser(options.sessionId, {
            clientSecret: options.clientSecret,
        });
    }
    if (options.clientName) {
        await storageUtility.setForUser(options.sessionId, {
            clientName: options.clientName,
        });
    }
    return {
        clientId: options.clientId,
        clientSecret: options.clientSecret,
        clientName: options.clientName,
    };
}
exports.handleRegistration = handleRegistration;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveSessionInfoToStorage = exports.loadOidcContextFromStorage = exports.getSessionIdFromOauthState = void 0;
const InruptError_1 = __importDefault(require("../errors/InruptError"));
async function getSessionIdFromOauthState(storageUtility, oauthState) {
    return storageUtility.getForUser(oauthState, "sessionId");
}
exports.getSessionIdFromOauthState = getSessionIdFromOauthState;
async function loadOidcContextFromStorage(sessionId, storageUtility, configFetcher) {
    try {
        const [issuerIri, codeVerifier, storedRedirectIri, dpop] = await Promise.all([
            storageUtility.getForUser(sessionId, "issuer", {
                errorIfNull: true,
            }),
            storageUtility.getForUser(sessionId, "codeVerifier"),
            storageUtility.getForUser(sessionId, "redirectUrl"),
            storageUtility.getForUser(sessionId, "dpop", { errorIfNull: true }),
        ]);
        const issuerConfig = await configFetcher.fetchConfig(issuerIri);
        return {
            codeVerifier,
            redirectUrl: storedRedirectIri,
            issuerConfig,
            dpop: dpop === "true",
        };
    }
    catch (e) {
        throw new Error(`Failed to retrieve OIDC context from storage associated with session [${sessionId}]: ${e.toString()}`);
    }
}
exports.loadOidcContextFromStorage = loadOidcContextFromStorage;
async function saveSessionInfoToStorage(storageUtility, sessionId, idToken, webId, isLoggedIn, refreshToken, secure) {
    if (refreshToken !== undefined) {
        await storageUtility.setForUser(sessionId, { refreshToken }, { secure });
    }
    if (idToken !== undefined) {
        await storageUtility.setForUser(sessionId, { idToken }, { secure });
    }
    if (webId !== undefined) {
        await storageUtility.setForUser(sessionId, { webId }, { secure });
    }
    if (isLoggedIn !== undefined) {
        await storageUtility.setForUser(sessionId, { isLoggedIn }, { secure });
    }
}
exports.saveSessionInfoToStorage = saveSessionInfoToStorage;
class StorageUtility {
    constructor(secureStorage, insecureStorage) {
        this.secureStorage = secureStorage;
        this.insecureStorage = insecureStorage;
        this.RESOURCE_SERVER_SESSION_INFORMATION_KEY = "tmp-resource-server-session-info";
    }
    getKey(userId) {
        return `solidClientAuthenticationUser:${userId}`;
    }
    async getUserData(userId, secure) {
        const stored = await (secure
            ? this.secureStorage
            : this.insecureStorage).get(this.getKey(userId));
        if (stored === undefined) {
            return {};
        }
        try {
            return JSON.parse(stored);
        }
        catch (err) {
            throw new InruptError_1.default(`Data for user [${userId}] in [${secure ? "secure" : "unsecure"}] storage is corrupted - expected valid JSON, but got: ${stored}`);
        }
    }
    async setUserData(userId, data, secure) {
        await (secure ? this.secureStorage : this.insecureStorage).set(this.getKey(userId), JSON.stringify(data));
    }
    async get(key, options) {
        const value = await ((options === null || options === void 0 ? void 0 : options.secure)
            ? this.secureStorage
            : this.insecureStorage).get(key);
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new InruptError_1.default(`[${key}] is not stored`);
        }
        return value;
    }
    async set(key, value, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).set(key, value);
    }
    async delete(key, options) {
        return ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(key);
    }
    async getForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        let value;
        if (!userData || !userData[key]) {
            value = undefined;
        }
        value = userData[key];
        if (value === undefined && (options === null || options === void 0 ? void 0 : options.errorIfNull)) {
            throw new InruptError_1.default(`Field [${key}] for user [${userId}] is not stored`);
        }
        return value || undefined;
    }
    async setForUser(userId, values, options) {
        let userData;
        try {
            userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        }
        catch (_a) {
            userData = {};
        }
        await this.setUserData(userId, { ...userData, ...values }, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteForUser(userId, key, options) {
        const userData = await this.getUserData(userId, options === null || options === void 0 ? void 0 : options.secure);
        delete userData[key];
        await this.setUserData(userId, userData, options === null || options === void 0 ? void 0 : options.secure);
    }
    async deleteAllUserData(userId, options) {
        await ((options === null || options === void 0 ? void 0 : options.secure) ? this.secureStorage : this.insecureStorage).delete(this.getKey(userId));
    }
    async storeResourceServerSessionInfo(webId, resourceServerIri, expiration) {
        var _a;
        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : "{}");
        if (sessions.webId !== webId) {
            sessions.sessions = {};
        }
        sessions.webId = webId;
        sessions.sessions[resourceServerIri] = {
            expiration,
        };
        await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));
    }
    async clearResourceServerSessionInfo(resourceServerIri) {
        var _a;
        const sessions = JSON.parse((_a = (await this.insecureStorage.get(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY))) !== null && _a !== void 0 ? _a : "{}");
        if (sessions.sessions !== undefined) {
            delete sessions.sessions[resourceServerIri];
            if (Object.keys(sessions.sessions).length === 0) {
                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, "{}");
            }
            else {
                await this.insecureStorage.set(this.RESOURCE_SERVER_SESSION_INFORMATION_KEY, JSON.stringify(sessions));
            }
        }
    }
}
exports.default = StorageUtility;

},{"../errors/InruptError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/InruptError.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/InMemoryStorage.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InMemoryStorage {
    constructor() {
        this.map = {};
    }
    async get(key) {
        return this.map[key] || undefined;
    }
    async set(key, value) {
        this.map[key] = value;
    }
    async delete(key) {
        delete this.map[key];
    }
}
exports.default = InMemoryStorage;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/ConfigurationError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class ConfigurationError extends Error {
    constructor(message) {
        super(message);
    }
}
exports.default = ConfigurationError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/errors/NotImplementedError.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class NotImplementedError extends Error {
    constructor(methodName) {
        super(`[${methodName}] is not implemented`);
    }
}
exports.default = NotImplementedError;

},{}],"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/dpopUtils.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateDpopKeyPair = exports.createDpopHeader = void 0;
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
const uuid_1 = require("uuid");
function removeHashUsernameAndPassword(audience) {
    const cleanedAudience = new URL(audience);
    cleanedAudience.hash = "";
    cleanedAudience.username = "";
    cleanedAudience.password = "";
    return cleanedAudience.toString();
}
async function createDpopHeader(audience, method, dpopKey) {
    return new jose_legacy_modules_1.SignJWT({
        htu: removeHashUsernameAndPassword(audience),
        htm: method.toUpperCase(),
        jti: uuid_1.v4(),
    })
        .setProtectedHeader({
        alg: "ES256",
        jwk: dpopKey.publicKey,
        typ: "dpop+jwt",
    })
        .setIssuedAt()
        .sign(dpopKey.privateKey, {});
}
exports.createDpopHeader = createDpopHeader;
async function generateDpopKeyPair() {
    const { privateKey, publicKey } = await jose_legacy_modules_1.generateKeyPair("ES256");
    const dpopKeyPair = {
        privateKey,
        publicKey: await jose_legacy_modules_1.fromKeyLike(publicKey),
    };
    dpopKeyPair.publicKey.alg = "ES256";
    return dpopKeyPair;
}
exports.generateDpopKeyPair = generateDpopKeyPair;

},{"@inrupt/jose-legacy-modules":"node_modules/@inrupt/jose-legacy-modules/dist/index.browser.js","uuid":"node_modules/uuid/dist/esm-browser/index.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/storage/__mocks__/StorageUtility.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mockStorageUtility = exports.mockStorage = exports.StorageUtilityMock = exports.StorageUtilityGetResponse = void 0;
const __1 = require("../..");
exports.StorageUtilityGetResponse = "getResponse";
exports.StorageUtilityMock = {
    get: async (key, options) => exports.StorageUtilityGetResponse,
    set: async (key, value) => {
    },
    delete: async (key) => {
    },
    getForUser: async (userId, key, options) => exports.StorageUtilityGetResponse,
    setForUser: async (userId, values, options) => {
    },
    deleteForUser: async (userId, key, options) => {
    },
    deleteAllUserData: async (userId, options) => {
    },
    storeResourceServerSessionInfo: async (_webId, _resourceServerIri, _sessionExpires) => {
    },
    clearResourceServerSessionInfo: async (_resourceServerIri) => {
    },
};
const mockStorage = (stored) => {
    const store = stored;
    return {
        get: async (key) => {
            if (store[key] === undefined) {
                return undefined;
            }
            if (typeof store[key] === "string") {
                return store[key];
            }
            return JSON.stringify(store[key]);
        },
        set: async (key, value) => {
            store[key] = value;
        },
        delete: async (key) => {
            delete store[key];
        },
    };
};
exports.mockStorage = mockStorage;
const mockStorageUtility = (stored, isSecure = false) => {
    if (isSecure) {
        return new __1.StorageUtility(exports.mockStorage(stored), exports.mockStorage({}));
    }
    return new __1.StorageUtility(exports.mockStorage({}), exports.mockStorage(stored));
};
exports.mockStorageUtility = mockStorageUtility;

},{"../..":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-core/dist/index.js":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageUtilityGetResponse = exports.StorageUtilityMock = exports.mockStorageUtility = exports.mockStorage = exports.generateDpopKeyPair = exports.createDpopHeader = exports.NotImplementedError = exports.ConfigurationError = exports.InMemoryStorage = exports.getSessionIdFromOauthState = exports.saveSessionInfoToStorage = exports.loadOidcContextFromStorage = exports.StorageUtility = exports.determineSigningAlg = exports.handleRegistration = exports.USER_SESSION_PREFIX = exports.isSupportedTokenType = exports.fetchJwks = exports.getWebidFromTokenPayload = exports.AggregateHandler = void 0;
__exportStar(require("./constant"), exports);
var AggregateHandler_1 = require("./util/handlerPattern/AggregateHandler");
Object.defineProperty(exports, "AggregateHandler", { enumerable: true, get: function () { return __importDefault(AggregateHandler_1).default; } });
var IRedirectHandler_1 = require("./login/oidc/redirectHandler/IRedirectHandler");
Object.defineProperty(exports, "getWebidFromTokenPayload", { enumerable: true, get: function () { return IRedirectHandler_1.getWebidFromTokenPayload; } });
Object.defineProperty(exports, "fetchJwks", { enumerable: true, get: function () { return IRedirectHandler_1.fetchJwks; } });
var ISessionInfo_1 = require("./sessionInfo/ISessionInfo");
Object.defineProperty(exports, "isSupportedTokenType", { enumerable: true, get: function () { return ISessionInfo_1.isSupportedTokenType; } });
var ISessionInfoManager_1 = require("./sessionInfo/ISessionInfoManager");
Object.defineProperty(exports, "USER_SESSION_PREFIX", { enumerable: true, get: function () { return ISessionInfoManager_1.USER_SESSION_PREFIX; } });
var IClientRegistrar_1 = require("./login/oidc/IClientRegistrar");
Object.defineProperty(exports, "handleRegistration", { enumerable: true, get: function () { return IClientRegistrar_1.handleRegistration; } });
Object.defineProperty(exports, "determineSigningAlg", { enumerable: true, get: function () { return IClientRegistrar_1.determineSigningAlg; } });
var StorageUtility_1 = require("./storage/StorageUtility");
Object.defineProperty(exports, "StorageUtility", { enumerable: true, get: function () { return __importDefault(StorageUtility_1).default; } });
Object.defineProperty(exports, "loadOidcContextFromStorage", { enumerable: true, get: function () { return StorageUtility_1.loadOidcContextFromStorage; } });
Object.defineProperty(exports, "saveSessionInfoToStorage", { enumerable: true, get: function () { return StorageUtility_1.saveSessionInfoToStorage; } });
Object.defineProperty(exports, "getSessionIdFromOauthState", { enumerable: true, get: function () { return StorageUtility_1.getSessionIdFromOauthState; } });
var InMemoryStorage_1 = require("./storage/InMemoryStorage");
Object.defineProperty(exports, "InMemoryStorage", { enumerable: true, get: function () { return __importDefault(InMemoryStorage_1).default; } });
var ConfigurationError_1 = require("./errors/ConfigurationError");
Object.defineProperty(exports, "ConfigurationError", { enumerable: true, get: function () { return __importDefault(ConfigurationError_1).default; } });
var NotImplementedError_1 = require("./errors/NotImplementedError");
Object.defineProperty(exports, "NotImplementedError", { enumerable: true, get: function () { return __importDefault(NotImplementedError_1).default; } });
var dpopUtils_1 = require("./authenticatedFetch/dpopUtils");
Object.defineProperty(exports, "createDpopHeader", { enumerable: true, get: function () { return dpopUtils_1.createDpopHeader; } });
Object.defineProperty(exports, "generateDpopKeyPair", { enumerable: true, get: function () { return dpopUtils_1.generateDpopKeyPair; } });
var StorageUtility_2 = require("./storage/__mocks__/StorageUtility");
Object.defineProperty(exports, "mockStorage", { enumerable: true, get: function () { return StorageUtility_2.mockStorage; } });
Object.defineProperty(exports, "mockStorageUtility", { enumerable: true, get: function () { return StorageUtility_2.mockStorageUtility; } });
Object.defineProperty(exports, "StorageUtilityMock", { enumerable: true, get: function () { return StorageUtility_2.StorageUtilityMock; } });
Object.defineProperty(exports, "StorageUtilityGetResponse", { enumerable: true, get: function () { return StorageUtility_2.StorageUtilityGetResponse; } });

},{"./constant":"node_modules/@inrupt/solid-client-authn-core/dist/constant.js","./util/handlerPattern/AggregateHandler":"node_modules/@inrupt/solid-client-authn-core/dist/util/handlerPattern/AggregateHandler.js","./login/oidc/redirectHandler/IRedirectHandler":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/redirectHandler/IRedirectHandler.js","./sessionInfo/ISessionInfo":"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfo.js","./sessionInfo/ISessionInfoManager":"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfoManager.js","./login/oidc/IClientRegistrar":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js","./storage/StorageUtility":"node_modules/@inrupt/solid-client-authn-core/dist/storage/StorageUtility.js","./storage/InMemoryStorage":"node_modules/@inrupt/solid-client-authn-core/dist/storage/InMemoryStorage.js","./errors/ConfigurationError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/ConfigurationError.js","./errors/NotImplementedError":"node_modules/@inrupt/solid-client-authn-core/dist/errors/NotImplementedError.js","./authenticatedFetch/dpopUtils":"node_modules/@inrupt/solid-client-authn-core/dist/authenticatedFetch/dpopUtils.js","./storage/__mocks__/StorageUtility":"node_modules/@inrupt/solid-client-authn-core/dist/storage/__mocks__/StorageUtility.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/storage/StorageUtility.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
class StorageUtilityBrowser extends solid_client_authn_core_1.StorageUtility {
    constructor(secureStorage, insecureStorage) {
        super(secureStorage, insecureStorage);
    }
}
exports.default = StorageUtilityBrowser;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/oidc-client/lib/oidc-client.min.js":[function(require,module,exports) {
var define;
!function t(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var n=r();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(this,(function(){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function e(){return t.default}:function e(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=22)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={debug:function t(){},info:function t(){},warn:function t(){},error:function t(){}},o=void 0,s=void 0;(e.Log=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.reset=function t(){s=3,o=i},t.debug=function t(){if(s>=4){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.debug.apply(o,Array.from(r))}},t.info=function t(){if(s>=3){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.info.apply(o,Array.from(r))}},t.warn=function t(){if(s>=2){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.warn.apply(o,Array.from(r))}},t.error=function t(){if(s>=1){for(var e=arguments.length,r=Array(e),n=0;n<e;n++)r[n]=arguments[n];o.error.apply(o,Array.from(r))}},n(t,null,[{key:"NONE",get:function t(){return 0}},{key:"ERROR",get:function t(){return 1}},{key:"WARN",get:function t(){return 2}},{key:"INFO",get:function t(){return 3}},{key:"DEBUG",get:function t(){return 4}},{key:"level",get:function t(){return s},set:function t(e){if(!(0<=e&&e<=4))throw new Error("Invalid log level");s=e}},{key:"logger",get:function t(){return o},set:function t(e){if(!e.debug&&e.info&&(e.debug=e.info),!(e.debug&&e.info&&e.warn&&e.error))throw new Error("Invalid logger");o=e}}]),t}()).reset()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var i={setInterval:function(t){function e(e,r){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return setInterval(t,e)})),clearInterval:function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t){return clearInterval(t)}))},o=!1,s=null;e.Global=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t._testing=function t(){o=!0},t.setXMLHttpRequest=function t(e){s=e},n(t,null,[{key:"location",get:function t(){if(!o)return location}},{key:"localStorage",get:function t(){if(!o&&"undefined"!=typeof window)return localStorage}},{key:"sessionStorage",get:function t(){if(!o&&"undefined"!=typeof window)return sessionStorage}},{key:"XMLHttpRequest",get:function t(){if(!o&&"undefined"!=typeof window)return s||XMLHttpRequest}},{key:"timer",get:function t(){if(!o)return i}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.MetadataService=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(7);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=".well-known/openid-configuration";e.MetadataService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.JsonService;if(s(this,t),!e)throw i.Log.error("MetadataService: No settings passed to MetadataService"),new Error("settings");this._settings=e,this._jsonService=new r(["application/jwk-set+json"])}return t.prototype.resetSigningKeys=function t(){this._settings=this._settings||{},this._settings.signingKeys=void 0},t.prototype.getMetadata=function t(){var e=this;return this._settings.metadata?(i.Log.debug("MetadataService.getMetadata: Returning metadata from settings"),Promise.resolve(this._settings.metadata)):this.metadataUrl?(i.Log.debug("MetadataService.getMetadata: getting metadata from",this.metadataUrl),this._jsonService.getJson(this.metadataUrl).then((function(t){i.Log.debug("MetadataService.getMetadata: json received");var r=e._settings.metadataSeed||{};return e._settings.metadata=Object.assign({},r,t),e._settings.metadata}))):(i.Log.error("MetadataService.getMetadata: No authority or metadataUrl configured on settings"),Promise.reject(new Error("No authority or metadataUrl configured on settings")))},t.prototype.getIssuer=function t(){return this._getMetadataProperty("issuer")},t.prototype.getAuthorizationEndpoint=function t(){return this._getMetadataProperty("authorization_endpoint")},t.prototype.getUserInfoEndpoint=function t(){return this._getMetadataProperty("userinfo_endpoint")},t.prototype.getTokenEndpoint=function t(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];return this._getMetadataProperty("token_endpoint",e)},t.prototype.getCheckSessionIframe=function t(){return this._getMetadataProperty("check_session_iframe",!0)},t.prototype.getEndSessionEndpoint=function t(){return this._getMetadataProperty("end_session_endpoint",!0)},t.prototype.getRevocationEndpoint=function t(){return this._getMetadataProperty("revocation_endpoint",!0)},t.prototype.getKeysEndpoint=function t(){return this._getMetadataProperty("jwks_uri",!0)},t.prototype._getMetadataProperty=function t(e){var r=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return i.Log.debug("MetadataService.getMetadataProperty for: "+e),this.getMetadata().then((function(t){if(i.Log.debug("MetadataService.getMetadataProperty: metadata recieved"),void 0===t[e]){if(!0===r)return void i.Log.warn("MetadataService.getMetadataProperty: Metadata does not contain optional property "+e);throw i.Log.error("MetadataService.getMetadataProperty: Metadata does not contain property "+e),new Error("Metadata does not contain property "+e)}return t[e]}))},t.prototype.getSigningKeys=function t(){var e=this;return this._settings.signingKeys?(i.Log.debug("MetadataService.getSigningKeys: Returning signingKeys from settings"),Promise.resolve(this._settings.signingKeys)):this._getMetadataProperty("jwks_uri").then((function(t){return i.Log.debug("MetadataService.getSigningKeys: jwks_uri received",t),e._jsonService.getJson(t).then((function(t){if(i.Log.debug("MetadataService.getSigningKeys: key set received",t),!t.keys)throw i.Log.error("MetadataService.getSigningKeys: Missing keys on keyset"),new Error("Missing keys on keyset");return e._settings.signingKeys=t.keys,e._settings.signingKeys}))}))},n(t,[{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._settings.metadataUrl?this._metadataUrl=this._settings.metadataUrl:(this._metadataUrl=this._settings.authority,this._metadataUrl&&this._metadataUrl.indexOf(a)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=a))),this._metadataUrl}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UrlUtility=void 0;var n=r(0),i=r(1);e.UrlUtility=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.addQueryParam=function t(e,r,n){return e.indexOf("?")<0&&(e+="?"),"?"!==e[e.length-1]&&(e+="&"),e+=encodeURIComponent(r),e+="=",e+=encodeURIComponent(n)},t.parseUrlFragment=function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.Global;"string"!=typeof e&&(e=o.location.href);var s=e.lastIndexOf(r);s>=0&&(e=e.substr(s+1)),"?"===r&&(s=e.indexOf("#"))>=0&&(e=e.substr(0,s));for(var a,u={},c=/([^&=]+)=([^&]*)/g,h=0;a=c.exec(e);)if(u[decodeURIComponent(a[1])]=decodeURIComponent(a[2].replace(/\+/g," ")),h++>50)return n.Log.error("UrlUtility.parseUrlFragment: response exceeded expected number of parameters",e),{error:"Response exceeded expected number of parameters"};for(var l in u)return u;return{}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JoseUtil=void 0;var n=r(26),i=function o(t){return t&&t.__esModule?t:{default:t}}(r(33));e.JoseUtil=(0,i.default)({jws:n.jws,KeyUtil:n.KeyUtil,X509:n.X509,crypto:n.crypto,hextob64u:n.hextob64u,b64tohex:n.b64tohex,AllowedSigningAlgs:n.AllowedSigningAlgs})},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClientSettings=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),o=r(0),s=r(23),a=r(6),u=r(24),c=r(2);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=".well-known/openid-configuration",f="id_token",g="openid",d="client_secret_post";e.OidcClientSettings=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.authority,i=e.metadataUrl,o=e.metadata,l=e.signingKeys,p=e.metadataSeed,v=e.client_id,y=e.client_secret,m=e.response_type,_=void 0===m?f:m,S=e.scope,b=void 0===S?g:S,w=e.redirect_uri,F=e.post_logout_redirect_uri,E=e.client_authentication,x=void 0===E?d:E,A=e.prompt,k=e.display,P=e.max_age,C=e.ui_locales,T=e.acr_values,R=e.resource,I=e.response_mode,D=e.filterProtocolClaims,L=void 0===D||D,N=e.loadUserInfo,U=void 0===N||N,B=e.staleStateAge,O=void 0===B?900:B,j=e.clockSkew,M=void 0===j?300:j,H=e.clockService,V=void 0===H?new s.ClockService:H,K=e.userInfoJwtIssuer,q=void 0===K?"OP":K,J=e.mergeClaims,W=void 0!==J&&J,z=e.stateStore,Y=void 0===z?new a.WebStorageStateStore:z,G=e.ResponseValidatorCtor,X=void 0===G?u.ResponseValidator:G,$=e.MetadataServiceCtor,Q=void 0===$?c.MetadataService:$,Z=e.extraQueryParams,tt=void 0===Z?{}:Z,et=e.extraTokenParams,rt=void 0===et?{}:et;h(this,t),this._authority=r,this._metadataUrl=i,this._metadata=o,this._metadataSeed=p,this._signingKeys=l,this._client_id=v,this._client_secret=y,this._response_type=_,this._scope=b,this._redirect_uri=w,this._post_logout_redirect_uri=F,this._client_authentication=x,this._prompt=A,this._display=k,this._max_age=P,this._ui_locales=C,this._acr_values=T,this._resource=R,this._response_mode=I,this._filterProtocolClaims=!!L,this._loadUserInfo=!!U,this._staleStateAge=O,this._clockSkew=M,this._clockService=V,this._userInfoJwtIssuer=q,this._mergeClaims=!!W,this._stateStore=Y,this._validator=new X(this),this._metadataService=new Q(this),this._extraQueryParams="object"===(void 0===tt?"undefined":n(tt))?tt:{},this._extraTokenParams="object"===(void 0===rt?"undefined":n(rt))?rt:{}}return t.prototype.getEpochTime=function t(){return this._clockService.getEpochTime()},i(t,[{key:"client_id",get:function t(){return this._client_id},set:function t(e){if(this._client_id)throw o.Log.error("OidcClientSettings.set_client_id: client_id has already been assigned."),new Error("client_id has already been assigned.");this._client_id=e}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"response_type",get:function t(){return this._response_type}},{key:"scope",get:function t(){return this._scope}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"post_logout_redirect_uri",get:function t(){return this._post_logout_redirect_uri}},{key:"client_authentication",get:function t(){return this._client_authentication}},{key:"prompt",get:function t(){return this._prompt}},{key:"display",get:function t(){return this._display}},{key:"max_age",get:function t(){return this._max_age}},{key:"ui_locales",get:function t(){return this._ui_locales}},{key:"acr_values",get:function t(){return this._acr_values}},{key:"resource",get:function t(){return this._resource}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"authority",get:function t(){return this._authority},set:function t(e){if(this._authority)throw o.Log.error("OidcClientSettings.set_authority: authority has already been assigned."),new Error("authority has already been assigned.");this._authority=e}},{key:"metadataUrl",get:function t(){return this._metadataUrl||(this._metadataUrl=this.authority,this._metadataUrl&&this._metadataUrl.indexOf(l)<0&&("/"!==this._metadataUrl[this._metadataUrl.length-1]&&(this._metadataUrl+="/"),this._metadataUrl+=l)),this._metadataUrl}},{key:"metadata",get:function t(){return this._metadata},set:function t(e){this._metadata=e}},{key:"metadataSeed",get:function t(){return this._metadataSeed},set:function t(e){this._metadataSeed=e}},{key:"signingKeys",get:function t(){return this._signingKeys},set:function t(e){this._signingKeys=e}},{key:"filterProtocolClaims",get:function t(){return this._filterProtocolClaims}},{key:"loadUserInfo",get:function t(){return this._loadUserInfo}},{key:"staleStateAge",get:function t(){return this._staleStateAge}},{key:"clockSkew",get:function t(){return this._clockSkew}},{key:"userInfoJwtIssuer",get:function t(){return this._userInfoJwtIssuer}},{key:"mergeClaims",get:function t(){return this._mergeClaims}},{key:"stateStore",get:function t(){return this._stateStore}},{key:"validator",get:function t(){return this._validator}},{key:"metadataService",get:function t(){return this._metadataService}},{key:"extraQueryParams",get:function t(){return this._extraQueryParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraQueryParams=e:this._extraQueryParams={}}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams},set:function t(e){"object"===(void 0===e?"undefined":n(e))?this._extraTokenParams=e:this._extraTokenParams={}}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebStorageStateStore=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.WebStorageStateStore=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.prefix,n=void 0===r?"oidc.":r,s=e.store,a=void 0===s?i.Global.localStorage:s;o(this,t),this._store=a,this._prefix=n}return t.prototype.set=function t(e,r){return n.Log.debug("WebStorageStateStore.set",e),e=this._prefix+e,this._store.setItem(e,r),Promise.resolve()},t.prototype.get=function t(e){n.Log.debug("WebStorageStateStore.get",e),e=this._prefix+e;var r=this._store.getItem(e);return Promise.resolve(r)},t.prototype.remove=function t(e){n.Log.debug("WebStorageStateStore.remove",e),e=this._prefix+e;var r=this._store.getItem(e);return this._store.removeItem(e),Promise.resolve(r)},t.prototype.getAllKeys=function t(){n.Log.debug("WebStorageStateStore.getAllKeys");for(var e=[],r=0;r<this._store.length;r++){var i=this._store.key(r);0===i.indexOf(this._prefix)&&e.push(i.substr(this._prefix.length))}return Promise.resolve(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.JsonService=void 0;var n=r(0),i=r(1);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.JsonService=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i.Global.XMLHttpRequest,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;o(this,t),e&&Array.isArray(e)?this._contentTypes=e.slice():this._contentTypes=[],this._contentTypes.push("application/json"),n&&this._contentTypes.push("application/jwt"),this._XMLHttpRequest=r,this._jwtHandler=n}return t.prototype.getJson=function t(e,r){var i=this;if(!e)throw n.Log.error("JsonService.getJson: No url passed"),new Error("url");return n.Log.debug("JsonService.getJson, url: ",e),new Promise((function(t,o){var s=new i._XMLHttpRequest;s.open("GET",e);var a=i._contentTypes,u=i._jwtHandler;s.onload=function(){if(n.Log.debug("JsonService.getJson: HTTP response received, status",s.status),200===s.status){var r=s.getResponseHeader("Content-Type");if(r){var i=a.find((function(t){if(r.startsWith(t))return!0}));if("application/jwt"==i)return void u(s).then(t,o);if(i)try{return void t(JSON.parse(s.responseText))}catch(t){return n.Log.error("JsonService.getJson: Error parsing JSON response",t.message),void o(t)}}o(Error("Invalid response Content-Type: "+r+", from URL: "+e))}else o(Error(s.statusText+" ("+s.status+")"))},s.onerror=function(){n.Log.error("JsonService.getJson: network error"),o(Error("Network Error"))},r&&(n.Log.debug("JsonService.getJson: token passed, setting Authorization header"),s.setRequestHeader("Authorization","Bearer "+r)),s.send()}))},t.prototype.postForm=function t(e,r,i){var o=this;if(!e)throw n.Log.error("JsonService.postForm: No url passed"),new Error("url");return n.Log.debug("JsonService.postForm, url: ",e),new Promise((function(t,s){var a=new o._XMLHttpRequest;a.open("POST",e);var u=o._contentTypes;a.onload=function(){if(n.Log.debug("JsonService.postForm: HTTP response received, status",a.status),200!==a.status){if(400===a.status)if(i=a.getResponseHeader("Content-Type"))if(u.find((function(t){if(i.startsWith(t))return!0})))try{var r=JSON.parse(a.responseText);if(r&&r.error)return n.Log.error("JsonService.postForm: Error from server: ",r.error),void s(new Error(r.error))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error(a.statusText+" ("+a.status+")"))}else{var i;if((i=a.getResponseHeader("Content-Type"))&&u.find((function(t){if(i.startsWith(t))return!0})))try{return void t(JSON.parse(a.responseText))}catch(t){return n.Log.error("JsonService.postForm: Error parsing JSON response",t.message),void s(t)}s(Error("Invalid response Content-Type: "+i+", from URL: "+e))}},a.onerror=function(){n.Log.error("JsonService.postForm: network error"),s(Error("Network Error"))};var c="";for(var h in r){var l=r[h];l&&(c.length>0&&(c+="&"),c+=encodeURIComponent(h),c+="=",c+=encodeURIComponent(l))}a.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),void 0!==i&&a.setRequestHeader("Authorization","Basic "+btoa(i)),a.send(c)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninRequest=void 0;var n=r(0),i=r(3),o=r(13);e.SigninRequest=function(){function t(e){var r=e.url,s=e.client_id,a=e.redirect_uri,u=e.response_type,c=e.scope,h=e.authority,l=e.data,f=e.prompt,g=e.display,d=e.max_age,p=e.ui_locales,v=e.id_token_hint,y=e.login_hint,m=e.acr_values,_=e.resource,S=e.response_mode,b=e.request,w=e.request_uri,F=e.extraQueryParams,E=e.request_type,x=e.client_secret,A=e.extraTokenParams,k=e.skipUserInfo;if(function P(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SigninRequest.ctor: No url passed"),new Error("url");if(!s)throw n.Log.error("SigninRequest.ctor: No client_id passed"),new Error("client_id");if(!a)throw n.Log.error("SigninRequest.ctor: No redirect_uri passed"),new Error("redirect_uri");if(!u)throw n.Log.error("SigninRequest.ctor: No response_type passed"),new Error("response_type");if(!c)throw n.Log.error("SigninRequest.ctor: No scope passed"),new Error("scope");if(!h)throw n.Log.error("SigninRequest.ctor: No authority passed"),new Error("authority");var C=t.isOidc(u),T=t.isCode(u);S||(S=t.isCode(u)?"query":null),this.state=new o.SigninState({nonce:C,data:l,client_id:s,authority:h,redirect_uri:a,code_verifier:T,request_type:E,response_mode:S,client_secret:x,scope:c,extraTokenParams:A,skipUserInfo:k}),r=i.UrlUtility.addQueryParam(r,"client_id",s),r=i.UrlUtility.addQueryParam(r,"redirect_uri",a),r=i.UrlUtility.addQueryParam(r,"response_type",u),r=i.UrlUtility.addQueryParam(r,"scope",c),r=i.UrlUtility.addQueryParam(r,"state",this.state.id),C&&(r=i.UrlUtility.addQueryParam(r,"nonce",this.state.nonce)),T&&(r=i.UrlUtility.addQueryParam(r,"code_challenge",this.state.code_challenge),r=i.UrlUtility.addQueryParam(r,"code_challenge_method","S256"));var R={prompt:f,display:g,max_age:d,ui_locales:p,id_token_hint:v,login_hint:y,acr_values:m,resource:_,request:b,request_uri:w,response_mode:S};for(var I in R)R[I]&&(r=i.UrlUtility.addQueryParam(r,I,R[I]));for(var D in F)r=i.UrlUtility.addQueryParam(r,D,F[D]);this.url=r}return t.isOidc=function t(e){return!!e.split(/\s+/g).filter((function(t){return"id_token"===t}))[0]},t.isOAuth=function t(e){return!!e.split(/\s+/g).filter((function(t){return"token"===t}))[0]},t.isCode=function t(e){return!!e.split(/\s+/g).filter((function(t){return"code"===t}))[0]},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.State=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=function s(t){return t&&t.__esModule?t:{default:t}}(r(14));function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.State=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.id,n=e.data,i=e.created,s=e.request_type;a(this,t),this._id=r||(0,o.default)(),this._data=n,this._created="number"==typeof i&&i>0?i:parseInt(Date.now()/1e3),this._request_type=s}return t.prototype.toStorageString=function t(){return i.Log.debug("State.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type})},t.fromStorageString=function e(r){return i.Log.debug("State.fromStorageString"),new t(JSON.parse(r))},t.clearStaleState=function e(r,n){var o=Date.now()/1e3-n;return r.getAllKeys().then((function(e){i.Log.debug("State.clearStaleState: got keys",e);for(var n=[],s=function s(a){var c=e[a];u=r.get(c).then((function(e){var n=!1;if(e)try{var s=t.fromStorageString(e);i.Log.debug("State.clearStaleState: got item from key: ",c,s.created),s.created<=o&&(n=!0)}catch(t){i.Log.error("State.clearStaleState: Error parsing state for key",c,t.message),n=!0}else i.Log.debug("State.clearStaleState: no item in storage for key: ",c),n=!0;if(n)return i.Log.debug("State.clearStaleState: removed item for key: ",c),r.remove(c)})),n.push(u)},a=0;a<e.length;a++){var u;s(a)}return i.Log.debug("State.clearStaleState: waiting on promise count:",n.length),Promise.all(n)}))},n(t,[{key:"id",get:function t(){return this._id}},{key:"data",get:function t(){return this._data}},{key:"created",get:function t(){return this._created}},{key:"request_type",get:function t(){return this._request_type}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OidcClient=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(5),s=r(12),a=r(8),u=r(34),c=r(35),h=r(36),l=r(13),f=r(9);function g(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.OidcClient=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};g(this,t),e instanceof o.OidcClientSettings?this._settings=e:this._settings=new o.OidcClientSettings(e)}return t.prototype.createSigninRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.response_type,o=r.scope,s=r.redirect_uri,u=r.data,c=r.state,h=r.prompt,l=r.display,f=r.max_age,g=r.ui_locales,d=r.id_token_hint,p=r.login_hint,v=r.acr_values,y=r.resource,m=r.request,_=r.request_uri,S=r.response_mode,b=r.extraQueryParams,w=r.extraTokenParams,F=r.request_type,E=r.skipUserInfo,x=arguments[1];i.Log.debug("OidcClient.createSigninRequest");var A=this._settings.client_id;n=n||this._settings.response_type,o=o||this._settings.scope,s=s||this._settings.redirect_uri,h=h||this._settings.prompt,l=l||this._settings.display,f=f||this._settings.max_age,g=g||this._settings.ui_locales,v=v||this._settings.acr_values,y=y||this._settings.resource,S=S||this._settings.response_mode,b=b||this._settings.extraQueryParams,w=w||this._settings.extraTokenParams;var k=this._settings.authority;return a.SigninRequest.isCode(n)&&"code"!==n?Promise.reject(new Error("OpenID Connect hybrid flow is not supported")):this._metadataService.getAuthorizationEndpoint().then((function(t){i.Log.debug("OidcClient.createSigninRequest: Received authorization endpoint",t);var r=new a.SigninRequest({url:t,client_id:A,redirect_uri:s,response_type:n,scope:o,data:u||c,authority:k,prompt:h,display:l,max_age:f,ui_locales:g,id_token_hint:d,login_hint:p,acr_values:v,resource:y,request:m,request_uri:_,extraQueryParams:b,extraTokenParams:w,request_type:F,response_mode:S,client_secret:e._settings.client_secret,skipUserInfo:E}),P=r.state;return(x=x||e._stateStore).set(P.id,P.toStorageString()).then((function(){return r}))}))},t.prototype.readSigninResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSigninResponseState");var o="query"===this._settings.response_mode||!this._settings.response_mode&&a.SigninRequest.isCode(this._settings.response_type),s=o?"?":"#",c=new u.SigninResponse(e,s);if(!c.state)return i.Log.error("OidcClient.readSigninResponseState: No state in response"),Promise.reject(new Error("No state in response"));r=r||this._stateStore;var h=n?r.remove.bind(r):r.get.bind(r);return h(c.state).then((function(t){if(!t)throw i.Log.error("OidcClient.readSigninResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:l.SigninState.fromStorageString(t),response:c}}))},t.prototype.processSigninResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSigninResponse"),this.readSigninResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return i.Log.debug("OidcClient.processSigninResponse: Received state from storage; validating response"),n._validator.validateSigninResponse(e,r)}))},t.prototype.createSignoutRequest=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.id_token_hint,o=r.data,s=r.state,a=r.post_logout_redirect_uri,u=r.extraQueryParams,h=r.request_type,l=arguments[1];return i.Log.debug("OidcClient.createSignoutRequest"),a=a||this._settings.post_logout_redirect_uri,u=u||this._settings.extraQueryParams,this._metadataService.getEndSessionEndpoint().then((function(t){if(!t)throw i.Log.error("OidcClient.createSignoutRequest: No end session endpoint url returned"),new Error("no end session endpoint");i.Log.debug("OidcClient.createSignoutRequest: Received end session endpoint",t);var r=new c.SignoutRequest({url:t,id_token_hint:n,post_logout_redirect_uri:a,data:o||s,extraQueryParams:u,request_type:h}),f=r.state;return f&&(i.Log.debug("OidcClient.createSignoutRequest: Signout request has state to persist"),(l=l||e._stateStore).set(f.id,f.toStorageString())),r}))},t.prototype.readSignoutResponseState=function t(e,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];i.Log.debug("OidcClient.readSignoutResponseState");var o=new h.SignoutResponse(e);if(!o.state)return i.Log.debug("OidcClient.readSignoutResponseState: No state in response"),o.error?(i.Log.warn("OidcClient.readSignoutResponseState: Response was error: ",o.error),Promise.reject(new s.ErrorResponse(o))):Promise.resolve({state:void 0,response:o});var a=o.state;r=r||this._stateStore;var u=n?r.remove.bind(r):r.get.bind(r);return u(a).then((function(t){if(!t)throw i.Log.error("OidcClient.readSignoutResponseState: No matching state found in storage"),new Error("No matching state found in storage");return{state:f.State.fromStorageString(t),response:o}}))},t.prototype.processSignoutResponse=function t(e,r){var n=this;return i.Log.debug("OidcClient.processSignoutResponse"),this.readSignoutResponseState(e,r,!0).then((function(t){var e=t.state,r=t.response;return e?(i.Log.debug("OidcClient.processSignoutResponse: Received state from storage; validating response"),n._validator.validateSignoutResponse(e,r)):(i.Log.debug("OidcClient.processSignoutResponse: No state from storage; skipping validating response"),r)}))},t.prototype.clearStaleState=function t(e){return i.Log.debug("OidcClient.clearStaleState"),e=e||this._stateStore,f.State.clearStaleState(e,this.settings.staleStateAge)},n(t,[{key:"_stateStore",get:function t(){return this.settings.stateStore}},{key:"_validator",get:function t(){return this.settings.validator}},{key:"_metadataService",get:function t(){return this.settings.metadataService}},{key:"settings",get:function t(){return this._settings}},{key:"metadataService",get:function t(){return this._metadataService}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenClient=void 0;var n=r(7),i=r(2),o=r(0);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.TokenClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw o.Log.error("TokenClient.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r,this._metadataService=new a(this._settings)}return t.prototype.exchangeCode=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"authorization_code",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret,r.redirect_uri=r.redirect_uri||this._settings.redirect_uri;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.code?r.redirect_uri?r.code_verifier?r.client_id?r.client_secret||"client_secret_basic"!=i?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeCode: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeCode: response received"),t}))}))):(o.Log.error("TokenClient.exchangeCode: No client_secret passed"),Promise.reject(new Error("A client_secret is required"))):(o.Log.error("TokenClient.exchangeCode: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeCode: No code_verifier passed"),Promise.reject(new Error("A code_verifier is required"))):(o.Log.error("TokenClient.exchangeCode: No redirect_uri passed"),Promise.reject(new Error("A redirect_uri is required"))):(o.Log.error("TokenClient.exchangeCode: No code passed"),Promise.reject(new Error("A code is required")))},t.prototype.exchangeRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).grant_type=r.grant_type||"refresh_token",r.client_id=r.client_id||this._settings.client_id,r.client_secret=r.client_secret||this._settings.client_secret;var n=void 0,i=r._client_authentication||this._settings._client_authentication;return delete r._client_authentication,r.refresh_token?r.client_id?("client_secret_basic"==i&&(n=r.client_id+":"+r.client_secret,delete r.client_id,delete r.client_secret),this._metadataService.getTokenEndpoint(!1).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: Received token endpoint"),e._jsonService.postForm(t,r,n).then((function(t){return o.Log.debug("TokenClient.exchangeRefreshToken: response received"),t}))}))):(o.Log.error("TokenClient.exchangeRefreshToken: No client_id passed"),Promise.reject(new Error("A client_id is required"))):(o.Log.error("TokenClient.exchangeRefreshToken: No refresh_token passed"),Promise.reject(new Error("A refresh_token is required")))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ErrorResponse=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function o(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.ErrorResponse=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},s=r.error,a=r.error_description,u=r.error_uri,c=r.state,h=r.session_state;if(i(this,e),!s)throw n.Log.error("No error passed to ErrorResponse"),new Error("error");var l=o(this,t.call(this,a||s));return l.name="ErrorResponse",l.error=s,l.error_description=a,l.error_uri=u,l.state=c,l.session_state=h,l}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(Error)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninState=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(9),s=r(4),a=function u(t){return t&&t.__esModule?t:{default:t}}(r(14));function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function h(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.SigninState=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.nonce,i=r.authority,o=r.client_id,u=r.redirect_uri,l=r.code_verifier,f=r.response_mode,g=r.client_secret,d=r.scope,p=r.extraTokenParams,v=r.skipUserInfo;c(this,e);var y=h(this,t.call(this,arguments[0]));if(!0===n?y._nonce=(0,a.default)():n&&(y._nonce=n),!0===l?y._code_verifier=(0,a.default)()+(0,a.default)()+(0,a.default)():l&&(y._code_verifier=l),y.code_verifier){var m=s.JoseUtil.hashString(y.code_verifier,"SHA256");y._code_challenge=s.JoseUtil.hexToBase64Url(m)}return y._redirect_uri=u,y._authority=i,y._client_id=o,y._response_mode=f,y._client_secret=g,y._scope=d,y._extraTokenParams=p,y._skipUserInfo=v,y}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.toStorageString=function t(){return i.Log.debug("SigninState.toStorageString"),JSON.stringify({id:this.id,data:this.data,created:this.created,request_type:this.request_type,nonce:this.nonce,code_verifier:this.code_verifier,redirect_uri:this.redirect_uri,authority:this.authority,client_id:this.client_id,response_mode:this.response_mode,client_secret:this.client_secret,scope:this.scope,extraTokenParams:this.extraTokenParams,skipUserInfo:this.skipUserInfo})},e.fromStorageString=function t(r){return i.Log.debug("SigninState.fromStorageString"),new e(JSON.parse(r))},n(e,[{key:"nonce",get:function t(){return this._nonce}},{key:"authority",get:function t(){return this._authority}},{key:"client_id",get:function t(){return this._client_id}},{key:"redirect_uri",get:function t(){return this._redirect_uri}},{key:"code_verifier",get:function t(){return this._code_verifier}},{key:"code_challenge",get:function t(){return this._code_challenge}},{key:"response_mode",get:function t(){return this._response_mode}},{key:"client_secret",get:function t(){return this._client_secret}},{key:"scope",get:function t(){return this._scope}},{key:"extraTokenParams",get:function t(){return this._extraTokenParams}},{key:"skipUserInfo",get:function t(){return this._skipUserInfo}}]),e}(o.State)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(){return("undefined"!=i&&null!==i&&void 0!==i.getRandomValues?o:s)().replace(/-/g,"")};var i="undefined"!=typeof window?window.crypto||window.msCrypto:null;function o(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^i.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)}))}function s(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^16*Math.random()>>t/4).toString(16)}))}t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.User=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.User=function(){function t(e){var r=e.id_token,n=e.session_state,i=e.access_token,o=e.refresh_token,s=e.token_type,a=e.scope,u=e.profile,c=e.expires_at,h=e.state;!function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.id_token=r,this.session_state=n,this.access_token=i,this.refresh_token=o,this.token_type=s,this.scope=a,this.profile=u,this.expires_at=c,this.state=h}return t.prototype.toStorageString=function t(){return i.Log.debug("User.toStorageString"),JSON.stringify({id_token:this.id_token,session_state:this.session_state,access_token:this.access_token,refresh_token:this.refresh_token,token_type:this.token_type,scope:this.scope,profile:this.profile,expires_at:this.expires_at})},t.fromStorageString=function e(r){return i.Log.debug("User.fromStorageString"),new t(JSON.parse(r))},n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AccessTokenEvents=void 0;var n=r(0),i=r(46);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.AccessTokenEvents=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.accessTokenExpiringNotificationTime,n=void 0===r?60:r,s=e.accessTokenExpiringTimer,a=void 0===s?new i.Timer("Access token expiring"):s,u=e.accessTokenExpiredTimer,c=void 0===u?new i.Timer("Access token expired"):u;o(this,t),this._accessTokenExpiringNotificationTime=n,this._accessTokenExpiring=a,this._accessTokenExpired=c}return t.prototype.load=function t(e){if(e.access_token&&void 0!==e.expires_in){var r=e.expires_in;if(n.Log.debug("AccessTokenEvents.load: access token present, remaining duration:",r),r>0){var i=r-this._accessTokenExpiringNotificationTime;i<=0&&(i=1),n.Log.debug("AccessTokenEvents.load: registering expiring timer in:",i),this._accessTokenExpiring.init(i)}else n.Log.debug("AccessTokenEvents.load: canceling existing expiring timer becase we're past expiration."),this._accessTokenExpiring.cancel();var o=r+1;n.Log.debug("AccessTokenEvents.load: registering expired timer in:",o),this._accessTokenExpired.init(o)}else this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.unload=function t(){n.Log.debug("AccessTokenEvents.unload: canceling existing access token timers"),this._accessTokenExpiring.cancel(),this._accessTokenExpired.cancel()},t.prototype.addAccessTokenExpiring=function t(e){this._accessTokenExpiring.addHandler(e)},t.prototype.removeAccessTokenExpiring=function t(e){this._accessTokenExpiring.removeHandler(e)},t.prototype.addAccessTokenExpired=function t(e){this._accessTokenExpired.addHandler(e)},t.prototype.removeAccessTokenExpired=function t(e){this._accessTokenExpired.removeHandler(e)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Event=void 0;var n=r(0);e.Event=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._name=e,this._callbacks=[]}return t.prototype.addHandler=function t(e){this._callbacks.push(e)},t.prototype.removeHandler=function t(e){var r=this._callbacks.findIndex((function(t){return t===e}));r>=0&&this._callbacks.splice(r,1)},t.prototype.raise=function t(){n.Log.debug("Event: Raising event: "+this._name);for(var e=0;e<this._callbacks.length;e++){var r;(r=this._callbacks)[e].apply(r,arguments)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SessionMonitor=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(19),s=r(1);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SessionMonitor=function(){function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.CheckSessionIFrame,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.Global.timer;if(a(this,t),!e)throw i.Log.error("SessionMonitor.ctor: No user manager passed to SessionMonitor"),new Error("userManager");this._userManager=e,this._CheckSessionIFrameCtor=n,this._timer=u,this._userManager.events.addUserLoaded(this._start.bind(this)),this._userManager.events.addUserUnloaded(this._stop.bind(this)),Promise.resolve(this._userManager.getUser().then((function(t){t?r._start(t):r._settings.monitorAnonymousSession&&r._userManager.querySessionStatus().then((function(t){var e={session_state:t.session_state};t.sub&&t.sid&&(e.profile={sub:t.sub,sid:t.sid}),r._start(e)})).catch((function(t){i.Log.error("SessionMonitor ctor: error from querySessionStatus:",t.message)}))})).catch((function(t){i.Log.error("SessionMonitor ctor: error from getUser:",t.message)})))}return t.prototype._start=function t(e){var r=this,n=e.session_state;n&&(e.profile?(this._sub=e.profile.sub,this._sid=e.profile.sid,i.Log.debug("SessionMonitor._start: session_state:",n,", sub:",this._sub)):(this._sub=void 0,this._sid=void 0,i.Log.debug("SessionMonitor._start: session_state:",n,", anonymous user")),this._checkSessionIFrame?this._checkSessionIFrame.start(n):this._metadataService.getCheckSessionIframe().then((function(t){if(t){i.Log.debug("SessionMonitor._start: Initializing check session iframe");var e=r._client_id,o=r._checkSessionInterval,s=r._stopCheckSessionOnError;r._checkSessionIFrame=new r._CheckSessionIFrameCtor(r._callback.bind(r),e,t,o,s),r._checkSessionIFrame.load().then((function(){r._checkSessionIFrame.start(n)}))}else i.Log.warn("SessionMonitor._start: No check session iframe found in the metadata")})).catch((function(t){i.Log.error("SessionMonitor._start: Error from getCheckSessionIframe:",t.message)})))},t.prototype._stop=function t(){var e=this;if(this._sub=void 0,this._sid=void 0,this._checkSessionIFrame&&(i.Log.debug("SessionMonitor._stop"),this._checkSessionIFrame.stop()),this._settings.monitorAnonymousSession)var r=this._timer.setInterval((function(){e._timer.clearInterval(r),e._userManager.querySessionStatus().then((function(t){var r={session_state:t.session_state};t.sub&&t.sid&&(r.profile={sub:t.sub,sid:t.sid}),e._start(r)})).catch((function(t){i.Log.error("SessionMonitor: error from querySessionStatus:",t.message)}))}),1e3)},t.prototype._callback=function t(){var e=this;this._userManager.querySessionStatus().then((function(t){var r=!0;t?t.sub===e._sub?(r=!1,e._checkSessionIFrame.start(t.session_state),t.sid===e._sid?i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, restarting check session iframe; session_state:",t.session_state):(i.Log.debug("SessionMonitor._callback: Same sub still logged in at OP, session state has changed, restarting check session iframe; session_state:",t.session_state),e._userManager.events._raiseUserSessionChanged())):i.Log.debug("SessionMonitor._callback: Different subject signed into OP:",t.sub):i.Log.debug("SessionMonitor._callback: Subject no longer signed into OP"),r&&(e._sub?(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed out event"),e._userManager.events._raiseUserSignedOut()):(i.Log.debug("SessionMonitor._callback: SessionMonitor._callback; raising signed in event"),e._userManager.events._raiseUserSignedIn()))})).catch((function(t){e._sub&&(i.Log.debug("SessionMonitor._callback: Error calling queryCurrentSigninSession; raising signed out event",t.message),e._userManager.events._raiseUserSignedOut())}))},n(t,[{key:"_settings",get:function t(){return this._userManager.settings}},{key:"_metadataService",get:function t(){return this._userManager.metadataService}},{key:"_client_id",get:function t(){return this._settings.client_id}},{key:"_checkSessionInterval",get:function t(){return this._settings.checkSessionInterval}},{key:"_stopCheckSessionOnError",get:function t(){return this._settings.stopCheckSessionOnError}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CheckSessionIFrame=void 0;var n=r(0);function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.CheckSessionIFrame=function(){function t(e,r,n,o){var s=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];i(this,t),this._callback=e,this._client_id=r,this._url=n,this._interval=o||2e3,this._stopOnError=s;var a=n.indexOf("/",n.indexOf("//")+2);this._frame_origin=n.substr(0,a),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.style.display="none",this._frame.width=0,this._frame.height=0,this._frame.src=n}return t.prototype.load=function t(){var e=this;return new Promise((function(t){e._frame.onload=function(){t()},window.document.body.appendChild(e._frame),e._boundMessageEvent=e._message.bind(e),window.addEventListener("message",e._boundMessageEvent,!1)}))},t.prototype._message=function t(e){e.origin===this._frame_origin&&e.source===this._frame.contentWindow&&("error"===e.data?(n.Log.error("CheckSessionIFrame: error message from check session op iframe"),this._stopOnError&&this.stop()):"changed"===e.data?(n.Log.debug("CheckSessionIFrame: changed message from check session op iframe"),this.stop(),this._callback()):n.Log.debug("CheckSessionIFrame: "+e.data+" message from check session op iframe"))},t.prototype.start=function t(e){var r=this;if(this._session_state!==e){n.Log.debug("CheckSessionIFrame.start"),this.stop(),this._session_state=e;var i=function t(){r._frame.contentWindow.postMessage(r._client_id+" "+r._session_state,r._frame_origin)};i(),this._timer=window.setInterval(i,this._interval)}},t.prototype.stop=function t(){this._session_state=null,this._timer&&(n.Log.debug("CheckSessionIFrame.stop"),window.clearInterval(this._timer),this._timer=null)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.TokenRevocationClient=void 0;var n=r(0),i=r(2),o=r(1);function s(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a="access_token",u="refresh_token";e.TokenRevocationClient=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.XMLHttpRequest,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService;if(s(this,t),!e)throw n.Log.error("TokenRevocationClient.ctor: No settings provided"),new Error("No settings provided.");this._settings=e,this._XMLHttpRequestCtor=r,this._metadataService=new a(this._settings)}return t.prototype.revoke=function t(e,r){var i=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"access_token";if(!e)throw n.Log.error("TokenRevocationClient.revoke: No token provided"),new Error("No token provided.");if(o!==a&&o!=u)throw n.Log.error("TokenRevocationClient.revoke: Invalid token type"),new Error("Invalid token type.");return this._metadataService.getRevocationEndpoint().then((function(t){if(t){n.Log.debug("TokenRevocationClient.revoke: Revoking "+o);var s=i._settings.client_id,a=i._settings.client_secret;return i._revoke(t,s,a,e,o)}if(r)throw n.Log.error("TokenRevocationClient.revoke: Revocation not supported"),new Error("Revocation not supported")}))},t.prototype._revoke=function t(e,r,i,o,s){var a=this;return new Promise((function(t,u){var c=new a._XMLHttpRequestCtor;c.open("POST",e),c.onload=function(){n.Log.debug("TokenRevocationClient.revoke: HTTP response received, status",c.status),200===c.status?t():u(Error(c.statusText+" ("+c.status+")"))},c.onerror=function(){n.Log.debug("TokenRevocationClient.revoke: Network Error."),u("Network Error")};var h="client_id="+encodeURIComponent(r);i&&(h+="&client_secret="+encodeURIComponent(i)),h+="&token_type_hint="+encodeURIComponent(s),h+="&token="+encodeURIComponent(o),c.setRequestHeader("Content-Type","application/x-www-form-urlencoded"),c.send(h)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.CordovaPopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this.features=e.popupWindowFeatures||"location=no,toolbar=no,zoom=no",this.target=e.popupWindowTarget||"_blank",this.redirect_uri=e.startUrl,i.Log.debug("CordovaPopupWindow.ctor: redirect_uri: "+this.redirect_uri)}return t.prototype._isInAppBrowserInstalled=function t(e){return["cordova-plugin-inappbrowser","cordova-plugin-inappbrowser.inappbrowser","org.apache.cordova.inappbrowser"].some((function(t){return e.hasOwnProperty(t)}))},t.prototype.navigate=function t(e){if(e&&e.url){if(!window.cordova)return this._error("cordova is undefined");var r=window.cordova.require("cordova/plugin_list").metadata;if(!1===this._isInAppBrowserInstalled(r))return this._error("InAppBrowser plugin not found");this._popup=cordova.InAppBrowser.open(e.url,this.target,this.features),this._popup?(i.Log.debug("CordovaPopupWindow.navigate: popup successfully created"),this._exitCallbackEvent=this._exitCallback.bind(this),this._loadStartCallbackEvent=this._loadStartCallback.bind(this),this._popup.addEventListener("exit",this._exitCallbackEvent,!1),this._popup.addEventListener("loadstart",this._loadStartCallbackEvent,!1)):this._error("Error opening popup window")}else this._error("No url provided");return this.promise},t.prototype._loadStartCallback=function t(e){0===e.url.indexOf(this.redirect_uri)&&this._success({url:e.url})},t.prototype._exitCallback=function t(e){this._error(e)},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("CordovaPopupWindow: Successful response from cordova popup window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._popup&&(i.Log.debug("CordovaPopupWindow: cleaning up popup"),this._popup.removeEventListener("exit",this._exitCallbackEvent,!1),this._popup.removeEventListener("loadstart",this._loadStartCallbackEvent,!1),this._popup.close()),this._popup=null},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),i=r(10),o=r(5),s=r(6),a=r(37),u=r(38),c=r(16),h=r(2),l=r(48),f=r(49),g=r(19),d=r(20),p=r(18),v=r(1),y=r(15),m=r(50);e.default={Version:m.Version,Log:n.Log,OidcClient:i.OidcClient,OidcClientSettings:o.OidcClientSettings,WebStorageStateStore:s.WebStorageStateStore,InMemoryWebStorage:a.InMemoryWebStorage,UserManager:u.UserManager,AccessTokenEvents:c.AccessTokenEvents,MetadataService:h.MetadataService,CordovaPopupNavigator:l.CordovaPopupNavigator,CordovaIFrameNavigator:f.CordovaIFrameNavigator,CheckSessionIFrame:g.CheckSessionIFrame,TokenRevocationClient:d.TokenRevocationClient,SessionMonitor:p.SessionMonitor,Global:v.Global,User:y.User},t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.ClockService=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.getEpochTime=function t(){return Promise.resolve(Date.now()/1e3|0)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ResponseValidator=void 0;var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=r(0),o=r(2),s=r(25),a=r(11),u=r(12),c=r(4);function h(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var l=["nonce","at_hash","iat","nbf","exp","aud","iss","c_hash"];e.ResponseValidator=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.MetadataService,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s.UserInfoService,u=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c.JoseUtil,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:a.TokenClient;if(h(this,t),!e)throw i.Log.error("ResponseValidator.ctor: No settings passed to ResponseValidator"),new Error("settings");this._settings=e,this._metadataService=new r(this._settings),this._userInfoService=new n(this._settings),this._joseUtil=u,this._tokenClient=new l(this._settings)}return t.prototype.validateSigninResponse=function t(e,r){var n=this;return i.Log.debug("ResponseValidator.validateSigninResponse"),this._processSigninParams(e,r).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: state processed"),n._validateTokens(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: tokens validated"),n._processClaims(e,t).then((function(t){return i.Log.debug("ResponseValidator.validateSigninResponse: claims processed"),t}))}))}))},t.prototype.validateSignoutResponse=function t(e,r){return e.id!==r.state?(i.Log.error("ResponseValidator.validateSignoutResponse: State does not match"),Promise.reject(new Error("State does not match"))):(i.Log.debug("ResponseValidator.validateSignoutResponse: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator.validateSignoutResponse: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):Promise.resolve(r))},t.prototype._processSigninParams=function t(e,r){if(e.id!==r.state)return i.Log.error("ResponseValidator._processSigninParams: State does not match"),Promise.reject(new Error("State does not match"));if(!e.client_id)return i.Log.error("ResponseValidator._processSigninParams: No client_id on state"),Promise.reject(new Error("No client_id on state"));if(!e.authority)return i.Log.error("ResponseValidator._processSigninParams: No authority on state"),Promise.reject(new Error("No authority on state"));if(this._settings.authority){if(this._settings.authority&&this._settings.authority!==e.authority)return i.Log.error("ResponseValidator._processSigninParams: authority mismatch on settings vs. signin state"),Promise.reject(new Error("authority mismatch on settings vs. signin state"))}else this._settings.authority=e.authority;if(this._settings.client_id){if(this._settings.client_id&&this._settings.client_id!==e.client_id)return i.Log.error("ResponseValidator._processSigninParams: client_id mismatch on settings vs. signin state"),Promise.reject(new Error("client_id mismatch on settings vs. signin state"))}else this._settings.client_id=e.client_id;return i.Log.debug("ResponseValidator._processSigninParams: state validated"),r.state=e.data,r.error?(i.Log.warn("ResponseValidator._processSigninParams: Response was error",r.error),Promise.reject(new u.ErrorResponse(r))):e.nonce&&!r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Expecting id_token in response"),Promise.reject(new Error("No id_token in response"))):!e.nonce&&r.id_token?(i.Log.error("ResponseValidator._processSigninParams: Not expecting id_token in response"),Promise.reject(new Error("Unexpected id_token in response"))):e.code_verifier&&!r.code?(i.Log.error("ResponseValidator._processSigninParams: Expecting code in response"),Promise.reject(new Error("No code in response"))):!e.code_verifier&&r.code?(i.Log.error("ResponseValidator._processSigninParams: Not expecting code in response"),Promise.reject(new Error("Unexpected code in response"))):(r.scope||(r.scope=e.scope),Promise.resolve(r))},t.prototype._processClaims=function t(e,r){var n=this;if(r.isOpenIdConnect){if(i.Log.debug("ResponseValidator._processClaims: response is OIDC, processing claims"),r.profile=this._filterProtocolClaims(r.profile),!0!==e.skipUserInfo&&this._settings.loadUserInfo&&r.access_token)return i.Log.debug("ResponseValidator._processClaims: loading user info"),this._userInfoService.getClaims(r.access_token).then((function(t){return i.Log.debug("ResponseValidator._processClaims: user info claims received from user info endpoint"),t.sub!==r.profile.sub?(i.Log.error("ResponseValidator._processClaims: sub from user info endpoint does not match sub in id_token"),Promise.reject(new Error("sub from user info endpoint does not match sub in id_token"))):(r.profile=n._mergeClaims(r.profile,t),i.Log.debug("ResponseValidator._processClaims: user info claims received, updated profile:",r.profile),r)}));i.Log.debug("ResponseValidator._processClaims: not loading user info")}else i.Log.debug("ResponseValidator._processClaims: response is not OIDC, not processing claims");return Promise.resolve(r)},t.prototype._mergeClaims=function t(e,r){var i=Object.assign({},e);for(var o in r){var s=r[o];Array.isArray(s)||(s=[s]);for(var a=0;a<s.length;a++){var u=s[a];i[o]?Array.isArray(i[o])?i[o].indexOf(u)<0&&i[o].push(u):i[o]!==u&&("object"===(void 0===u?"undefined":n(u))&&this._settings.mergeClaims?i[o]=this._mergeClaims(i[o],u):i[o]=[i[o],u]):i[o]=u}}return i},t.prototype._filterProtocolClaims=function t(e){i.Log.debug("ResponseValidator._filterProtocolClaims, incoming claims:",e);var r=Object.assign({},e);return this._settings._filterProtocolClaims?(l.forEach((function(t){delete r[t]})),i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims filtered",r)):i.Log.debug("ResponseValidator._filterProtocolClaims: protocol claims not filtered"),r},t.prototype._validateTokens=function t(e,r){return r.code?(i.Log.debug("ResponseValidator._validateTokens: Validating code"),this._processCode(e,r)):r.id_token?r.access_token?(i.Log.debug("ResponseValidator._validateTokens: Validating id_token and access_token"),this._validateIdTokenAndAccessToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: Validating id_token"),this._validateIdToken(e,r)):(i.Log.debug("ResponseValidator._validateTokens: No code to process or id_token to validate"),Promise.resolve(r))},t.prototype._processCode=function t(e,r){var o=this,s={client_id:e.client_id,client_secret:e.client_secret,code:r.code,redirect_uri:e.redirect_uri,code_verifier:e.code_verifier};return e.extraTokenParams&&"object"===n(e.extraTokenParams)&&Object.assign(s,e.extraTokenParams),this._tokenClient.exchangeCode(s).then((function(t){for(var n in t)r[n]=t[n];return r.id_token?(i.Log.debug("ResponseValidator._processCode: token response successful, processing id_token"),o._validateIdTokenAttributes(e,r)):(i.Log.debug("ResponseValidator._processCode: token response successful, returning response"),r)}))},t.prototype._validateIdTokenAttributes=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){var o=e.client_id,s=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdTokenAttributes: Validaing JWT attributes; using clock skew (in seconds) of: ",s),n._settings.getEpochTime().then((function(a){return n._joseUtil.validateJwtAttributes(r.id_token,t,o,s,a).then((function(t){return e.nonce&&e.nonce!==t.nonce?(i.Log.error("ResponseValidator._validateIdTokenAttributes: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):t.sub?(r.profile=t,r):(i.Log.error("ResponseValidator._validateIdTokenAttributes: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))}))},t.prototype._validateIdTokenAndAccessToken=function t(e,r){var n=this;return this._validateIdToken(e,r).then((function(t){return n._validateAccessToken(t)}))},t.prototype._getSigningKeyForJwt=function t(e){var r=this;return this._metadataService.getSigningKeys().then((function(t){var n=e.header.kid;if(!t)return i.Log.error("ResponseValidator._validateIdToken: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));i.Log.debug("ResponseValidator._validateIdToken: Received signing keys");var o=void 0;if(n)o=t.filter((function(t){return t.kid===n}))[0];else{if((t=r._filterByAlg(t,e.header.alg)).length>1)return i.Log.error("ResponseValidator._validateIdToken: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));o=t[0]}return Promise.resolve(o)}))},t.prototype._getSigningKeyForJwtWithSingleRetry=function t(e){var r=this;return this._getSigningKeyForJwt(e).then((function(t){return t?Promise.resolve(t):(r._metadataService.resetSigningKeys(),r._getSigningKeyForJwt(e))}))},t.prototype._validateIdToken=function t(e,r){var n=this;if(!e.nonce)return i.Log.error("ResponseValidator._validateIdToken: No nonce on state"),Promise.reject(new Error("No nonce on state"));var o=this._joseUtil.parseJwt(r.id_token);return o&&o.header&&o.payload?e.nonce!==o.payload.nonce?(i.Log.error("ResponseValidator._validateIdToken: Invalid nonce in id_token"),Promise.reject(new Error("Invalid nonce in id_token"))):this._metadataService.getIssuer().then((function(t){return i.Log.debug("ResponseValidator._validateIdToken: Received issuer"),n._getSigningKeyForJwtWithSingleRetry(o).then((function(s){if(!s)return i.Log.error("ResponseValidator._validateIdToken: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var a=e.client_id,u=n._settings.clockSkew;return i.Log.debug("ResponseValidator._validateIdToken: Validaing JWT; using clock skew (in seconds) of: ",u),n._joseUtil.validateJwt(r.id_token,s,t,a,u).then((function(){return i.Log.debug("ResponseValidator._validateIdToken: JWT validation successful"),o.payload.sub?(r.profile=o.payload,r):(i.Log.error("ResponseValidator._validateIdToken: No sub present in id_token"),Promise.reject(new Error("No sub present in id_token")))}))}))})):(i.Log.error("ResponseValidator._validateIdToken: Failed to parse id_token",o),Promise.reject(new Error("Failed to parse id_token")))},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return i.Log.debug("ResponseValidator._filterByAlg: alg not supported: ",r),[];n="EC"}return i.Log.debug("ResponseValidator._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),i.Log.debug("ResponseValidator._filterByAlg: Number of keys that match kty: ",n,e.length),e},t.prototype._validateAccessToken=function t(e){if(!e.profile)return i.Log.error("ResponseValidator._validateAccessToken: No profile loaded from id_token"),Promise.reject(new Error("No profile loaded from id_token"));if(!e.profile.at_hash)return i.Log.error("ResponseValidator._validateAccessToken: No at_hash in id_token"),Promise.reject(new Error("No at_hash in id_token"));if(!e.id_token)return i.Log.error("ResponseValidator._validateAccessToken: No id_token"),Promise.reject(new Error("No id_token"));var r=this._joseUtil.parseJwt(e.id_token);if(!r||!r.header)return i.Log.error("ResponseValidator._validateAccessToken: Failed to parse id_token",r),Promise.reject(new Error("Failed to parse id_token"));var n=r.header.alg;if(!n||5!==n.length)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n),Promise.reject(new Error("Unsupported alg: "+n));var o=n.substr(2,3);if(!o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));if(256!==(o=parseInt(o))&&384!==o&&512!==o)return i.Log.error("ResponseValidator._validateAccessToken: Unsupported alg:",n,o),Promise.reject(new Error("Unsupported alg: "+n));var s="sha"+o,a=this._joseUtil.hashString(e.access_token,s);if(!a)return i.Log.error("ResponseValidator._validateAccessToken: access_token hash failed:",s),Promise.reject(new Error("Failed to validate at_hash"));var u=a.substr(0,a.length/2),c=this._joseUtil.hexToBase64Url(u);return c!==e.profile.at_hash?(i.Log.error("ResponseValidator._validateAccessToken: Failed to validate at_hash",c,e.profile.at_hash),Promise.reject(new Error("Failed to validate at_hash"))):(i.Log.debug("ResponseValidator._validateAccessToken: success"),Promise.resolve(e))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserInfoService=void 0;var n=r(7),i=r(2),o=r(0),s=r(4);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.UserInfoService=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:n.JsonService,u=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i.MetadataService,c=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s.JoseUtil;if(a(this,t),!e)throw o.Log.error("UserInfoService.ctor: No settings passed"),new Error("settings");this._settings=e,this._jsonService=new r(void 0,void 0,this._getClaimsFromJwt.bind(this)),this._metadataService=new u(this._settings),this._joseUtil=c}return t.prototype.getClaims=function t(e){var r=this;return e?this._metadataService.getUserInfoEndpoint().then((function(t){return o.Log.debug("UserInfoService.getClaims: received userinfo url",t),r._jsonService.getJson(t,e).then((function(t){return o.Log.debug("UserInfoService.getClaims: claims received",t),t}))})):(o.Log.error("UserInfoService.getClaims: No token passed"),Promise.reject(new Error("A token is required")))},t.prototype._getClaimsFromJwt=function t(e){var r=this;try{var n=this._joseUtil.parseJwt(e.responseText);if(!n||!n.header||!n.payload)return o.Log.error("UserInfoService._getClaimsFromJwt: Failed to parse JWT",n),Promise.reject(new Error("Failed to parse id_token"));var i=n.header.kid,s=void 0;switch(this._settings.userInfoJwtIssuer){case"OP":s=this._metadataService.getIssuer();break;case"ANY":s=Promise.resolve(n.payload.iss);break;default:s=Promise.resolve(this._settings.userInfoJwtIssuer)}return s.then((function(t){return o.Log.debug("UserInfoService._getClaimsFromJwt: Received issuer:"+t),r._metadataService.getSigningKeys().then((function(s){if(!s)return o.Log.error("UserInfoService._getClaimsFromJwt: No signing keys from metadata"),Promise.reject(new Error("No signing keys from metadata"));o.Log.debug("UserInfoService._getClaimsFromJwt: Received signing keys");var a=void 0;if(i)a=s.filter((function(t){return t.kid===i}))[0];else{if((s=r._filterByAlg(s,n.header.alg)).length>1)return o.Log.error("UserInfoService._getClaimsFromJwt: No kid found in id_token and more than one key found in metadata"),Promise.reject(new Error("No kid found in id_token and more than one key found in metadata"));a=s[0]}if(!a)return o.Log.error("UserInfoService._getClaimsFromJwt: No key matching kid or alg found in signing keys"),Promise.reject(new Error("No key matching kid or alg found in signing keys"));var u=r._settings.client_id,c=r._settings.clockSkew;return o.Log.debug("UserInfoService._getClaimsFromJwt: Validaing JWT; using clock skew (in seconds) of: ",c),r._joseUtil.validateJwt(e.responseText,a,t,u,c,void 0,!0).then((function(){return o.Log.debug("UserInfoService._getClaimsFromJwt: JWT validation successful"),n.payload}))}))}))}catch(t){return o.Log.error("UserInfoService._getClaimsFromJwt: Error parsing JWT response",t.message),void reject(t)}},t.prototype._filterByAlg=function t(e,r){var n=null;if(r.startsWith("RS"))n="RSA";else if(r.startsWith("PS"))n="PS";else{if(!r.startsWith("ES"))return o.Log.debug("UserInfoService._filterByAlg: alg not supported: ",r),[];n="EC"}return o.Log.debug("UserInfoService._filterByAlg: Looking for keys that match kty: ",n),e=e.filter((function(t){return t.kty===n})),o.Log.debug("UserInfoService._filterByAlg: Number of keys that match kty: ",n,e.length),e},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.AllowedSigningAlgs=e.b64tohex=e.hextob64u=e.crypto=e.X509=e.KeyUtil=e.jws=void 0;var n=r(27);e.jws=n.jws,e.KeyUtil=n.KEYUTIL,e.X509=n.X509,e.crypto=n.crypto,e.hextob64u=n.hextob64u,e.b64tohex=n.b64tohex,e.AllowedSigningAlgs=["RS256","RS384","RS512","PS256","PS384","PS512","ES256","ES384","ES512"]},function(t,e,r){"use strict";(function(t){Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n={userAgent:!1},i={};
/*!
Copyright (c) 2011, Yahoo! Inc. All rights reserved.
Code licensed under the BSD License:
http://developer.yahoo.com/yui/license.html
version: 2.9.0
*/
if(void 0===o)var o={};o.lang={extend:function t(e,r,i){if(!r||!e)throw new Error("YAHOO.lang.extend failed, please check that all dependencies are included.");var o=function t(){};if(o.prototype=r.prototype,e.prototype=new o,e.prototype.constructor=e,e.superclass=r.prototype,r.prototype.constructor==Object.prototype.constructor&&(r.prototype.constructor=r),i){var s;for(s in i)e.prototype[s]=i[s];var a=function t(){},u=["toString","valueOf"];try{/MSIE/.test(n.userAgent)&&(a=function t(e,r){for(s=0;s<u.length;s+=1){var n=u[s],i=r[n];"function"==typeof i&&i!=Object.prototype[n]&&(e[n]=i)}})}catch(t){}a(e.prototype,i)}}};
/*! CryptoJS v3.1.2 core-fix.js
 * code.google.com/p/crypto-js
 * (c) 2009-2013 by Jeff Mott. All rights reserved.
 * code.google.com/p/crypto-js/wiki/License
 * THIS IS FIX of 'core.js' to fix Hmac issue.
 * https://code.google.com/p/crypto-js/issues/detail?id=84
 * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js
 */
var s,a,u,c,h,l,f,g,d,p,v,y=y||(s=Math,u=(a={}).lib={},c=u.Base=function(){function t(){}return{extend:function e(r){t.prototype=this;var n=new t;return r&&n.mixIn(r),n.hasOwnProperty("init")||(n.init=function(){n.$super.init.apply(this,arguments)}),n.init.prototype=n,n.$super=this,n},create:function t(){var e=this.extend();return e.init.apply(e,arguments),e},init:function t(){},mixIn:function t(e){for(var r in e)e.hasOwnProperty(r)&&(this[r]=e[r]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function t(){return this.init.prototype.extend(this)}}}(),h=u.WordArray=c.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:4*e.length},toString:function t(e){return(e||f).stringify(this)},concat:function t(e){var r=this.words,n=e.words,i=this.sigBytes,o=e.sigBytes;if(this.clamp(),i%4)for(var s=0;s<o;s++){var a=n[s>>>2]>>>24-s%4*8&255;r[i+s>>>2]|=a<<24-(i+s)%4*8}else for(s=0;s<o;s+=4)r[i+s>>>2]=n[s>>>2];return this.sigBytes+=o,this},clamp:function t(){var e=this.words,r=this.sigBytes;e[r>>>2]&=4294967295<<32-r%4*8,e.length=s.ceil(r/4)},clone:function t(){var e=c.clone.call(this);return e.words=this.words.slice(0),e},random:function t(e){for(var r=[],n=0;n<e;n+=4)r.push(4294967296*s.random()|0);return new h.init(r,e)}}),l=a.enc={},f=l.Hex={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push((s>>>4).toString(16)),i.push((15&s).toString(16))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i+=2)n[i>>>3]|=parseInt(e.substr(i,2),16)<<24-i%8*4;return new h.init(n,r/2)}},g=l.Latin1={stringify:function t(e){for(var r=e.words,n=e.sigBytes,i=[],o=0;o<n;o++){var s=r[o>>>2]>>>24-o%4*8&255;i.push(String.fromCharCode(s))}return i.join("")},parse:function t(e){for(var r=e.length,n=[],i=0;i<r;i++)n[i>>>2]|=(255&e.charCodeAt(i))<<24-i%4*8;return new h.init(n,r)}},d=l.Utf8={stringify:function t(e){try{return decodeURIComponent(escape(g.stringify(e)))}catch(t){throw new Error("Malformed UTF-8 data")}},parse:function t(e){return g.parse(unescape(encodeURIComponent(e)))}},p=u.BufferedBlockAlgorithm=c.extend({reset:function t(){this._data=new h.init,this._nDataBytes=0},_append:function t(e){"string"==typeof e&&(e=d.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function t(e){var r=this._data,n=r.words,i=r.sigBytes,o=this.blockSize,a=i/(4*o),u=(a=e?s.ceil(a):s.max((0|a)-this._minBufferSize,0))*o,c=s.min(4*u,i);if(u){for(var l=0;l<u;l+=o)this._doProcessBlock(n,l);var f=n.splice(0,u);r.sigBytes-=c}return new h.init(f,c)},clone:function t(){var e=c.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),u.Hasher=p.extend({cfg:c.extend(),init:function t(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function t(){p.reset.call(this),this._doReset()},update:function t(e){return this._append(e),this._process(),this},finalize:function t(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function t(e){return function(t,r){return new e.init(r).finalize(t)}},_createHmacHelper:function t(e){return function(t,r){return new v.HMAC.init(e,r).finalize(t)}}}),v=a.algo={},a);!function(t){var e,r=(e=y).lib,n=r.Base,i=r.WordArray;(e=e.x64={}).Word=n.extend({init:function t(e,r){this.high=e,this.low=r}}),e.WordArray=n.extend({init:function t(e,r){e=this.words=e||[],this.sigBytes=null!=r?r:8*e.length},toX32:function t(){for(var e=this.words,r=e.length,n=[],o=0;o<r;o++){var s=e[o];n.push(s.high),n.push(s.low)}return i.create(n,this.sigBytes)},clone:function t(){for(var e=n.clone.call(this),r=e.words=this.words.slice(0),i=r.length,o=0;o<i;o++)r[o]=r[o].clone();return e}})}(),function(){var t=y,e=t.lib.WordArray;t.enc.Base64={stringify:function t(e){var r=e.words,n=e.sigBytes,i=this._map;e.clamp(),e=[];for(var o=0;o<n;o+=3)for(var s=(r[o>>>2]>>>24-o%4*8&255)<<16|(r[o+1>>>2]>>>24-(o+1)%4*8&255)<<8|r[o+2>>>2]>>>24-(o+2)%4*8&255,a=0;4>a&&o+.75*a<n;a++)e.push(i.charAt(s>>>6*(3-a)&63));if(r=i.charAt(64))for(;e.length%4;)e.push(r);return e.join("")},parse:function t(r){var n=r.length,i=this._map;(o=i.charAt(64))&&(-1!=(o=r.indexOf(o))&&(n=o));for(var o=[],s=0,a=0;a<n;a++)if(a%4){var u=i.indexOf(r.charAt(a-1))<<a%4*2,c=i.indexOf(r.charAt(a))>>>6-a%4*2;o[s>>>2]|=(u|c)<<24-s%4*8,s++}return e.create(o,s)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="}}(),function(t){for(var e=y,r=(i=e.lib).WordArray,n=i.Hasher,i=e.algo,o=[],s=[],a=function t(e){return 4294967296*(e-(0|e))|0},u=2,c=0;64>c;){var h;t:{h=u;for(var l=t.sqrt(h),f=2;f<=l;f++)if(!(h%f)){h=!1;break t}h=!0}h&&(8>c&&(o[c]=a(t.pow(u,.5))),s[c]=a(t.pow(u,1/3)),c++),u++}var g=[];i=i.SHA256=n.extend({_doReset:function t(){this._hash=new r.init(o.slice(0))},_doProcessBlock:function t(e,r){for(var n=this._hash.words,i=n[0],o=n[1],a=n[2],u=n[3],c=n[4],h=n[5],l=n[6],f=n[7],d=0;64>d;d++){if(16>d)g[d]=0|e[r+d];else{var p=g[d-15],v=g[d-2];g[d]=((p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3)+g[d-7]+((v<<15|v>>>17)^(v<<13|v>>>19)^v>>>10)+g[d-16]}p=f+((c<<26|c>>>6)^(c<<21|c>>>11)^(c<<7|c>>>25))+(c&h^~c&l)+s[d]+g[d],v=((i<<30|i>>>2)^(i<<19|i>>>13)^(i<<10|i>>>22))+(i&o^i&a^o&a),f=l,l=h,h=c,c=u+p|0,u=a,a=o,o=i,i=p+v|0}n[0]=n[0]+i|0,n[1]=n[1]+o|0,n[2]=n[2]+a|0,n[3]=n[3]+u|0,n[4]=n[4]+c|0,n[5]=n[5]+h|0,n[6]=n[6]+l|0,n[7]=n[7]+f|0},_doFinalize:function e(){var r=this._data,n=r.words,i=8*this._nDataBytes,o=8*r.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=t.floor(i/4294967296),n[15+(o+64>>>9<<4)]=i,r.sigBytes=4*n.length,this._process(),this._hash},clone:function t(){var e=n.clone.call(this);return e._hash=this._hash.clone(),e}});e.SHA256=n._createHelper(i),e.HmacSHA256=n._createHmacHelper(i)}(Math),function(){function t(){return n.create.apply(n,arguments)}for(var e=y,r=e.lib.Hasher,n=(o=e.x64).Word,i=o.WordArray,o=e.algo,s=[t(1116352408,3609767458),t(1899447441,602891725),t(3049323471,3964484399),t(3921009573,2173295548),t(961987163,4081628472),t(1508970993,3053834265),t(2453635748,2937671579),t(2870763221,3664609560),t(3624381080,2734883394),t(310598401,1164996542),t(607225278,1323610764),t(1426881987,3590304994),t(1925078388,4068182383),t(2162078206,991336113),t(2614888103,633803317),t(3248222580,3479774868),t(3835390401,2666613458),t(4022224774,944711139),t(264347078,2341262773),t(604807628,2007800933),t(770255983,1495990901),t(1249150122,1856431235),t(1555081692,3175218132),t(1996064986,2198950837),t(2554220882,3999719339),t(2821834349,766784016),t(2952996808,2566594879),t(3210313671,3203337956),t(3336571891,1034457026),t(3584528711,2466948901),t(113926993,3758326383),t(338241895,168717936),t(666307205,1188179964),t(773529912,1546045734),t(1294757372,1522805485),t(1396182291,2643833823),t(1695183700,2343527390),t(1986661051,1014477480),t(2177026350,1206759142),t(2456956037,344077627),t(2730485921,1290863460),t(2820302411,3158454273),t(3259730800,3505952657),t(3345764771,106217008),t(3516065817,3606008344),t(3600352804,1432725776),t(4094571909,1467031594),t(275423344,851169720),t(430227734,3100823752),t(506948616,1363258195),t(659060556,3750685593),t(883997877,3785050280),t(958139571,3318307427),t(1322822218,3812723403),t(1537002063,2003034995),t(1747873779,3602036899),t(1955562222,1575990012),t(2024104815,1125592928),t(2227730452,2716904306),t(2361852424,442776044),t(2428436474,593698344),t(2756734187,3733110249),t(3204031479,2999351573),t(3329325298,3815920427),t(3391569614,3928383900),t(3515267271,566280711),t(3940187606,3454069534),t(4118630271,4000239992),t(116418474,1914138554),t(174292421,2731055270),t(289380356,3203993006),t(460393269,320620315),t(685471733,587496836),t(852142971,1086792851),t(1017036298,365543100),t(1126000580,2618297676),t(1288033470,3409855158),t(1501505948,4234509866),t(1607167915,987167468),t(1816402316,1246189591)],a=[],u=0;80>u;u++)a[u]=t();o=o.SHA512=r.extend({_doReset:function t(){this._hash=new i.init([new n.init(1779033703,4089235720),new n.init(3144134277,2227873595),new n.init(1013904242,4271175723),new n.init(2773480762,1595750129),new n.init(1359893119,2917565137),new n.init(2600822924,725511199),new n.init(528734635,4215389547),new n.init(1541459225,327033209)])},_doProcessBlock:function t(e,r){for(var n=(f=this._hash.words)[0],i=f[1],o=f[2],u=f[3],c=f[4],h=f[5],l=f[6],f=f[7],g=n.high,d=n.low,p=i.high,v=i.low,y=o.high,m=o.low,_=u.high,S=u.low,b=c.high,w=c.low,F=h.high,E=h.low,x=l.high,A=l.low,k=f.high,P=f.low,C=g,T=d,R=p,I=v,D=y,L=m,N=_,U=S,B=b,O=w,j=F,M=E,H=x,V=A,K=k,q=P,J=0;80>J;J++){var W=a[J];if(16>J)var z=W.high=0|e[r+2*J],Y=W.low=0|e[r+2*J+1];else{z=((Y=(z=a[J-15]).high)>>>1|(G=z.low)<<31)^(Y>>>8|G<<24)^Y>>>7;var G=(G>>>1|Y<<31)^(G>>>8|Y<<24)^(G>>>7|Y<<25),X=((Y=(X=a[J-2]).high)>>>19|($=X.low)<<13)^(Y<<3|$>>>29)^Y>>>6,$=($>>>19|Y<<13)^($<<3|Y>>>29)^($>>>6|Y<<26),Q=(Y=a[J-7]).high,Z=(tt=a[J-16]).high,tt=tt.low;z=(z=(z=z+Q+((Y=G+Y.low)>>>0<G>>>0?1:0))+X+((Y=Y+$)>>>0<$>>>0?1:0))+Z+((Y=Y+tt)>>>0<tt>>>0?1:0);W.high=z,W.low=Y}Q=B&j^~B&H,tt=O&M^~O&V,W=C&R^C&D^R&D;var et=T&I^T&L^I&L,rt=(G=(C>>>28|T<<4)^(C<<30|T>>>2)^(C<<25|T>>>7),X=(T>>>28|C<<4)^(T<<30|C>>>2)^(T<<25|C>>>7),($=s[J]).high),nt=$.low;Z=K+((B>>>14|O<<18)^(B>>>18|O<<14)^(B<<23|O>>>9))+(($=q+((O>>>14|B<<18)^(O>>>18|B<<14)^(O<<23|B>>>9)))>>>0<q>>>0?1:0),K=H,q=V,H=j,V=M,j=B,M=O,B=N+(Z=(Z=(Z=Z+Q+(($=$+tt)>>>0<tt>>>0?1:0))+rt+(($=$+nt)>>>0<nt>>>0?1:0))+z+(($=$+Y)>>>0<Y>>>0?1:0))+((O=U+$|0)>>>0<U>>>0?1:0)|0,N=D,U=L,D=R,L=I,R=C,I=T,C=Z+(W=G+W+((Y=X+et)>>>0<X>>>0?1:0))+((T=$+Y|0)>>>0<$>>>0?1:0)|0}d=n.low=d+T,n.high=g+C+(d>>>0<T>>>0?1:0),v=i.low=v+I,i.high=p+R+(v>>>0<I>>>0?1:0),m=o.low=m+L,o.high=y+D+(m>>>0<L>>>0?1:0),S=u.low=S+U,u.high=_+N+(S>>>0<U>>>0?1:0),w=c.low=w+O,c.high=b+B+(w>>>0<O>>>0?1:0),E=h.low=E+M,h.high=F+j+(E>>>0<M>>>0?1:0),A=l.low=A+V,l.high=x+H+(A>>>0<V>>>0?1:0),P=f.low=P+q,f.high=k+K+(P>>>0<q>>>0?1:0)},_doFinalize:function t(){var e=this._data,r=e.words,n=8*this._nDataBytes,i=8*e.sigBytes;return r[i>>>5]|=128<<24-i%32,r[30+(i+128>>>10<<5)]=Math.floor(n/4294967296),r[31+(i+128>>>10<<5)]=n,e.sigBytes=4*r.length,this._process(),this._hash.toX32()},clone:function t(){var e=r.clone.call(this);return e._hash=this._hash.clone(),e},blockSize:32}),e.SHA512=r._createHelper(o),e.HmacSHA512=r._createHmacHelper(o)}(),function(){var t=y,e=(i=t.x64).Word,r=i.WordArray,n=(i=t.algo).SHA512,i=i.SHA384=n.extend({_doReset:function t(){this._hash=new r.init([new e.init(3418070365,3238371032),new e.init(1654270250,914150663),new e.init(2438529370,812702999),new e.init(355462360,4144912697),new e.init(1731405415,4290775857),new e.init(2394180231,1750603025),new e.init(3675008525,1694076839),new e.init(1203062813,3204075428)])},_doFinalize:function t(){var e=n._doFinalize.call(this);return e.sigBytes-=16,e}});t.SHA384=n._createHelper(i),t.HmacSHA384=n._createHmacHelper(i)}();
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
var m,_="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function S(t){var e,r,n="";for(e=0;e+3<=t.length;e+=3)r=parseInt(t.substring(e,e+3),16),n+=_.charAt(r>>6)+_.charAt(63&r);for(e+1==t.length?(r=parseInt(t.substring(e,e+1),16),n+=_.charAt(r<<2)):e+2==t.length&&(r=parseInt(t.substring(e,e+2),16),n+=_.charAt(r>>2)+_.charAt((3&r)<<4)),"=";(3&n.length)>0;)n+="=";return n}function b(t){var e,r,n,i="",o=0;for(e=0;e<t.length&&"="!=t.charAt(e);++e)(n=_.indexOf(t.charAt(e)))<0||(0==o?(i+=R(n>>2),r=3&n,o=1):1==o?(i+=R(r<<2|n>>4),r=15&n,o=2):2==o?(i+=R(r),i+=R(n>>2),r=3&n,o=3):(i+=R(r<<2|n>>4),i+=R(15&n),o=0));return 1==o&&(i+=R(r<<2)),i}function w(t){var e,r=b(t),n=new Array;for(e=0;2*e<r.length;++e)n[e]=parseInt(r.substring(2*e,2*e+2),16);return n}function F(t,e,r){null!=t&&("number"==typeof t?this.fromNumber(t,e,r):null==e&&"string"!=typeof t?this.fromString(t,256):this.fromString(t,e))}function E(){return new F(null)}"Microsoft Internet Explorer"==n.appName?(F.prototype.am=function x(t,e,r,n,i,o){for(var s=32767&e,a=e>>15;--o>=0;){var u=32767&this[t],c=this[t++]>>15,h=a*u+c*s;i=((u=s*u+((32767&h)<<15)+r[n]+(1073741823&i))>>>30)+(h>>>15)+a*c+(i>>>30),r[n++]=1073741823&u}return i},m=30):"Netscape"!=n.appName?(F.prototype.am=function A(t,e,r,n,i,o){for(;--o>=0;){var s=e*this[t++]+r[n]+i;i=Math.floor(s/67108864),r[n++]=67108863&s}return i},m=26):(F.prototype.am=function k(t,e,r,n,i,o){for(var s=16383&e,a=e>>14;--o>=0;){var u=16383&this[t],c=this[t++]>>14,h=a*u+c*s;i=((u=s*u+((16383&h)<<14)+r[n]+i)>>28)+(h>>14)+a*c,r[n++]=268435455&u}return i},m=28),F.prototype.DB=m,F.prototype.DM=(1<<m)-1,F.prototype.DV=1<<m;F.prototype.FV=Math.pow(2,52),F.prototype.F1=52-m,F.prototype.F2=2*m-52;var P,C,T=new Array;for(P="0".charCodeAt(0),C=0;C<=9;++C)T[P++]=C;for(P="a".charCodeAt(0),C=10;C<36;++C)T[P++]=C;for(P="A".charCodeAt(0),C=10;C<36;++C)T[P++]=C;function R(t){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(t)}function I(t,e){var r=T[t.charCodeAt(e)];return null==r?-1:r}function D(t){var e=E();return e.fromInt(t),e}function L(t){var e,r=1;return 0!=(e=t>>>16)&&(t=e,r+=16),0!=(e=t>>8)&&(t=e,r+=8),0!=(e=t>>4)&&(t=e,r+=4),0!=(e=t>>2)&&(t=e,r+=2),0!=(e=t>>1)&&(t=e,r+=1),r}function N(t){this.m=t}function U(t){this.m=t,this.mp=t.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<t.DB-15)-1,this.mt2=2*t.t}function B(t,e){return t&e}function O(t,e){return t|e}function j(t,e){return t^e}function M(t,e){return t&~e}function H(t){if(0==t)return-1;var e=0;return 0==(65535&t)&&(t>>=16,e+=16),0==(255&t)&&(t>>=8,e+=8),0==(15&t)&&(t>>=4,e+=4),0==(3&t)&&(t>>=2,e+=2),0==(1&t)&&++e,e}function V(t){for(var e=0;0!=t;)t&=t-1,++e;return e}function K(){}function q(t){return t}function J(t){this.r2=E(),this.q3=E(),F.ONE.dlShiftTo(2*t.t,this.r2),this.mu=this.r2.divide(t),this.m=t}N.prototype.convert=function W(t){return t.s<0||t.compareTo(this.m)>=0?t.mod(this.m):t},N.prototype.revert=function z(t){return t},N.prototype.reduce=function Y(t){t.divRemTo(this.m,null,t)},N.prototype.mulTo=function G(t,e,r){t.multiplyTo(e,r),this.reduce(r)},N.prototype.sqrTo=function X(t,e){t.squareTo(e),this.reduce(e)},U.prototype.convert=function $(t){var e=E();return t.abs().dlShiftTo(this.m.t,e),e.divRemTo(this.m,null,e),t.s<0&&e.compareTo(F.ZERO)>0&&this.m.subTo(e,e),e},U.prototype.revert=function Q(t){var e=E();return t.copyTo(e),this.reduce(e),e},U.prototype.reduce=function Z(t){for(;t.t<=this.mt2;)t[t.t++]=0;for(var e=0;e<this.m.t;++e){var r=32767&t[e],n=r*this.mpl+((r*this.mph+(t[e]>>15)*this.mpl&this.um)<<15)&t.DM;for(t[r=e+this.m.t]+=this.m.am(0,n,t,e,0,this.m.t);t[r]>=t.DV;)t[r]-=t.DV,t[++r]++}t.clamp(),t.drShiftTo(this.m.t,t),t.compareTo(this.m)>=0&&t.subTo(this.m,t)},U.prototype.mulTo=function tt(t,e,r){t.multiplyTo(e,r),this.reduce(r)},U.prototype.sqrTo=function et(t,e){t.squareTo(e),this.reduce(e)},F.prototype.copyTo=function rt(t){for(var e=this.t-1;e>=0;--e)t[e]=this[e];t.t=this.t,t.s=this.s},F.prototype.fromInt=function nt(t){this.t=1,this.s=t<0?-1:0,t>0?this[0]=t:t<-1?this[0]=t+this.DV:this.t=0},F.prototype.fromString=function it(t,e){var r;if(16==e)r=4;else if(8==e)r=3;else if(256==e)r=8;else if(2==e)r=1;else if(32==e)r=5;else{if(4!=e)return void this.fromRadix(t,e);r=2}this.t=0,this.s=0;for(var n=t.length,i=!1,o=0;--n>=0;){var s=8==r?255&t[n]:I(t,n);s<0?"-"==t.charAt(n)&&(i=!0):(i=!1,0==o?this[this.t++]=s:o+r>this.DB?(this[this.t-1]|=(s&(1<<this.DB-o)-1)<<o,this[this.t++]=s>>this.DB-o):this[this.t-1]|=s<<o,(o+=r)>=this.DB&&(o-=this.DB))}8==r&&0!=(128&t[0])&&(this.s=-1,o>0&&(this[this.t-1]|=(1<<this.DB-o)-1<<o)),this.clamp(),i&&F.ZERO.subTo(this,this)},F.prototype.clamp=function ot(){for(var t=this.s&this.DM;this.t>0&&this[this.t-1]==t;)--this.t},F.prototype.dlShiftTo=function st(t,e){var r;for(r=this.t-1;r>=0;--r)e[r+t]=this[r];for(r=t-1;r>=0;--r)e[r]=0;e.t=this.t+t,e.s=this.s},F.prototype.drShiftTo=function at(t,e){for(var r=t;r<this.t;++r)e[r-t]=this[r];e.t=Math.max(this.t-t,0),e.s=this.s},F.prototype.lShiftTo=function ut(t,e){var r,n=t%this.DB,i=this.DB-n,o=(1<<i)-1,s=Math.floor(t/this.DB),a=this.s<<n&this.DM;for(r=this.t-1;r>=0;--r)e[r+s+1]=this[r]>>i|a,a=(this[r]&o)<<n;for(r=s-1;r>=0;--r)e[r]=0;e[s]=a,e.t=this.t+s+1,e.s=this.s,e.clamp()},F.prototype.rShiftTo=function ct(t,e){e.s=this.s;var r=Math.floor(t/this.DB);if(r>=this.t)e.t=0;else{var n=t%this.DB,i=this.DB-n,o=(1<<n)-1;e[0]=this[r]>>n;for(var s=r+1;s<this.t;++s)e[s-r-1]|=(this[s]&o)<<i,e[s-r]=this[s]>>n;n>0&&(e[this.t-r-1]|=(this.s&o)<<i),e.t=this.t-r,e.clamp()}},F.prototype.subTo=function ht(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]-t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n-=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n-=t[r],e[r++]=n&this.DM,n>>=this.DB;n-=t.s}e.s=n<0?-1:0,n<-1?e[r++]=this.DV+n:n>0&&(e[r++]=n),e.t=r,e.clamp()},F.prototype.multiplyTo=function lt(t,e){var r=this.abs(),n=t.abs(),i=r.t;for(e.t=i+n.t;--i>=0;)e[i]=0;for(i=0;i<n.t;++i)e[i+r.t]=r.am(0,n[i],e,i,0,r.t);e.s=0,e.clamp(),this.s!=t.s&&F.ZERO.subTo(e,e)},F.prototype.squareTo=function ft(t){for(var e=this.abs(),r=t.t=2*e.t;--r>=0;)t[r]=0;for(r=0;r<e.t-1;++r){var n=e.am(r,e[r],t,2*r,0,1);(t[r+e.t]+=e.am(r+1,2*e[r],t,2*r+1,n,e.t-r-1))>=e.DV&&(t[r+e.t]-=e.DV,t[r+e.t+1]=1)}t.t>0&&(t[t.t-1]+=e.am(r,e[r],t,2*r,0,1)),t.s=0,t.clamp()},F.prototype.divRemTo=function gt(t,e,r){var n=t.abs();if(!(n.t<=0)){var i=this.abs();if(i.t<n.t)return null!=e&&e.fromInt(0),void(null!=r&&this.copyTo(r));null==r&&(r=E());var o=E(),s=this.s,a=t.s,u=this.DB-L(n[n.t-1]);u>0?(n.lShiftTo(u,o),i.lShiftTo(u,r)):(n.copyTo(o),i.copyTo(r));var c=o.t,h=o[c-1];if(0!=h){var l=h*(1<<this.F1)+(c>1?o[c-2]>>this.F2:0),f=this.FV/l,g=(1<<this.F1)/l,d=1<<this.F2,p=r.t,v=p-c,y=null==e?E():e;for(o.dlShiftTo(v,y),r.compareTo(y)>=0&&(r[r.t++]=1,r.subTo(y,r)),F.ONE.dlShiftTo(c,y),y.subTo(o,o);o.t<c;)o[o.t++]=0;for(;--v>=0;){var m=r[--p]==h?this.DM:Math.floor(r[p]*f+(r[p-1]+d)*g);if((r[p]+=o.am(0,m,r,v,0,c))<m)for(o.dlShiftTo(v,y),r.subTo(y,r);r[p]<--m;)r.subTo(y,r)}null!=e&&(r.drShiftTo(c,e),s!=a&&F.ZERO.subTo(e,e)),r.t=c,r.clamp(),u>0&&r.rShiftTo(u,r),s<0&&F.ZERO.subTo(r,r)}}},F.prototype.invDigit=function dt(){if(this.t<1)return 0;var t=this[0];if(0==(1&t))return 0;var e=3&t;return(e=(e=(e=(e=e*(2-(15&t)*e)&15)*(2-(255&t)*e)&255)*(2-((65535&t)*e&65535))&65535)*(2-t*e%this.DV)%this.DV)>0?this.DV-e:-e},F.prototype.isEven=function pt(){return 0==(this.t>0?1&this[0]:this.s)},F.prototype.exp=function vt(t,e){if(t>4294967295||t<1)return F.ONE;var r=E(),n=E(),i=e.convert(this),o=L(t)-1;for(i.copyTo(r);--o>=0;)if(e.sqrTo(r,n),(t&1<<o)>0)e.mulTo(n,i,r);else{var s=r;r=n,n=s}return e.revert(r)},F.prototype.toString=function yt(t){if(this.s<0)return"-"+this.negate().toString(t);var e;if(16==t)e=4;else if(8==t)e=3;else if(2==t)e=1;else if(32==t)e=5;else{if(4!=t)return this.toRadix(t);e=2}var r,n=(1<<e)-1,i=!1,o="",s=this.t,a=this.DB-s*this.DB%e;if(s-- >0)for(a<this.DB&&(r=this[s]>>a)>0&&(i=!0,o=R(r));s>=0;)a<e?(r=(this[s]&(1<<a)-1)<<e-a,r|=this[--s]>>(a+=this.DB-e)):(r=this[s]>>(a-=e)&n,a<=0&&(a+=this.DB,--s)),r>0&&(i=!0),i&&(o+=R(r));return i?o:"0"},F.prototype.negate=function mt(){var t=E();return F.ZERO.subTo(this,t),t},F.prototype.abs=function _t(){return this.s<0?this.negate():this},F.prototype.compareTo=function St(t){var e=this.s-t.s;if(0!=e)return e;var r=this.t;if(0!=(e=r-t.t))return this.s<0?-e:e;for(;--r>=0;)if(0!=(e=this[r]-t[r]))return e;return 0},F.prototype.bitLength=function bt(){return this.t<=0?0:this.DB*(this.t-1)+L(this[this.t-1]^this.s&this.DM)},F.prototype.mod=function wt(t){var e=E();return this.abs().divRemTo(t,null,e),this.s<0&&e.compareTo(F.ZERO)>0&&t.subTo(e,e),e},F.prototype.modPowInt=function Ft(t,e){var r;return r=t<256||e.isEven()?new N(e):new U(e),this.exp(t,r)},F.ZERO=D(0),F.ONE=D(1),K.prototype.convert=q,K.prototype.revert=q,K.prototype.mulTo=function Et(t,e,r){t.multiplyTo(e,r)},K.prototype.sqrTo=function xt(t,e){t.squareTo(e)},J.prototype.convert=function At(t){if(t.s<0||t.t>2*this.m.t)return t.mod(this.m);if(t.compareTo(this.m)<0)return t;var e=E();return t.copyTo(e),this.reduce(e),e},J.prototype.revert=function kt(t){return t},J.prototype.reduce=function Pt(t){for(t.drShiftTo(this.m.t-1,this.r2),t.t>this.m.t+1&&(t.t=this.m.t+1,t.clamp()),this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3),this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);t.compareTo(this.r2)<0;)t.dAddOffset(1,this.m.t+1);for(t.subTo(this.r2,t);t.compareTo(this.m)>=0;)t.subTo(this.m,t)},J.prototype.mulTo=function Ct(t,e,r){t.multiplyTo(e,r),this.reduce(r)},J.prototype.sqrTo=function Tt(t,e){t.squareTo(e),this.reduce(e)};var Rt=[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997],It=(1<<26)/Rt[Rt.length-1];
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Dt(){this.i=0,this.j=0,this.S=new Array}F.prototype.chunkSize=function Lt(t){return Math.floor(Math.LN2*this.DB/Math.log(t))},F.prototype.toRadix=function Nt(t){if(null==t&&(t=10),0==this.signum()||t<2||t>36)return"0";var e=this.chunkSize(t),r=Math.pow(t,e),n=D(r),i=E(),o=E(),s="";for(this.divRemTo(n,i,o);i.signum()>0;)s=(r+o.intValue()).toString(t).substr(1)+s,i.divRemTo(n,i,o);return o.intValue().toString(t)+s},F.prototype.fromRadix=function Ut(t,e){this.fromInt(0),null==e&&(e=10);for(var r=this.chunkSize(e),n=Math.pow(e,r),i=!1,o=0,s=0,a=0;a<t.length;++a){var u=I(t,a);u<0?"-"==t.charAt(a)&&0==this.signum()&&(i=!0):(s=e*s+u,++o>=r&&(this.dMultiply(n),this.dAddOffset(s,0),o=0,s=0))}o>0&&(this.dMultiply(Math.pow(e,o)),this.dAddOffset(s,0)),i&&F.ZERO.subTo(this,this)},F.prototype.fromNumber=function Bt(t,e,r){if("number"==typeof e)if(t<2)this.fromInt(1);else for(this.fromNumber(t,r),this.testBit(t-1)||this.bitwiseTo(F.ONE.shiftLeft(t-1),O,this),this.isEven()&&this.dAddOffset(1,0);!this.isProbablePrime(e);)this.dAddOffset(2,0),this.bitLength()>t&&this.subTo(F.ONE.shiftLeft(t-1),this);else{var n=new Array,i=7&t;n.length=1+(t>>3),e.nextBytes(n),i>0?n[0]&=(1<<i)-1:n[0]=0,this.fromString(n,256)}},F.prototype.bitwiseTo=function Ot(t,e,r){var n,i,o=Math.min(t.t,this.t);for(n=0;n<o;++n)r[n]=e(this[n],t[n]);if(t.t<this.t){for(i=t.s&this.DM,n=o;n<this.t;++n)r[n]=e(this[n],i);r.t=this.t}else{for(i=this.s&this.DM,n=o;n<t.t;++n)r[n]=e(i,t[n]);r.t=t.t}r.s=e(this.s,t.s),r.clamp()},F.prototype.changeBit=function jt(t,e){var r=F.ONE.shiftLeft(t);return this.bitwiseTo(r,e,r),r},F.prototype.addTo=function Mt(t,e){for(var r=0,n=0,i=Math.min(t.t,this.t);r<i;)n+=this[r]+t[r],e[r++]=n&this.DM,n>>=this.DB;if(t.t<this.t){for(n+=t.s;r<this.t;)n+=this[r],e[r++]=n&this.DM,n>>=this.DB;n+=this.s}else{for(n+=this.s;r<t.t;)n+=t[r],e[r++]=n&this.DM,n>>=this.DB;n+=t.s}e.s=n<0?-1:0,n>0?e[r++]=n:n<-1&&(e[r++]=this.DV+n),e.t=r,e.clamp()},F.prototype.dMultiply=function Ht(t){this[this.t]=this.am(0,t-1,this,0,0,this.t),++this.t,this.clamp()},F.prototype.dAddOffset=function Vt(t,e){if(0!=t){for(;this.t<=e;)this[this.t++]=0;for(this[e]+=t;this[e]>=this.DV;)this[e]-=this.DV,++e>=this.t&&(this[this.t++]=0),++this[e]}},F.prototype.multiplyLowerTo=function Kt(t,e,r){var n,i=Math.min(this.t+t.t,e);for(r.s=0,r.t=i;i>0;)r[--i]=0;for(n=r.t-this.t;i<n;++i)r[i+this.t]=this.am(0,t[i],r,i,0,this.t);for(n=Math.min(t.t,e);i<n;++i)this.am(0,t[i],r,i,0,e-i);r.clamp()},F.prototype.multiplyUpperTo=function qt(t,e,r){--e;var n=r.t=this.t+t.t-e;for(r.s=0;--n>=0;)r[n]=0;for(n=Math.max(e-this.t,0);n<t.t;++n)r[this.t+n-e]=this.am(e-n,t[n],r,0,0,this.t+n-e);r.clamp(),r.drShiftTo(1,r)},F.prototype.modInt=function Jt(t){if(t<=0)return 0;var e=this.DV%t,r=this.s<0?t-1:0;if(this.t>0)if(0==e)r=this[0]%t;else for(var n=this.t-1;n>=0;--n)r=(e*r+this[n])%t;return r},F.prototype.millerRabin=function Wt(t){var e=this.subtract(F.ONE),r=e.getLowestSetBit();if(r<=0)return!1;var n=e.shiftRight(r);(t=t+1>>1)>Rt.length&&(t=Rt.length);for(var i=E(),o=0;o<t;++o){i.fromInt(Rt[Math.floor(Math.random()*Rt.length)]);var s=i.modPow(n,this);if(0!=s.compareTo(F.ONE)&&0!=s.compareTo(e)){for(var a=1;a++<r&&0!=s.compareTo(e);)if(0==(s=s.modPowInt(2,this)).compareTo(F.ONE))return!1;if(0!=s.compareTo(e))return!1}}return!0},F.prototype.clone=
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function zt(){var t=E();return this.copyTo(t),t},F.prototype.intValue=function Yt(){if(this.s<0){if(1==this.t)return this[0]-this.DV;if(0==this.t)return-1}else{if(1==this.t)return this[0];if(0==this.t)return 0}return(this[1]&(1<<32-this.DB)-1)<<this.DB|this[0]},F.prototype.byteValue=function Gt(){return 0==this.t?this.s:this[0]<<24>>24},F.prototype.shortValue=function Xt(){return 0==this.t?this.s:this[0]<<16>>16},F.prototype.signum=function $t(){return this.s<0?-1:this.t<=0||1==this.t&&this[0]<=0?0:1},F.prototype.toByteArray=function Qt(){var t=this.t,e=new Array;e[0]=this.s;var r,n=this.DB-t*this.DB%8,i=0;if(t-- >0)for(n<this.DB&&(r=this[t]>>n)!=(this.s&this.DM)>>n&&(e[i++]=r|this.s<<this.DB-n);t>=0;)n<8?(r=(this[t]&(1<<n)-1)<<8-n,r|=this[--t]>>(n+=this.DB-8)):(r=this[t]>>(n-=8)&255,n<=0&&(n+=this.DB,--t)),0!=(128&r)&&(r|=-256),0==i&&(128&this.s)!=(128&r)&&++i,(i>0||r!=this.s)&&(e[i++]=r);return e},F.prototype.equals=function Zt(t){return 0==this.compareTo(t)},F.prototype.min=function te(t){return this.compareTo(t)<0?this:t},F.prototype.max=function ee(t){return this.compareTo(t)>0?this:t},F.prototype.and=function re(t){var e=E();return this.bitwiseTo(t,B,e),e},F.prototype.or=function ne(t){var e=E();return this.bitwiseTo(t,O,e),e},F.prototype.xor=function ie(t){var e=E();return this.bitwiseTo(t,j,e),e},F.prototype.andNot=function oe(t){var e=E();return this.bitwiseTo(t,M,e),e},F.prototype.not=function se(){for(var t=E(),e=0;e<this.t;++e)t[e]=this.DM&~this[e];return t.t=this.t,t.s=~this.s,t},F.prototype.shiftLeft=function ae(t){var e=E();return t<0?this.rShiftTo(-t,e):this.lShiftTo(t,e),e},F.prototype.shiftRight=function ue(t){var e=E();return t<0?this.lShiftTo(-t,e):this.rShiftTo(t,e),e},F.prototype.getLowestSetBit=function ce(){for(var t=0;t<this.t;++t)if(0!=this[t])return t*this.DB+H(this[t]);return this.s<0?this.t*this.DB:-1},F.prototype.bitCount=function he(){for(var t=0,e=this.s&this.DM,r=0;r<this.t;++r)t+=V(this[r]^e);return t},F.prototype.testBit=function le(t){var e=Math.floor(t/this.DB);return e>=this.t?0!=this.s:0!=(this[e]&1<<t%this.DB)},F.prototype.setBit=function fe(t){return this.changeBit(t,O)},F.prototype.clearBit=function ge(t){return this.changeBit(t,M)},F.prototype.flipBit=function de(t){return this.changeBit(t,j)},F.prototype.add=function pe(t){var e=E();return this.addTo(t,e),e},F.prototype.subtract=function ve(t){var e=E();return this.subTo(t,e),e},F.prototype.multiply=function ye(t){var e=E();return this.multiplyTo(t,e),e},F.prototype.divide=function me(t){var e=E();return this.divRemTo(t,e,null),e},F.prototype.remainder=function _e(t){var e=E();return this.divRemTo(t,null,e),e},F.prototype.divideAndRemainder=function Se(t){var e=E(),r=E();return this.divRemTo(t,e,r),new Array(e,r)},F.prototype.modPow=function be(t,e){var r,n,i=t.bitLength(),o=D(1);if(i<=0)return o;r=i<18?1:i<48?3:i<144?4:i<768?5:6,n=i<8?new N(e):e.isEven()?new J(e):new U(e);var s=new Array,a=3,u=r-1,c=(1<<r)-1;if(s[1]=n.convert(this),r>1){var h=E();for(n.sqrTo(s[1],h);a<=c;)s[a]=E(),n.mulTo(h,s[a-2],s[a]),a+=2}var l,f,g=t.t-1,d=!0,p=E();for(i=L(t[g])-1;g>=0;){for(i>=u?l=t[g]>>i-u&c:(l=(t[g]&(1<<i+1)-1)<<u-i,g>0&&(l|=t[g-1]>>this.DB+i-u)),a=r;0==(1&l);)l>>=1,--a;if((i-=a)<0&&(i+=this.DB,--g),d)s[l].copyTo(o),d=!1;else{for(;a>1;)n.sqrTo(o,p),n.sqrTo(p,o),a-=2;a>0?n.sqrTo(o,p):(f=o,o=p,p=f),n.mulTo(p,s[l],o)}for(;g>=0&&0==(t[g]&1<<i);)n.sqrTo(o,p),f=o,o=p,p=f,--i<0&&(i=this.DB-1,--g)}return n.revert(o)},F.prototype.modInverse=function we(t){var e=t.isEven();if(this.isEven()&&e||0==t.signum())return F.ZERO;for(var r=t.clone(),n=this.clone(),i=D(1),o=D(0),s=D(0),a=D(1);0!=r.signum();){for(;r.isEven();)r.rShiftTo(1,r),e?(i.isEven()&&o.isEven()||(i.addTo(this,i),o.subTo(t,o)),i.rShiftTo(1,i)):o.isEven()||o.subTo(t,o),o.rShiftTo(1,o);for(;n.isEven();)n.rShiftTo(1,n),e?(s.isEven()&&a.isEven()||(s.addTo(this,s),a.subTo(t,a)),s.rShiftTo(1,s)):a.isEven()||a.subTo(t,a),a.rShiftTo(1,a);r.compareTo(n)>=0?(r.subTo(n,r),e&&i.subTo(s,i),o.subTo(a,o)):(n.subTo(r,n),e&&s.subTo(i,s),a.subTo(o,a))}return 0!=n.compareTo(F.ONE)?F.ZERO:a.compareTo(t)>=0?a.subtract(t):a.signum()<0?(a.addTo(t,a),a.signum()<0?a.add(t):a):a},F.prototype.pow=function Fe(t){return this.exp(t,new K)},F.prototype.gcd=function Ee(t){var e=this.s<0?this.negate():this.clone(),r=t.s<0?t.negate():t.clone();if(e.compareTo(r)<0){var n=e;e=r,r=n}var i=e.getLowestSetBit(),o=r.getLowestSetBit();if(o<0)return e;for(i<o&&(o=i),o>0&&(e.rShiftTo(o,e),r.rShiftTo(o,r));e.signum()>0;)(i=e.getLowestSetBit())>0&&e.rShiftTo(i,e),(i=r.getLowestSetBit())>0&&r.rShiftTo(i,r),e.compareTo(r)>=0?(e.subTo(r,e),e.rShiftTo(1,e)):(r.subTo(e,r),r.rShiftTo(1,r));return o>0&&r.lShiftTo(o,r),r},F.prototype.isProbablePrime=function xe(t){var e,r=this.abs();if(1==r.t&&r[0]<=Rt[Rt.length-1]){for(e=0;e<Rt.length;++e)if(r[0]==Rt[e])return!0;return!1}if(r.isEven())return!1;for(e=1;e<Rt.length;){for(var n=Rt[e],i=e+1;i<Rt.length&&n<It;)n*=Rt[i++];for(n=r.modInt(n);e<i;)if(n%Rt[e++]==0)return!1}return r.millerRabin(t)},F.prototype.square=function Ae(){var t=E();return this.squareTo(t),t},Dt.prototype.init=function ke(t){var e,r,n;for(e=0;e<256;++e)this.S[e]=e;for(r=0,e=0;e<256;++e)r=r+this.S[e]+t[e%t.length]&255,n=this.S[e],this.S[e]=this.S[r],this.S[r]=n;this.i=0,this.j=0},Dt.prototype.next=function Pe(){var t;return this.i=this.i+1&255,this.j=this.j+this.S[this.i]&255,t=this.S[this.i],this.S[this.i]=this.S[this.j],this.S[this.j]=t,this.S[t+this.S[this.i]&255]};var Ce,Te,Re;
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */function Ie(){!function t(e){Te[Re++]^=255&e,Te[Re++]^=e>>8&255,Te[Re++]^=e>>16&255,Te[Re++]^=e>>24&255,Re>=256&&(Re-=256)}((new Date).getTime())}if(null==Te){var De;if(Te=new Array,Re=0,void 0!==i&&(void 0!==i.crypto||void 0!==i.msCrypto)){var Le=i.crypto||i.msCrypto;if(Le.getRandomValues){var Ne=new Uint8Array(32);for(Le.getRandomValues(Ne),De=0;De<32;++De)Te[Re++]=Ne[De]}else if("Netscape"==n.appName&&n.appVersion<"5"){var Ue=i.crypto.random(32);for(De=0;De<Ue.length;++De)Te[Re++]=255&Ue.charCodeAt(De)}}for(;Re<256;)De=Math.floor(65536*Math.random()),Te[Re++]=De>>>8,Te[Re++]=255&De;Re=0,Ie()}function Be(){if(null==Ce){for(Ie(),(Ce=function t(){return new Dt}()).init(Te),Re=0;Re<Te.length;++Re)Te[Re]=0;Re=0}return Ce.next()}function Oe(){}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function je(t,e){return new F(t,e)}function Me(t,e,r){for(var n="",i=0;n.length<e;)n+=r(String.fromCharCode.apply(String,t.concat([(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i]))),i+=1;return n}function He(){this.n=null,this.e=0,this.d=null,this.p=null,this.q=null,this.dmp1=null,this.dmq1=null,this.coeff=null}
/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/
 */
function Ve(t,e){this.x=e,this.q=t}function Ke(t,e,r,n){this.curve=t,this.x=e,this.y=r,this.z=null==n?F.ONE:n,this.zinv=null}function qe(t,e,r){this.q=t,this.a=this.fromBigInteger(e),this.b=this.fromBigInteger(r),this.infinity=new Ke(this,null,null)}Oe.prototype.nextBytes=function Je(t){var e;for(e=0;e<t.length;++e)t[e]=Be()},He.prototype.doPublic=function We(t){return t.modPowInt(this.e,this.n)},He.prototype.setPublic=function ze(t,e){if(this.isPublic=!0,this.isPrivate=!1,"string"!=typeof t)this.n=t,this.e=e;else{if(!(null!=t&&null!=e&&t.length>0&&e.length>0))throw"Invalid RSA public key";this.n=je(t,16),this.e=parseInt(e,16)}},He.prototype.encrypt=function Ye(t){var e=function r(t,e){if(e<t.length+11)throw"Message too long for RSA";for(var r=new Array,n=t.length-1;n>=0&&e>0;){var i=t.charCodeAt(n--);i<128?r[--e]=i:i>127&&i<2048?(r[--e]=63&i|128,r[--e]=i>>6|192):(r[--e]=63&i|128,r[--e]=i>>6&63|128,r[--e]=i>>12|224)}r[--e]=0;for(var o=new Oe,s=new Array;e>2;){for(s[0]=0;0==s[0];)o.nextBytes(s);r[--e]=s[0]}return r[--e]=2,r[--e]=0,new F(r)}(t,this.n.bitLength()+7>>3);if(null==e)return null;var n=this.doPublic(e);if(null==n)return null;var i=n.toString(16);return 0==(1&i.length)?i:"0"+i},He.prototype.encryptOAEP=function Ge(t,e,r){var n=function i(t,e,r,n){var i=br.crypto.MessageDigest,o=br.crypto.Util,s=null;if(r||(r="sha1"),"string"==typeof r&&(s=i.getCanonicalAlgName(r),n=i.getHashLength(s),r=function t(e){return Nr(o.hashHex(Ur(e),s))}),t.length+2*n+2>e)throw"Message too long for RSA";var a,u="";for(a=0;a<e-t.length-2*n-2;a+=1)u+="\0";var c=r("")+u+""+t,h=new Array(n);(new Oe).nextBytes(h);var l=Me(h,c.length,r),f=[];for(a=0;a<c.length;a+=1)f[a]=c.charCodeAt(a)^l.charCodeAt(a);var g=Me(f,h.length,r),d=[0];for(a=0;a<h.length;a+=1)d[a+1]=h[a]^g.charCodeAt(a);return new F(d.concat(f))}(t,this.n.bitLength()+7>>3,e,r);if(null==n)return null;var o=this.doPublic(n);if(null==o)return null;var s=o.toString(16);return 0==(1&s.length)?s:"0"+s},He.prototype.type="RSA",Ve.prototype.equals=function Xe(t){return t==this||this.q.equals(t.q)&&this.x.equals(t.x)},Ve.prototype.toBigInteger=function $e(){return this.x},Ve.prototype.negate=function Qe(){return new Ve(this.q,this.x.negate().mod(this.q))},Ve.prototype.add=function Ze(t){return new Ve(this.q,this.x.add(t.toBigInteger()).mod(this.q))},Ve.prototype.subtract=function tr(t){return new Ve(this.q,this.x.subtract(t.toBigInteger()).mod(this.q))},Ve.prototype.multiply=function er(t){return new Ve(this.q,this.x.multiply(t.toBigInteger()).mod(this.q))},Ve.prototype.square=function rr(){return new Ve(this.q,this.x.square().mod(this.q))},Ve.prototype.divide=function nr(t){return new Ve(this.q,this.x.multiply(t.toBigInteger().modInverse(this.q)).mod(this.q))},Ke.prototype.getX=function ir(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ke.prototype.getY=function or(){return null==this.zinv&&(this.zinv=this.z.modInverse(this.curve.q)),this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q))},Ke.prototype.equals=function sr(t){return t==this||(this.isInfinity()?t.isInfinity():t.isInfinity()?this.isInfinity():!!t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(F.ZERO)&&t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q).equals(F.ZERO))},Ke.prototype.isInfinity=function ar(){return null==this.x&&null==this.y||this.z.equals(F.ZERO)&&!this.y.toBigInteger().equals(F.ZERO)},Ke.prototype.negate=function ur(){return new Ke(this.curve,this.x,this.y.negate(),this.z)},Ke.prototype.add=function cr(t){if(this.isInfinity())return t;if(t.isInfinity())return this;var e=t.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(t.z)).mod(this.curve.q),r=t.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(t.z)).mod(this.curve.q);if(F.ZERO.equals(r))return F.ZERO.equals(e)?this.twice():this.curve.getInfinity();var n=new F("3"),i=this.x.toBigInteger(),o=this.y.toBigInteger(),s=(t.x.toBigInteger(),t.y.toBigInteger(),r.square()),a=s.multiply(r),u=i.multiply(s),c=e.square().multiply(this.z),h=c.subtract(u.shiftLeft(1)).multiply(t.z).subtract(a).multiply(r).mod(this.curve.q),l=u.multiply(n).multiply(e).subtract(o.multiply(a)).subtract(c.multiply(e)).multiply(t.z).add(e.multiply(a)).mod(this.curve.q),f=a.multiply(this.z).multiply(t.z).mod(this.curve.q);return new Ke(this.curve,this.curve.fromBigInteger(h),this.curve.fromBigInteger(l),f)},Ke.prototype.twice=function hr(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=new F("3"),e=this.x.toBigInteger(),r=this.y.toBigInteger(),n=r.multiply(this.z),i=n.multiply(r).mod(this.curve.q),o=this.curve.a.toBigInteger(),s=e.square().multiply(t);F.ZERO.equals(o)||(s=s.add(this.z.square().multiply(o)));var a=(s=s.mod(this.curve.q)).square().subtract(e.shiftLeft(3).multiply(i)).shiftLeft(1).multiply(n).mod(this.curve.q),u=s.multiply(t).multiply(e).subtract(i.shiftLeft(1)).shiftLeft(2).multiply(i).subtract(s.square().multiply(s)).mod(this.curve.q),c=n.square().multiply(n).shiftLeft(3).mod(this.curve.q);return new Ke(this.curve,this.curve.fromBigInteger(a),this.curve.fromBigInteger(u),c)},Ke.prototype.multiply=function lr(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new F("3")),i=this.negate(),o=this,s=this.curve.q.subtract(t),a=s.multiply(new F("3")),u=new Ke(this.curve,this.x,this.y),c=u.negate();for(e=n.bitLength()-2;e>0;--e){o=o.twice();var h=n.testBit(e);h!=r.testBit(e)&&(o=o.add(h?this:i))}for(e=a.bitLength()-2;e>0;--e){u=u.twice();var l=a.testBit(e);l!=s.testBit(e)&&(u=u.add(l?u:c))}return o},Ke.prototype.multiplyTwo=function fr(t,e,r){var n;n=t.bitLength()>r.bitLength()?t.bitLength()-1:r.bitLength()-1;for(var i=this.curve.getInfinity(),o=this.add(e);n>=0;)i=i.twice(),t.testBit(n)?i=r.testBit(n)?i.add(o):i.add(this):r.testBit(n)&&(i=i.add(e)),--n;return i},qe.prototype.getQ=function gr(){return this.q},qe.prototype.getA=function dr(){return this.a},qe.prototype.getB=function pr(){return this.b},qe.prototype.equals=function vr(t){return t==this||this.q.equals(t.q)&&this.a.equals(t.a)&&this.b.equals(t.b)},qe.prototype.getInfinity=function yr(){return this.infinity},qe.prototype.fromBigInteger=function mr(t){return new Ve(this.q,t)},qe.prototype.decodePointHex=function _r(t){switch(parseInt(t.substr(0,2),16)){case 0:return this.infinity;case 2:case 3:return null;case 4:case 6:case 7:var e=(t.length-2)/2,r=t.substr(2,e),n=t.substr(e+2,e);return new Ke(this,this.fromBigInteger(new F(r,16)),this.fromBigInteger(new F(n,16)));default:return null}},
/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib
 */
Ve.prototype.getByteLength=function(){return Math.floor((this.toBigInteger().bitLength()+7)/8)},Ke.prototype.getEncoded=function(t){var e=function t(e,r){var n=e.toByteArrayUnsigned();if(r<n.length)n=n.slice(n.length-r);else for(;r>n.length;)n.unshift(0);return n},r=this.getX().toBigInteger(),n=this.getY().toBigInteger(),i=e(r,32);return t?n.isEven()?i.unshift(2):i.unshift(3):(i.unshift(4),i=i.concat(e(n,32))),i},Ke.decodeFrom=function(t,e){e[0];var r=e.length-1,n=e.slice(1,1+r/2),i=e.slice(1+r/2,1+r);n.unshift(0),i.unshift(0);var o=new F(n),s=new F(i);return new Ke(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ke.decodeFromHex=function(t,e){e.substr(0,2);var r=e.length-2,n=e.substr(2,r/2),i=e.substr(2+r/2,r/2),o=new F(n,16),s=new F(i,16);return new Ke(t,t.fromBigInteger(o),t.fromBigInteger(s))},Ke.prototype.add2D=function(t){if(this.isInfinity())return t;if(t.isInfinity())return this;if(this.x.equals(t.x))return this.y.equals(t.y)?this.twice():this.curve.getInfinity();var e=t.x.subtract(this.x),r=t.y.subtract(this.y).divide(e),n=r.square().subtract(this.x).subtract(t.x),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ke(this.curve,n,i)},Ke.prototype.twice2D=function(){if(this.isInfinity())return this;if(0==this.y.toBigInteger().signum())return this.curve.getInfinity();var t=this.curve.fromBigInteger(F.valueOf(2)),e=this.curve.fromBigInteger(F.valueOf(3)),r=this.x.square().multiply(e).add(this.curve.a).divide(this.y.multiply(t)),n=r.square().subtract(this.x.multiply(t)),i=r.multiply(this.x.subtract(n)).subtract(this.y);return new Ke(this.curve,n,i)},Ke.prototype.multiply2D=function(t){if(this.isInfinity())return this;if(0==t.signum())return this.curve.getInfinity();var e,r=t,n=r.multiply(new F("3")),i=this.negate(),o=this;for(e=n.bitLength()-2;e>0;--e){o=o.twice();var s=n.testBit(e);s!=r.testBit(e)&&(o=o.add2D(s?this:i))}return o},Ke.prototype.isOnCurve=function(){var t=this.getX().toBigInteger(),e=this.getY().toBigInteger(),r=this.curve.getA().toBigInteger(),n=this.curve.getB().toBigInteger(),i=this.curve.getQ(),o=e.multiply(e).mod(i),s=t.multiply(t).multiply(t).add(r.multiply(t)).add(n).mod(i);return o.equals(s)},Ke.prototype.toString=function(){return"("+this.getX().toBigInteger().toString()+","+this.getY().toBigInteger().toString()+")"},Ke.prototype.validate=function(){var t=this.curve.getQ();if(this.isInfinity())throw new Error("Point is at infinity.");var e=this.getX().toBigInteger(),r=this.getY().toBigInteger();if(e.compareTo(F.ONE)<0||e.compareTo(t.subtract(F.ONE))>0)throw new Error("x coordinate out of bounds");if(r.compareTo(F.ONE)<0||r.compareTo(t.subtract(F.ONE))>0)throw new Error("y coordinate out of bounds");if(!this.isOnCurve())throw new Error("Point is not on the curve.");if(this.multiply(t).isInfinity())throw new Error("Point is not a scalar multiple of G.");return!0};
/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval
 */
var Sr=function(){var t=new RegExp('(?:false|true|null|[\\{\\}\\[\\]]|(?:-?\\b(?:0|[1-9][0-9]*)(?:\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\b)|(?:"(?:[^\\0-\\x08\\x0a-\\x1f"\\\\]|\\\\(?:["/\\\\bfnrt]|u[0-9A-Fa-f]{4}))*"))',"g"),e=new RegExp("\\\\(?:([^u])|u(.{4}))","g"),n={'"':'"',"/":"/","\\":"\\",b:"\b",f:"\f",n:"\n",r:"\r",t:"\t"};function i(t,e,r){return e?n[e]:String.fromCharCode(parseInt(r,16))}var o=new String(""),s=Object.hasOwnProperty;return function(n,a){var u,c,h=n.match(t),l=h[0],f=!1;"{"===l?u={}:"["===l?u=[]:(u=[],f=!0);for(var g=[u],d=1-f,p=h.length;d<p;++d){var v;switch((l=h[d]).charCodeAt(0)){default:(v=g[0])[c||v.length]=+l,c=void 0;break;case 34:if(-1!==(l=l.substring(1,l.length-1)).indexOf("\\")&&(l=l.replace(e,i)),v=g[0],!c){if(!(v instanceof Array)){c=l||o;break}c=v.length}v[c]=l,c=void 0;break;case 91:v=g[0],g.unshift(v[c||v.length]=[]),c=void 0;break;case 93:g.shift();break;case 102:(v=g[0])[c||v.length]=!1,c=void 0;break;case 110:(v=g[0])[c||v.length]=null,c=void 0;break;case 116:(v=g[0])[c||v.length]=!0,c=void 0;break;case 123:v=g[0],g.unshift(v[c||v.length]={}),c=void 0;break;case 125:g.shift()}}if(f){if(1!==g.length)throw new Error;u=u[0]}else if(g.length)throw new Error;if(a){u=function t(e,n){var i=e[n];if(i&&"object"===(void 0===i?"undefined":r(i))){var o=null;for(var u in i)if(s.call(i,u)&&i!==e){var c=t(i,u);void 0!==c?i[u]=c:(o||(o=[]),o.push(u))}if(o)for(var h=o.length;--h>=0;)delete i[o[h]]}return a.call(e,n,i)}({"":u},"")}return u}}();void 0!==br&&br||(e.KJUR=br={}),void 0!==br.asn1&&br.asn1||(br.asn1={}),br.asn1.ASN1Util=new function(){this.integerToByteHex=function(t){var e=t.toString(16);return e.length%2==1&&(e="0"+e),e},this.bigIntToMinTwosComplementsHex=function(t){var e=t.toString(16);if("-"!=e.substr(0,1))e.length%2==1?e="0"+e:e.match(/^[0-7]/)||(e="00"+e);else{var r=e.substr(1).length;r%2==1?r+=1:e.match(/^[0-7]/)||(r+=2);for(var n="",i=0;i<r;i++)n+="f";e=new F(n,16).xor(t).add(F.ONE).toString(16).replace(/^-/,"")}return e},this.getPEMStringFromHex=function(t,e){return Mr(t,e)},this.newObject=function(t){var e=br.asn1,r=e.ASN1Object,n=e.DERBoolean,i=e.DERInteger,o=e.DERBitString,s=e.DEROctetString,a=e.DERNull,u=e.DERObjectIdentifier,c=e.DEREnumerated,h=e.DERUTF8String,l=e.DERNumericString,f=e.DERPrintableString,g=e.DERTeletexString,d=e.DERIA5String,p=e.DERUTCTime,v=e.DERGeneralizedTime,y=e.DERVisibleString,m=e.DERBMPString,_=e.DERSequence,S=e.DERSet,b=e.DERTaggedObject,w=e.ASN1Util.newObject;if(t instanceof e.ASN1Object)return t;var F=Object.keys(t);if(1!=F.length)throw new Error("key of param shall be only one.");var E=F[0];if(-1==":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:".indexOf(":"+E+":"))throw new Error("undefined key: "+E);if("bool"==E)return new n(t[E]);if("int"==E)return new i(t[E]);if("bitstr"==E)return new o(t[E]);if("octstr"==E)return new s(t[E]);if("null"==E)return new a(t[E]);if("oid"==E)return new u(t[E]);if("enum"==E)return new c(t[E]);if("utf8str"==E)return new h(t[E]);if("numstr"==E)return new l(t[E]);if("prnstr"==E)return new f(t[E]);if("telstr"==E)return new g(t[E]);if("ia5str"==E)return new d(t[E]);if("utctime"==E)return new p(t[E]);if("gentime"==E)return new v(t[E]);if("visstr"==E)return new y(t[E]);if("bmpstr"==E)return new m(t[E]);if("asn1"==E)return new r(t[E]);if("seq"==E){for(var x=t[E],A=[],k=0;k<x.length;k++){var P=w(x[k]);A.push(P)}return new _({array:A})}if("set"==E){for(x=t[E],A=[],k=0;k<x.length;k++){P=w(x[k]);A.push(P)}return new S({array:A})}if("tag"==E){var C=t[E];if("[object Array]"===Object.prototype.toString.call(C)&&3==C.length){var T=w(C[2]);return new b({tag:C[0],explicit:C[1],obj:T})}return new b(C)}},this.jsonToASN1HEX=function(t){return this.newObject(t).getEncodedHex()}},br.asn1.ASN1Util.oidHexToInt=function(t){for(var e="",r=parseInt(t.substr(0,2),16),n=(e=Math.floor(r/40)+"."+r%40,""),i=2;i<t.length;i+=2){var o=("00000000"+parseInt(t.substr(i,2),16).toString(2)).slice(-8);if(n+=o.substr(1,7),"0"==o.substr(0,1))e=e+"."+new F(n,2).toString(10),n=""}return e},br.asn1.ASN1Util.oidIntToHex=function(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=new F(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};if(!t.match(/^[0-9.]+$/))throw"malformed oid string: "+t;var n="",i=t.split("."),o=40*parseInt(i[0])+parseInt(i[1]);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n},br.asn1.ASN1Object=function(t){this.params=null,this.getLengthHexFromValue=function(){if(void 0===this.hV||null==this.hV)throw new Error("this.hV is null or undefined");if(this.hV.length%2==1)throw new Error("value hex must be even length: n="+"".length+",v="+this.hV);var t=this.hV.length/2,e=t.toString(16);if(e.length%2==1&&(e="0"+e),t<128)return e;var r=e.length/2;if(r>15)throw"ASN.1 length too long to represent by 8x: n = "+t.toString(16);return(128+r).toString(16)+e},this.getEncodedHex=function(){return(null==this.hTLV||this.isModified)&&(this.hV=this.getFreshValueHex(),this.hL=this.getLengthHexFromValue(),this.hTLV=this.hT+this.hL+this.hV,this.isModified=!1),this.hTLV},this.getValueHex=function(){return this.getEncodedHex(),this.hV},this.getFreshValueHex=function(){return""},this.setByParam=function(t){this.params=t},null!=t&&null!=t.tlv&&(this.hTLV=t.tlv,this.isModified=!1)},br.asn1.DERAbstractString=function(t){br.asn1.DERAbstractString.superclass.constructor.call(this);this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=Dr(this.s).toLowerCase()},this.setStringHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t?this.setString(t):void 0!==t.str?this.setString(t.str):void 0!==t.hex&&this.setStringHex(t.hex))},o.lang.extend(br.asn1.DERAbstractString,br.asn1.ASN1Object),br.asn1.DERAbstractTime=function(t){br.asn1.DERAbstractTime.superclass.constructor.call(this);this.localDateToUTC=function(t){var e=t.getTime()+6e4*t.getTimezoneOffset();return new Date(e)},this.formatDate=function(t,e,r){var n=this.zeroPadding,i=this.localDateToUTC(t),o=String(i.getFullYear());"utc"==e&&(o=o.substr(2,2));var s=o+n(String(i.getMonth()+1),2)+n(String(i.getDate()),2)+n(String(i.getHours()),2)+n(String(i.getMinutes()),2)+n(String(i.getSeconds()),2);if(!0===r){var a=i.getMilliseconds();if(0!=a){var u=n(String(a),3);s=s+"."+(u=u.replace(/[0]+$/,""))}}return s+"Z"},this.zeroPadding=function(t,e){return t.length>=e?t:new Array(e-t.length+1).join("0")+t},this.getString=function(){return this.s},this.setString=function(t){this.hTLV=null,this.isModified=!0,this.s=t,this.hV=Pr(t)},this.setByDateValue=function(t,e,r,n,i,o){var s=new Date(Date.UTC(t,e-1,r,n,i,o,0));this.setByDate(s)},this.getFreshValueHex=function(){return this.hV}},o.lang.extend(br.asn1.DERAbstractTime,br.asn1.ASN1Object),br.asn1.DERAbstractStructured=function(t){br.asn1.DERAbstractString.superclass.constructor.call(this);this.setByASN1ObjectArray=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array=t},this.appendASN1Object=function(t){this.hTLV=null,this.isModified=!0,this.asn1Array.push(t)},this.asn1Array=new Array,void 0!==t&&void 0!==t.array&&(this.asn1Array=t.array)},o.lang.extend(br.asn1.DERAbstractStructured,br.asn1.ASN1Object),br.asn1.DERBoolean=function(t){br.asn1.DERBoolean.superclass.constructor.call(this),this.hT="01",this.hTLV=0==t?"010100":"0101ff"},o.lang.extend(br.asn1.DERBoolean,br.asn1.ASN1Object),br.asn1.DERInteger=function(t){br.asn1.DERInteger.superclass.constructor.call(this),this.hT="02",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=br.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new F(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.bigint?this.setByBigInteger(t.bigint):void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},o.lang.extend(br.asn1.DERInteger,br.asn1.ASN1Object),br.asn1.DERBitString=function(t){if(void 0!==t&&void 0!==t.obj){var e=br.asn1.ASN1Util.newObject(t.obj);t.hex="00"+e.getEncodedHex()}br.asn1.DERBitString.superclass.constructor.call(this),this.hT="03",this.setHexValueIncludingUnusedBits=function(t){this.hTLV=null,this.isModified=!0,this.hV=t},this.setUnusedBitsAndHexValue=function(t,e){if(t<0||7<t)throw"unused bits shall be from 0 to 7: u = "+t;var r="0"+t;this.hTLV=null,this.isModified=!0,this.hV=r+e},this.setByBinaryString=function(t){var e=8-(t=t.replace(/0+$/,"")).length%8;8==e&&(e=0);for(var r=0;r<=e;r++)t+="0";var n="";for(r=0;r<t.length-1;r+=8){var i=t.substr(r,8),o=parseInt(i,2).toString(16);1==o.length&&(o="0"+o),n+=o}this.hTLV=null,this.isModified=!0,this.hV="0"+e+n},this.setByBooleanArray=function(t){for(var e="",r=0;r<t.length;r++)1==t[r]?e+="1":e+="0";this.setByBinaryString(e)},this.newFalseArray=function(t){for(var e=new Array(t),r=0;r<t;r++)e[r]=!1;return e},this.getFreshValueHex=function(){return this.hV},void 0!==t&&("string"==typeof t&&t.toLowerCase().match(/^[0-9a-f]+$/)?this.setHexValueIncludingUnusedBits(t):void 0!==t.hex?this.setHexValueIncludingUnusedBits(t.hex):void 0!==t.bin?this.setByBinaryString(t.bin):void 0!==t.array&&this.setByBooleanArray(t.array))},o.lang.extend(br.asn1.DERBitString,br.asn1.ASN1Object),br.asn1.DEROctetString=function(t){if(void 0!==t&&void 0!==t.obj){var e=br.asn1.ASN1Util.newObject(t.obj);t.hex=e.getEncodedHex()}br.asn1.DEROctetString.superclass.constructor.call(this,t),this.hT="04"},o.lang.extend(br.asn1.DEROctetString,br.asn1.DERAbstractString),br.asn1.DERNull=function(){br.asn1.DERNull.superclass.constructor.call(this),this.hT="05",this.hTLV="0500"},o.lang.extend(br.asn1.DERNull,br.asn1.ASN1Object),br.asn1.DERObjectIdentifier=function(t){br.asn1.DERObjectIdentifier.superclass.constructor.call(this),this.hT="06",this.setValueHex=function(t){this.hTLV=null,this.isModified=!0,this.s=null,this.hV=t},this.setValueOidString=function(t){var e=function r(t){var e=function t(e){var r=e.toString(16);return 1==r.length&&(r="0"+r),r},r=function t(r){var n="",i=parseInt(r,10).toString(2),o=7-i.length%7;7==o&&(o=0);for(var s="",a=0;a<o;a++)s+="0";i=s+i;for(a=0;a<i.length-1;a+=7){var u=i.substr(a,7);a!=i.length-7&&(u="1"+u),n+=e(parseInt(u,2))}return n};try{if(!t.match(/^[0-9.]+$/))return null;var n="",i=t.split("."),o=40*parseInt(i[0],10)+parseInt(i[1],10);n+=e(o),i.splice(0,2);for(var s=0;s<i.length;s++)n+=r(i[s]);return n}catch(t){return null}}(t);if(null==e)throw new Error("malformed oid string: "+t);this.hTLV=null,this.isModified=!0,this.s=null,this.hV=e},this.setValueName=function(t){var e=br.asn1.x509.OID.name2oid(t);if(""===e)throw new Error("DERObjectIdentifier oidName undefined: "+t);this.setValueOidString(e)},this.setValueNameOrOid=function(t){t.match(/^[0-2].[0-9.]+$/)?this.setValueOidString(t):this.setValueName(t)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){"string"==typeof t?this.setValueNameOrOid(t):void 0!==t.oid?this.setValueNameOrOid(t.oid):void 0!==t.name?this.setValueNameOrOid(t.name):void 0!==t.hex&&this.setValueHex(t.hex)},void 0!==t&&this.setByParam(t)},o.lang.extend(br.asn1.DERObjectIdentifier,br.asn1.ASN1Object),br.asn1.DEREnumerated=function(t){br.asn1.DEREnumerated.superclass.constructor.call(this),this.hT="0a",this.setByBigInteger=function(t){this.hTLV=null,this.isModified=!0,this.hV=br.asn1.ASN1Util.bigIntToMinTwosComplementsHex(t)},this.setByInteger=function(t){var e=new F(String(t),10);this.setByBigInteger(e)},this.setValueHex=function(t){this.hV=t},this.getFreshValueHex=function(){return this.hV},void 0!==t&&(void 0!==t.int?this.setByInteger(t.int):"number"==typeof t?this.setByInteger(t):void 0!==t.hex&&this.setValueHex(t.hex))},o.lang.extend(br.asn1.DEREnumerated,br.asn1.ASN1Object),br.asn1.DERUTF8String=function(t){br.asn1.DERUTF8String.superclass.constructor.call(this,t),this.hT="0c"},o.lang.extend(br.asn1.DERUTF8String,br.asn1.DERAbstractString),br.asn1.DERNumericString=function(t){br.asn1.DERNumericString.superclass.constructor.call(this,t),this.hT="12"},o.lang.extend(br.asn1.DERNumericString,br.asn1.DERAbstractString),br.asn1.DERPrintableString=function(t){br.asn1.DERPrintableString.superclass.constructor.call(this,t),this.hT="13"},o.lang.extend(br.asn1.DERPrintableString,br.asn1.DERAbstractString),br.asn1.DERTeletexString=function(t){br.asn1.DERTeletexString.superclass.constructor.call(this,t),this.hT="14"},o.lang.extend(br.asn1.DERTeletexString,br.asn1.DERAbstractString),br.asn1.DERIA5String=function(t){br.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="16"},o.lang.extend(br.asn1.DERIA5String,br.asn1.DERAbstractString),br.asn1.DERVisibleString=function(t){br.asn1.DERIA5String.superclass.constructor.call(this,t),this.hT="1a"},o.lang.extend(br.asn1.DERVisibleString,br.asn1.DERAbstractString),br.asn1.DERBMPString=function(t){br.asn1.DERBMPString.superclass.constructor.call(this,t),this.hT="1e"},o.lang.extend(br.asn1.DERBMPString,br.asn1.DERAbstractString),br.asn1.DERUTCTime=function(t){br.asn1.DERUTCTime.superclass.constructor.call(this,t),this.hT="17",this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"utc"),this.hV=Pr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"utc"),this.hV=Pr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{12}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date))},o.lang.extend(br.asn1.DERUTCTime,br.asn1.DERAbstractTime),br.asn1.DERGeneralizedTime=function(t){br.asn1.DERGeneralizedTime.superclass.constructor.call(this,t),this.hT="18",this.withMillis=!1,this.setByDate=function(t){this.hTLV=null,this.isModified=!0,this.date=t,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=Pr(this.s)},this.getFreshValueHex=function(){return void 0===this.date&&void 0===this.s&&(this.date=new Date,this.s=this.formatDate(this.date,"gen",this.withMillis),this.hV=Pr(this.s)),this.hV},void 0!==t&&(void 0!==t.str?this.setString(t.str):"string"==typeof t&&t.match(/^[0-9]{14}Z$/)?this.setString(t):void 0!==t.hex?this.setStringHex(t.hex):void 0!==t.date&&this.setByDate(t.date),!0===t.millis&&(this.withMillis=!0))},o.lang.extend(br.asn1.DERGeneralizedTime,br.asn1.DERAbstractTime),br.asn1.DERSequence=function(t){br.asn1.DERSequence.superclass.constructor.call(this,t),this.hT="30",this.getFreshValueHex=function(){for(var t="",e=0;e<this.asn1Array.length;e++){t+=this.asn1Array[e].getEncodedHex()}return this.hV=t,this.hV}},o.lang.extend(br.asn1.DERSequence,br.asn1.DERAbstractStructured),br.asn1.DERSet=function(t){br.asn1.DERSet.superclass.constructor.call(this,t),this.hT="31",this.sortFlag=!0,this.getFreshValueHex=function(){for(var t=new Array,e=0;e<this.asn1Array.length;e++){var r=this.asn1Array[e];t.push(r.getEncodedHex())}return 1==this.sortFlag&&t.sort(),this.hV=t.join(""),this.hV},void 0!==t&&void 0!==t.sortflag&&0==t.sortflag&&(this.sortFlag=!1)},o.lang.extend(br.asn1.DERSet,br.asn1.DERAbstractStructured),br.asn1.DERTaggedObject=function(t){br.asn1.DERTaggedObject.superclass.constructor.call(this);var e=br.asn1;this.hT="a0",this.hV="",this.isExplicit=!0,this.asn1Object=null,this.setASN1Object=function(t,e,r){this.hT=e,this.isExplicit=t,this.asn1Object=r,this.isExplicit?(this.hV=this.asn1Object.getEncodedHex(),this.hTLV=null,this.isModified=!0):(this.hV=null,this.hTLV=r.getEncodedHex(),this.hTLV=this.hTLV.replace(/^../,e),this.isModified=!1)},this.getFreshValueHex=function(){return this.hV},this.setByParam=function(t){null!=t.tag&&(this.hT=t.tag),null!=t.explicit&&(this.isExplicit=t.explicit),null!=t.tage&&(this.hT=t.tage,this.isExplicit=!0),null!=t.tagi&&(this.hT=t.tagi,this.isExplicit=!1),null!=t.obj&&(t.obj instanceof e.ASN1Object?(this.asn1Object=t.obj,this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)):"object"==r(t.obj)&&(this.asn1Object=e.ASN1Util.newObject(t.obj),this.setASN1Object(this.isExplicit,this.hT,this.asn1Object)))},null!=t&&this.setByParam(t)},o.lang.extend(br.asn1.DERTaggedObject,br.asn1.ASN1Object);var br,wr,Fr,Er=new function(){};function xr(t){for(var e=new Array,r=0;r<t.length;r++)e[r]=t.charCodeAt(r);return e}function Ar(t){for(var e="",r=0;r<t.length;r++)e+=String.fromCharCode(t[r]);return e}function kr(t){for(var e="",r=0;r<t.length;r++){var n=t[r].toString(16);1==n.length&&(n="0"+n),e+=n}return e}function Pr(t){return kr(xr(t))}function Cr(t){return t=(t=(t=t.replace(/\=/g,"")).replace(/\+/g,"-")).replace(/\//g,"_")}function Tr(t){return t.length%4==2?t+="==":t.length%4==3&&(t+="="),t=(t=t.replace(/-/g,"+")).replace(/_/g,"/")}function Rr(t){return t.length%2==1&&(t="0"+t),Cr(S(t))}function Ir(t){return b(Tr(t))}function Dr(t){return qr(Gr(t))}function Lr(t){return decodeURIComponent(Jr(t))}function Nr(t){for(var e="",r=0;r<t.length-1;r+=2)e+=String.fromCharCode(parseInt(t.substr(r,2),16));return e}function Ur(t){for(var e="",r=0;r<t.length;r++)e+=("0"+t.charCodeAt(r).toString(16)).slice(-2);return e}function Br(t){return S(t)}function Or(t){var e=Br(t).replace(/(.{64})/g,"$1\r\n");return e=e.replace(/\r\n$/,"")}function jr(t){return b(t.replace(/[^0-9A-Za-z\/+=]*/g,""))}function Mr(t,e){return"-----BEGIN "+e+"-----\r\n"+Or(t)+"\r\n-----END "+e+"-----\r\n"}function Hr(t,e){if(-1==t.indexOf("-----BEGIN "))throw"can't find PEM header: "+e;return jr(t=void 0!==e?(t=t.replace(new RegExp("^[^]*-----BEGIN "+e+"-----"),"")).replace(new RegExp("-----END "+e+"-----[^]*$"),""):(t=t.replace(/^[^]*-----BEGIN [^-]+-----/,"")).replace(/-----END [^-]+-----[^]*$/,""))}function Vr(t){var e,r,n,i,o,s,a,u,c,h,l;if(l=t.match(/^(\d{2}|\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)(|\.\d+)Z$/))return u=l[1],e=parseInt(u),2===u.length&&(50<=e&&e<100?e=1900+e:0<=e&&e<50&&(e=2e3+e)),r=parseInt(l[2])-1,n=parseInt(l[3]),i=parseInt(l[4]),o=parseInt(l[5]),s=parseInt(l[6]),a=0,""!==(c=l[7])&&(h=(c.substr(1)+"00").substr(0,3),a=parseInt(h)),Date.UTC(e,r,n,i,o,s,a);throw"unsupported zulu format: "+t}function Kr(t){return~~(Vr(t)/1e3)}function qr(t){return t.replace(/%/g,"")}function Jr(t){return t.replace(/(..)/g,"%$1")}function Wr(t){var e="malformed IPv6 address";if(!t.match(/^[0-9A-Fa-f:]+$/))throw e;var r=(t=t.toLowerCase()).split(":").length-1;if(r<2)throw e;var n=":".repeat(7-r+2),i=(t=t.replace("::",n)).split(":");if(8!=i.length)throw e;for(var o=0;o<8;o++)i[o]=("0000"+i[o]).slice(-4);return i.join("")}function zr(t){if(!t.match(/^[0-9A-Fa-f]{32}$/))throw"malformed IPv6 address octet";for(var e=(t=t.toLowerCase()).match(/.{1,4}/g),r=0;r<8;r++)e[r]=e[r].replace(/^0+/,""),""==e[r]&&(e[r]="0");var n=(t=":"+e.join(":")+":").match(/:(0:){2,}/g);if(null===n)return t.slice(1,-1);var i="";for(r=0;r<n.length;r++)n[r].length>i.length&&(i=n[r]);return(t=t.replace(i,"::")).slice(1,-1)}function Yr(t){var e="malformed hex value";if(!t.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/))throw e;if(8!=t.length)return 32==t.length?zr(t):t;try{return parseInt(t.substr(0,2),16)+"."+parseInt(t.substr(2,2),16)+"."+parseInt(t.substr(4,2),16)+"."+parseInt(t.substr(6,2),16)}catch(t){throw e}}function Gr(t){for(var e=encodeURIComponent(t),r="",n=0;n<e.length;n++)"%"==e[n]?(r+=e.substr(n,3),n+=2):r=r+"%"+Pr(e[n]);return r}function Xr(t){return!(t.length%2!=0||!t.match(/^[0-9a-f]+$/)&&!t.match(/^[0-9A-F]+$/))}function $r(t){return t.length%2==1?"0"+t:t.substr(0,1)>"7"?"00"+t:t}Er.getLblen=function(t,e){if("8"!=t.substr(e+2,1))return 1;var r=parseInt(t.substr(e+3,1));return 0==r?-1:0<r&&r<10?r+1:-2},Er.getL=function(t,e){var r=Er.getLblen(t,e);return r<1?"":t.substr(e+2,2*r)},Er.getVblen=function(t,e){var r;return""==(r=Er.getL(t,e))?-1:("8"===r.substr(0,1)?new F(r.substr(2),16):new F(r,16)).intValue()},Er.getVidx=function(t,e){var r=Er.getLblen(t,e);return r<0?r:e+2*(r+1)},Er.getV=function(t,e){var r=Er.getVidx(t,e),n=Er.getVblen(t,e);return t.substr(r,2*n)},Er.getTLV=function(t,e){return t.substr(e,2)+Er.getL(t,e)+Er.getV(t,e)},Er.getTLVblen=function(t,e){return 2+2*Er.getLblen(t,e)+2*Er.getVblen(t,e)},Er.getNextSiblingIdx=function(t,e){return Er.getVidx(t,e)+2*Er.getVblen(t,e)},Er.getChildIdx=function(t,e){var r,n,i,o=Er,s=[];r=o.getVidx(t,e),n=2*o.getVblen(t,e),"03"==t.substr(e,2)&&(r+=2,n-=2),i=0;for(var a=r;i<=n;){var u=o.getTLVblen(t,a);if((i+=u)<=n&&s.push(a),a+=u,i>=n)break}return s},Er.getNthChildIdx=function(t,e,r){return Er.getChildIdx(t,e)[r]},Er.getIdxbyList=function(t,e,r,n){var i,o,s=Er;return 0==r.length?void 0!==n&&t.substr(e,2)!==n?-1:e:(i=r.shift())>=(o=s.getChildIdx(t,e)).length?-1:s.getIdxbyList(t,o[i],r,n)},Er.getIdxbyListEx=function(t,e,r,n){var i,o,s=Er;if(0==r.length)return void 0!==n&&t.substr(e,2)!==n?-1:e;i=r.shift(),o=s.getChildIdx(t,e);for(var a=0,u=0;u<o.length;u++){var c=t.substr(o[u],2);if("number"==typeof i&&!s.isContextTag(c)&&a==i||"string"==typeof i&&s.isContextTag(c,i))return s.getIdxbyListEx(t,o[u],r,n);s.isContextTag(c)||a++}return-1},Er.getTLVbyList=function(t,e,r,n){var i=Er,o=i.getIdxbyList(t,e,r,n);return-1==o||o>=t.length?null:i.getTLV(t,o)},Er.getTLVbyListEx=function(t,e,r,n){var i=Er,o=i.getIdxbyListEx(t,e,r,n);return-1==o?null:i.getTLV(t,o)},Er.getVbyList=function(t,e,r,n,i){var o,s,a=Er;return-1==(o=a.getIdxbyList(t,e,r,n))||o>=t.length?null:(s=a.getV(t,o),!0===i&&(s=s.substr(2)),s)},Er.getVbyListEx=function(t,e,r,n,i){var o,s,a=Er;return-1==(o=a.getIdxbyListEx(t,e,r,n))?null:(s=a.getV(t,o),"03"==t.substr(o,2)&&!1!==i&&(s=s.substr(2)),s)},Er.getInt=function(t,e,r){null==r&&(r=-1);try{var n=t.substr(e,2);if("02"!=n&&"03"!=n)return r;var i=Er.getV(t,e);return"02"==n?parseInt(i,16):function o(t){try{var e=t.substr(0,2);if("00"==e)return parseInt(t.substr(2),16);var r=parseInt(e,16),n=t.substr(2),i=parseInt(n,16).toString(2);return"0"==i&&(i="00000000"),i=i.slice(0,0-r),parseInt(i,2)}catch(t){return-1}}(i)}catch(t){return r}},Er.getOID=function(t,e,r){null==r&&(r=null);try{return"06"!=t.substr(e,2)?r:function n(t){if(!Xr(t))return null;try{var e=[],r=t.substr(0,2),n=parseInt(r,16);e[0]=new String(Math.floor(n/40)),e[1]=new String(n%40);for(var i=t.substr(2),o=[],s=0;s<i.length/2;s++)o.push(parseInt(i.substr(2*s,2),16));var a=[],u="";for(s=0;s<o.length;s++)128&o[s]?u+=Qr((127&o[s]).toString(2),7):(u+=Qr((127&o[s]).toString(2),7),a.push(new String(parseInt(u,2))),u="");var c=e.join(".");return a.length>0&&(c=c+"."+a.join(".")),c}catch(t){return null}}(Er.getV(t,e))}catch(t){return r}},Er.getOIDName=function(t,e,r){null==r&&(r=null);try{var n=Er.getOID(t,e,r);if(n==r)return r;var i=br.asn1.x509.OID.oid2name(n);return""==i?n:i}catch(t){return r}},Er.getString=function(t,e,r){null==r&&(r=null);try{return Nr(Er.getV(t,e))}catch(t){return r}},Er.hextooidstr=function(t){var e=function t(e,r){return e.length>=r?e:new Array(r-e.length+1).join("0")+e},r=[],n=t.substr(0,2),i=parseInt(n,16);r[0]=new String(Math.floor(i/40)),r[1]=new String(i%40);for(var o=t.substr(2),s=[],a=0;a<o.length/2;a++)s.push(parseInt(o.substr(2*a,2),16));var u=[],c="";for(a=0;a<s.length;a++)128&s[a]?c+=e((127&s[a]).toString(2),7):(c+=e((127&s[a]).toString(2),7),u.push(new String(parseInt(c,2))),c="");var h=r.join(".");return u.length>0&&(h=h+"."+u.join(".")),h},Er.dump=function(t,e,r,n){var i=Er,o=i.getV,s=i.dump,a=i.getChildIdx,u=t;t instanceof br.asn1.ASN1Object&&(u=t.getEncodedHex());var c=function t(e,r){return e.length<=2*r?e:e.substr(0,r)+"..(total "+e.length/2+"bytes).."+e.substr(e.length-r,r)};void 0===e&&(e={ommit_long_octet:32}),void 0===r&&(r=0),void 0===n&&(n="");var h,l=e.ommit_long_octet;if("01"==(h=u.substr(r,2)))return"00"==(f=o(u,r))?n+"BOOLEAN FALSE\n":n+"BOOLEAN TRUE\n";if("02"==h)return n+"INTEGER "+c(f=o(u,r),l)+"\n";if("03"==h){var f=o(u,r);if(i.isASN1HEX(f.substr(2))){var g=n+"BITSTRING, encapsulates\n";return g+=s(f.substr(2),e,0,n+"  ")}return n+"BITSTRING "+c(f,l)+"\n"}if("04"==h){f=o(u,r);if(i.isASN1HEX(f)){g=n+"OCTETSTRING, encapsulates\n";return g+=s(f,e,0,n+"  ")}return n+"OCTETSTRING "+c(f,l)+"\n"}if("05"==h)return n+"NULL\n";if("06"==h){var d=o(u,r),p=br.asn1.ASN1Util.oidHexToInt(d),v=br.asn1.x509.OID.oid2name(p),y=p.replace(/\./g," ");return""!=v?n+"ObjectIdentifier "+v+" ("+y+")\n":n+"ObjectIdentifier ("+y+")\n"}if("0a"==h)return n+"ENUMERATED "+parseInt(o(u,r))+"\n";if("0c"==h)return n+"UTF8String '"+Lr(o(u,r))+"'\n";if("13"==h)return n+"PrintableString '"+Lr(o(u,r))+"'\n";if("14"==h)return n+"TeletexString '"+Lr(o(u,r))+"'\n";if("16"==h)return n+"IA5String '"+Lr(o(u,r))+"'\n";if("17"==h)return n+"UTCTime "+Lr(o(u,r))+"\n";if("18"==h)return n+"GeneralizedTime "+Lr(o(u,r))+"\n";if("1a"==h)return n+"VisualString '"+Lr(o(u,r))+"'\n";if("1e"==h)return n+"BMPString '"+Lr(o(u,r))+"'\n";if("30"==h){if("3000"==u.substr(r,4))return n+"SEQUENCE {}\n";g=n+"SEQUENCE\n";var m=e;if((2==(b=a(u,r)).length||3==b.length)&&"06"==u.substr(b[0],2)&&"04"==u.substr(b[b.length-1],2)){v=i.oidname(o(u,b[0]));var _=JSON.parse(JSON.stringify(e));_.x509ExtName=v,m=_}for(var S=0;S<b.length;S++)g+=s(u,m,b[S],n+"  ");return g}if("31"==h){g=n+"SET\n";var b=a(u,r);for(S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}if(0!=(128&(h=parseInt(h,16)))){var w=31&h;if(0!=(32&h)){for(g=n+"["+w+"]\n",b=a(u,r),S=0;S<b.length;S++)g+=s(u,e,b[S],n+"  ");return g}f=o(u,r);if(Er.isASN1HEX(f)){var g=n+"["+w+"]\n";return g+=s(f,e,0,n+"  ")}return("68747470"==f.substr(0,8)||"subjectAltName"===e.x509ExtName&&2==w)&&(f=Lr(f)),g=n+"["+w+"] "+f+"\n"}return n+"UNKNOWN("+h+") "+o(u,r)+"\n"},Er.isContextTag=function(t,e){var r,n;t=t.toLowerCase();try{r=parseInt(t,16)}catch(t){return-1}if(void 0===e)return 128==(192&r);try{return null!=e.match(/^\[[0-9]+\]$/)&&(!((n=parseInt(e.substr(1,e.length-1),10))>31)&&(128==(192&r)&&(31&r)==n))}catch(t){return!1}},Er.isASN1HEX=function(t){var e=Er;if(t.length%2==1)return!1;var r=e.getVblen(t,0),n=t.substr(0,2),i=e.getL(t,0);return t.length-n.length-i.length==2*r},Er.checkStrictDER=function(t,e,r,n,i){var o=Er;if(void 0===r){if("string"!=typeof t)throw new Error("not hex string");if(t=t.toLowerCase(),!br.lang.String.isHex(t))throw new Error("not hex string");r=t.length,i=(n=t.length/2)<128?1:Math.ceil(n.toString(16))+1}if(o.getL(t,e).length>2*i)throw new Error("L of TLV too long: idx="+e);var s=o.getVblen(t,e);if(s>n)throw new Error("value of L too long than hex: idx="+e);var a=o.getTLV(t,e),u=a.length-2-o.getL(t,e).length;if(u!==2*s)throw new Error("V string length and L's value not the same:"+u+"/"+2*s);if(0===e&&t.length!=a.length)throw new Error("total length and TLV length unmatch:"+t.length+"!="+a.length);var c=t.substr(e,2);if("02"===c){var h=o.getVidx(t,e);if("00"==t.substr(h,2)&&t.charCodeAt(h+2)<56)throw new Error("not least zeros for DER INTEGER")}if(32&parseInt(c,16)){for(var l=o.getVblen(t,e),f=0,g=o.getChildIdx(t,e),d=0;d<g.length;d++){f+=o.getTLV(t,g[d]).length,o.checkStrictDER(t,g[d],r,n,i)}if(2*l!=f)throw new Error("sum of children's TLV length and L unmatch: "+2*l+"!="+f)}},Er.oidname=function(t){var e=br.asn1;br.lang.String.isHex(t)&&(t=e.ASN1Util.oidHexToInt(t));var r=e.x509.OID.oid2name(t);return""===r&&(r=t),r},void 0!==br&&br||(e.KJUR=br={}),void 0!==br.lang&&br.lang||(br.lang={}),br.lang.String=function(){},"function"==typeof t?(e.utf8tob64u=wr=function e(r){return Cr(t.from(r,"utf8").toString("base64"))},e.b64utoutf8=Fr=function e(r){return t.from(Tr(r),"base64").toString("utf8")}):(e.utf8tob64u=wr=function t(e){return Rr(qr(Gr(e)))},e.b64utoutf8=Fr=function t(e){return decodeURIComponent(Jr(Ir(e)))}),br.lang.String.isInteger=function(t){return!!t.match(/^[0-9]+$/)||!!t.match(/^-[0-9]+$/)},br.lang.String.isHex=function(t){return Xr(t)},br.lang.String.isBase64=function(t){return!(!(t=t.replace(/\s+/g,"")).match(/^[0-9A-Za-z+\/]+={0,3}$/)||t.length%4!=0)},br.lang.String.isBase64URL=function(t){return!t.match(/[+/=]/)&&(t=Tr(t),br.lang.String.isBase64(t))},br.lang.String.isIntegerArray=function(t){return!!(t=t.replace(/\s+/g,"")).match(/^\[[0-9,]+\]$/)},br.lang.String.isPrintable=function(t){return null!==t.match(/^[0-9A-Za-z '()+,-./:=?]*$/)},br.lang.String.isIA5=function(t){return null!==t.match(/^[\x20-\x21\x23-\x7f]*$/)},br.lang.String.isMail=function(t){return null!==t.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\.[A-Za-z0-9]{1,}$/)};var Qr=function t(e,r,n){return null==n&&(n="0"),e.length>=r?e:new Array(r-e.length+1).join(n)+e};void 0!==br&&br||(e.KJUR=br={}),void 0!==br.crypto&&br.crypto||(br.crypto={}),br.crypto.Util=new function(){this.DIGESTINFOHEAD={sha1:"3021300906052b0e03021a05000414",sha224:"302d300d06096086480165030402040500041c",sha256:"3031300d060960864801650304020105000420",sha384:"3041300d060960864801650304020205000430",sha512:"3051300d060960864801650304020305000440",md2:"3020300c06082a864886f70d020205000410",md5:"3020300c06082a864886f70d020505000410",ripemd160:"3021300906052b2403020105000414"},this.DEFAULTPROVIDER={md5:"cryptojs",sha1:"cryptojs",sha224:"cryptojs",sha256:"cryptojs",sha384:"cryptojs",sha512:"cryptojs",ripemd160:"cryptojs",hmacmd5:"cryptojs",hmacsha1:"cryptojs",hmacsha224:"cryptojs",hmacsha256:"cryptojs",hmacsha384:"cryptojs",hmacsha512:"cryptojs",hmacripemd160:"cryptojs",MD5withRSA:"cryptojs/jsrsa",SHA1withRSA:"cryptojs/jsrsa",SHA224withRSA:"cryptojs/jsrsa",SHA256withRSA:"cryptojs/jsrsa",SHA384withRSA:"cryptojs/jsrsa",SHA512withRSA:"cryptojs/jsrsa",RIPEMD160withRSA:"cryptojs/jsrsa",MD5withECDSA:"cryptojs/jsrsa",SHA1withECDSA:"cryptojs/jsrsa",SHA224withECDSA:"cryptojs/jsrsa",SHA256withECDSA:"cryptojs/jsrsa",SHA384withECDSA:"cryptojs/jsrsa",SHA512withECDSA:"cryptojs/jsrsa",RIPEMD160withECDSA:"cryptojs/jsrsa",SHA1withDSA:"cryptojs/jsrsa",SHA224withDSA:"cryptojs/jsrsa",SHA256withDSA:"cryptojs/jsrsa",MD5withRSAandMGF1:"cryptojs/jsrsa",SHAwithRSAandMGF1:"cryptojs/jsrsa",SHA1withRSAandMGF1:"cryptojs/jsrsa",SHA224withRSAandMGF1:"cryptojs/jsrsa",SHA256withRSAandMGF1:"cryptojs/jsrsa",SHA384withRSAandMGF1:"cryptojs/jsrsa",SHA512withRSAandMGF1:"cryptojs/jsrsa",RIPEMD160withRSAandMGF1:"cryptojs/jsrsa"},this.CRYPTOJSMESSAGEDIGESTNAME={md5:y.algo.MD5,sha1:y.algo.SHA1,sha224:y.algo.SHA224,sha256:y.algo.SHA256,sha384:y.algo.SHA384,sha512:y.algo.SHA512,ripemd160:y.algo.RIPEMD160},this.getDigestInfoHex=function(t,e){if(void 0===this.DIGESTINFOHEAD[e])throw"alg not supported in Util.DIGESTINFOHEAD: "+e;return this.DIGESTINFOHEAD[e]+t},this.getPaddedDigestInfoHex=function(t,e,r){var n=this.getDigestInfoHex(t,e),i=r/4;if(n.length+22>i)throw"key is too short for SigAlg: keylen="+r+","+e;for(var o="0001",s="00"+n,a="",u=i-o.length-s.length,c=0;c<u;c+=2)a+="ff";return o+a+s},this.hashString=function(t,e){return new br.crypto.MessageDigest({alg:e}).digestString(t)},this.hashHex=function(t,e){return new br.crypto.MessageDigest({alg:e}).digestHex(t)},this.sha1=function(t){return this.hashString(t,"sha1")},this.sha256=function(t){return this.hashString(t,"sha256")},this.sha256Hex=function(t){return this.hashHex(t,"sha256")},this.sha512=function(t){return this.hashString(t,"sha512")},this.sha512Hex=function(t){return this.hashHex(t,"sha512")},this.isKey=function(t){return t instanceof He||t instanceof br.crypto.DSA||t instanceof br.crypto.ECDSA}},br.crypto.Util.md5=function(t){return new br.crypto.MessageDigest({alg:"md5",prov:"cryptojs"}).digestString(t)},br.crypto.Util.ripemd160=function(t){return new br.crypto.MessageDigest({alg:"ripemd160",prov:"cryptojs"}).digestString(t)},br.crypto.Util.SECURERANDOMGEN=new Oe,br.crypto.Util.getRandomHexOfNbytes=function(t){var e=new Array(t);return br.crypto.Util.SECURERANDOMGEN.nextBytes(e),kr(e)},br.crypto.Util.getRandomBigIntegerOfNbytes=function(t){return new F(br.crypto.Util.getRandomHexOfNbytes(t),16)},br.crypto.Util.getRandomHexOfNbits=function(t){var e=t%8,r=new Array((t-e)/8+1);return br.crypto.Util.SECURERANDOMGEN.nextBytes(r),r[0]=(255<<e&255^255)&r[0],kr(r)},br.crypto.Util.getRandomBigIntegerOfNbits=function(t){return new F(br.crypto.Util.getRandomHexOfNbits(t),16)},br.crypto.Util.getRandomBigIntegerZeroToMax=function(t){for(var e=t.bitLength();;){var r=br.crypto.Util.getRandomBigIntegerOfNbits(e);if(-1!=t.compareTo(r))return r}},br.crypto.Util.getRandomBigIntegerMinToMax=function(t,e){var r=t.compareTo(e);if(1==r)throw"biMin is greater than biMax";if(0==r)return t;var n=e.subtract(t);return br.crypto.Util.getRandomBigIntegerZeroToMax(n).add(t)},br.crypto.MessageDigest=function(t){this.setAlgAndProvider=function(t,e){if(null!==(t=br.crypto.MessageDigest.getCanonicalAlgName(t))&&void 0===e&&(e=br.crypto.Util.DEFAULTPROVIDER[t]),-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(t)&&"cryptojs"==e){try{this.md=br.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create()}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=y.enc.Hex.parse(t);this.md.update(e)},this.digest=function(){return this.md.finalize().toString(y.enc.Hex)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}if(-1!=":sha256:".indexOf(t)&&"sjcl"==e){try{this.md=new sjcl.hash.sha256}catch(e){throw"setAlgAndProvider hash alg set fail alg="+t+"/"+e}this.updateString=function(t){this.md.update(t)},this.updateHex=function(t){var e=sjcl.codec.hex.toBits(t);this.md.update(e)},this.digest=function(){var t=this.md.finalize();return sjcl.codec.hex.fromBits(t)},this.digestString=function(t){return this.updateString(t),this.digest()},this.digestHex=function(t){return this.updateHex(t),this.digest()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digest=function(){throw"digest() not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algName+"/"+this.provName},this.digestHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algName+"/"+this.provName},void 0!==t&&void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=br.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName))},br.crypto.MessageDigest.getCanonicalAlgName=function(t){return"string"==typeof t&&(t=(t=t.toLowerCase()).replace(/-/,"")),t},br.crypto.MessageDigest.getHashLength=function(t){var e=br.crypto.MessageDigest,r=e.getCanonicalAlgName(t);if(void 0===e.HASHLENGTH[r])throw"not supported algorithm: "+t;return e.HASHLENGTH[r]},br.crypto.MessageDigest.HASHLENGTH={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,ripemd160:20},br.crypto.Mac=function(t){this.setAlgAndProvider=function(t,e){if(null==(t=t.toLowerCase())&&(t="hmacsha1"),"hmac"!=(t=t.toLowerCase()).substr(0,4))throw"setAlgAndProvider unsupported HMAC alg: "+t;void 0===e&&(e=br.crypto.Util.DEFAULTPROVIDER[t]),this.algProv=t+"/"+e;var r=t.substr(4);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(r)&&"cryptojs"==e){try{var n=br.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[r];this.mac=y.algo.HMAC.create(n,this.pass)}catch(t){throw"setAlgAndProvider hash alg set fail hashAlg="+r+"/"+t}this.updateString=function(t){this.mac.update(t)},this.updateHex=function(t){var e=y.enc.Hex.parse(t);this.mac.update(e)},this.doFinal=function(){return this.mac.finalize().toString(y.enc.Hex)},this.doFinalString=function(t){return this.updateString(t),this.doFinal()},this.doFinalHex=function(t){return this.updateHex(t),this.doFinal()}}},this.updateString=function(t){throw"updateString(str) not supported for this alg/prov: "+this.algProv},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg/prov: "+this.algProv},this.doFinal=function(){throw"digest() not supported for this alg/prov: "+this.algProv},this.doFinalString=function(t){throw"digestString(str) not supported for this alg/prov: "+this.algProv},this.doFinalHex=function(t){throw"digestHex(hex) not supported for this alg/prov: "+this.algProv},this.setPassword=function(t){if("string"==typeof t){var e=t;return t.length%2!=1&&t.match(/^[0-9A-Fa-f]+$/)||(e=Ur(t)),void(this.pass=y.enc.Hex.parse(e))}if("object"!=(void 0===t?"undefined":r(t)))throw"KJUR.crypto.Mac unsupported password type: "+t;e=null;if(void 0!==t.hex){if(t.hex.length%2!=0||!t.hex.match(/^[0-9A-Fa-f]+$/))throw"Mac: wrong hex password: "+t.hex;e=t.hex}if(void 0!==t.utf8&&(e=Dr(t.utf8)),void 0!==t.rstr&&(e=Ur(t.rstr)),void 0!==t.b64&&(e=b(t.b64)),void 0!==t.b64u&&(e=Ir(t.b64u)),null==e)throw"KJUR.crypto.Mac unsupported password type: "+t;this.pass=y.enc.Hex.parse(e)},void 0!==t&&(void 0!==t.pass&&this.setPassword(t.pass),void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov&&(this.provName=br.crypto.Util.DEFAULTPROVIDER[this.algName]),this.setAlgAndProvider(this.algName,this.provName)))},br.crypto.Signature=function(t){var e=null;if(this._setAlgNames=function(){var t=this.algName.match(/^(.+)with(.+)$/);t&&(this.mdAlgName=t[1].toLowerCase(),this.pubkeyAlgName=t[2].toLowerCase(),"rsaandmgf1"==this.pubkeyAlgName&&"sha"==this.mdAlgName&&(this.mdAlgName="sha1"))},this._zeroPaddingOfSignature=function(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t},this.setAlgAndProvider=function(t,e){if(this._setAlgNames(),"cryptojs/jsrsa"!=e)throw new Error("provider not supported: "+e);if(-1!=":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:".indexOf(this.mdAlgName)){try{this.md=new br.crypto.MessageDigest({alg:this.mdAlgName})}catch(t){throw new Error("setAlgAndProvider hash alg set fail alg="+this.mdAlgName+"/"+t)}this.init=function(t,e){var r=null;try{r=void 0===e?Zr.getKey(t):Zr.getKey(t,e)}catch(t){throw"init failed:"+t}if(!0===r.isPrivate)this.prvKey=r,this.state="SIGN";else{if(!0!==r.isPublic)throw"init failed.:"+r;this.pubKey=r,this.state="VERIFY"}},this.updateString=function(t){this.md.updateString(t)},this.updateHex=function(t){this.md.updateHex(t)},this.sign=function(){if(this.sHashHex=this.md.digest(),void 0===this.prvKey&&void 0!==this.ecprvhex&&void 0!==this.eccurvename&&void 0!==br.crypto.ECDSA&&(this.prvKey=new br.crypto.ECDSA({curve:this.eccurvename,prv:this.ecprvhex})),this.prvKey instanceof He&&"rsaandmgf1"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHashPSS(this.sHashHex,this.mdAlgName,this.pssSaltLen);else if(this.prvKey instanceof He&&"rsa"===this.pubkeyAlgName)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex,this.mdAlgName);else if(this.prvKey instanceof br.crypto.ECDSA)this.hSign=this.prvKey.signWithMessageHash(this.sHashHex);else{if(!(this.prvKey instanceof br.crypto.DSA))throw"Signature: unsupported private key alg: "+this.pubkeyAlgName;this.hSign=this.prvKey.signWithMessageHash(this.sHashHex)}return this.hSign},this.signString=function(t){return this.updateString(t),this.sign()},this.signHex=function(t){return this.updateHex(t),this.sign()},this.verify=function(t){if(this.sHashHex=this.md.digest(),void 0===this.pubKey&&void 0!==this.ecpubhex&&void 0!==this.eccurvename&&void 0!==br.crypto.ECDSA&&(this.pubKey=new br.crypto.ECDSA({curve:this.eccurvename,pub:this.ecpubhex})),this.pubKey instanceof He&&"rsaandmgf1"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHashPSS(this.sHashHex,t,this.mdAlgName,this.pssSaltLen);if(this.pubKey instanceof He&&"rsa"===this.pubkeyAlgName)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==br.crypto.ECDSA&&this.pubKey instanceof br.crypto.ECDSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);if(void 0!==br.crypto.DSA&&this.pubKey instanceof br.crypto.DSA)return this.pubKey.verifyWithMessageHash(this.sHashHex,t);throw"Signature: unsupported public key alg: "+this.pubkeyAlgName}}},this.init=function(t,e){throw"init(key, pass) not supported for this alg:prov="+this.algProvName},this.updateString=function(t){throw"updateString(str) not supported for this alg:prov="+this.algProvName},this.updateHex=function(t){throw"updateHex(hex) not supported for this alg:prov="+this.algProvName},this.sign=function(){throw"sign() not supported for this alg:prov="+this.algProvName},this.signString=function(t){throw"digestString(str) not supported for this alg:prov="+this.algProvName},this.signHex=function(t){throw"digestHex(hex) not supported for this alg:prov="+this.algProvName},this.verify=function(t){throw"verify(hSigVal) not supported for this alg:prov="+this.algProvName},this.initParams=t,void 0!==t&&(void 0!==t.alg&&(this.algName=t.alg,void 0===t.prov?this.provName=br.crypto.Util.DEFAULTPROVIDER[this.algName]:this.provName=t.prov,this.algProvName=this.algName+":"+this.provName,this.setAlgAndProvider(this.algName,this.provName),this._setAlgNames()),void 0!==t.psssaltlen&&(this.pssSaltLen=t.psssaltlen),void 0!==t.prvkeypem)){if(void 0!==t.prvkeypas)throw"both prvkeypem and prvkeypas parameters not supported";try{e=Zr.getKey(t.prvkeypem);this.init(e)}catch(t){throw"fatal error to load pem private key: "+t}}},br.crypto.Cipher=function(t){},br.crypto.Cipher.encrypt=function(t,e,r){if(e instanceof He&&e.isPublic){var n=br.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.encrypt(t);if("RSAOAEP"===n)return e.encryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.encryptOAEP(t,"sha"+i[1]);throw"Cipher.encrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.encrypt: unsupported key or algorithm"},br.crypto.Cipher.decrypt=function(t,e,r){if(e instanceof He&&e.isPrivate){var n=br.crypto.Cipher.getAlgByKeyAndName(e,r);if("RSA"===n)return e.decrypt(t);if("RSAOAEP"===n)return e.decryptOAEP(t,"sha1");var i=n.match(/^RSAOAEP(\d+)$/);if(null!==i)return e.decryptOAEP(t,"sha"+i[1]);throw"Cipher.decrypt: unsupported algorithm for RSAKey: "+r}throw"Cipher.decrypt: unsupported key or algorithm"},br.crypto.Cipher.getAlgByKeyAndName=function(t,e){if(t instanceof He){if(-1!=":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:".indexOf(e))return e;if(null==e)return"RSA";throw"getAlgByKeyAndName: not supported algorithm name for RSAKey: "+e}throw"getAlgByKeyAndName: not supported algorithm name: "+e},br.crypto.OID=new function(){this.oidhex2name={"2a864886f70d010101":"rsaEncryption","2a8648ce3d0201":"ecPublicKey","2a8648ce380401":"dsa","2a8648ce3d030107":"secp256r1","2b8104001f":"secp192k1","2b81040021":"secp224r1","2b8104000a":"secp256k1","2b81040023":"secp521r1","2b81040022":"secp384r1","2a8648ce380403":"SHA1withDSA","608648016503040301":"SHA224withDSA","608648016503040302":"SHA256withDSA"}},void 0!==br&&br||(e.KJUR=br={}),void 0!==br.crypto&&br.crypto||(br.crypto={}),br.crypto.ECDSA=function(t){var e=Error,n=F,i=Ke,o=br.crypto.ECDSA,s=br.crypto.ECParameterDB,a=o.getName,u=Er,c=u.getVbyListEx,h=u.isASN1HEX,l=new Oe;this.type="EC",this.isPrivate=!1,this.isPublic=!1,this.getBigRandom=function(t){return new n(t.bitLength(),l).mod(t.subtract(n.ONE)).add(n.ONE)},this.setNamedCurve=function(t){this.ecparams=s.getByName(t),this.prvKeyHex=null,this.pubKeyHex=null,this.curveName=t},this.setPrivateKeyHex=function(t){this.isPrivate=!0,this.prvKeyHex=t},this.setPublicKeyHex=function(t){this.isPublic=!0,this.pubKeyHex=t},this.getPublicKeyXYHex=function(){var t=this.pubKeyHex;if("04"!==t.substr(0,2))throw"this method supports uncompressed format(04) only";var e=this.ecparams.keylen/4;if(t.length!==2+2*e)throw"malformed public key hex length";var r={};return r.x=t.substr(2,e),r.y=t.substr(2+e),r},this.getShortNISTPCurveName=function(){var t=this.curveName;return"secp256r1"===t||"NIST P-256"===t||"P-256"===t||"prime256v1"===t?"P-256":"secp384r1"===t||"NIST P-384"===t||"P-384"===t?"P-384":null},this.generateKeyPairHex=function(){var t=this.ecparams.n,e=this.getBigRandom(t),r=this.ecparams.G.multiply(e),n=r.getX().toBigInteger(),i=r.getY().toBigInteger(),o=this.ecparams.keylen/4,s=("0000000000"+e.toString(16)).slice(-o),a="04"+("0000000000"+n.toString(16)).slice(-o)+("0000000000"+i.toString(16)).slice(-o);return this.setPrivateKeyHex(s),this.setPublicKeyHex(a),{ecprvhex:s,ecpubhex:a}},this.signWithMessageHash=function(t){return this.signHex(t,this.prvKeyHex)},this.signHex=function(t,e){var r=new n(e,16),i=this.ecparams.n,s=new n(t.substring(0,this.ecparams.keylen/4),16);do{var a=this.getBigRandom(i),u=this.ecparams.G.multiply(a).getX().toBigInteger().mod(i)}while(u.compareTo(n.ZERO)<=0);var c=a.modInverse(i).multiply(s.add(r.multiply(u))).mod(i);return o.biRSSigToASN1Sig(u,c)},this.sign=function(t,e){var r=e,i=this.ecparams.n,o=n.fromByteArrayUnsigned(t);do{var s=this.getBigRandom(i),a=this.ecparams.G.multiply(s).getX().toBigInteger().mod(i)}while(a.compareTo(F.ZERO)<=0);var u=s.modInverse(i).multiply(o.add(r.multiply(a))).mod(i);return this.serializeSig(a,u)},this.verifyWithMessageHash=function(t,e){return this.verifyHex(t,e,this.pubKeyHex)},this.verifyHex=function(t,e,r){try{var s,a,u=o.parseSigHex(e);s=u.r,a=u.s;var c=i.decodeFromHex(this.ecparams.curve,r),h=new n(t.substring(0,this.ecparams.keylen/4),16);return this.verifyRaw(h,s,a,c)}catch(t){return!1}},this.verify=function(t,e,o){var s,a,u;if(Bitcoin.Util.isArray(e)){var c=this.parseSig(e);s=c.r,a=c.s}else{if("object"!==(void 0===e?"undefined":r(e))||!e.r||!e.s)throw"Invalid value for signature";s=e.r,a=e.s}if(o instanceof Ke)u=o;else{if(!Bitcoin.Util.isArray(o))throw"Invalid format for pubkey value, must be byte array or ECPointFp";u=i.decodeFrom(this.ecparams.curve,o)}var h=n.fromByteArrayUnsigned(t);return this.verifyRaw(h,s,a,u)},this.verifyRaw=function(t,e,r,i){var o=this.ecparams.n,s=this.ecparams.G;if(e.compareTo(n.ONE)<0||e.compareTo(o)>=0)return!1;if(r.compareTo(n.ONE)<0||r.compareTo(o)>=0)return!1;var a=r.modInverse(o),u=t.multiply(a).mod(o),c=e.multiply(a).mod(o);return s.multiply(u).add(i.multiply(c)).getX().toBigInteger().mod(o).equals(e)},this.serializeSig=function(t,e){var r=t.toByteArraySigned(),n=e.toByteArraySigned(),i=[];return i.push(2),i.push(r.length),(i=i.concat(r)).push(2),i.push(n.length),(i=i.concat(n)).unshift(i.length),i.unshift(48),i},this.parseSig=function(t){var e;if(48!=t[0])throw new Error("Signature not a valid DERSequence");if(2!=t[e=2])throw new Error("First element in signature must be a DERInteger");var r=t.slice(e+2,e+2+t[e+1]);if(2!=t[e+=2+t[e+1]])throw new Error("Second element in signature must be a DERInteger");var i=t.slice(e+2,e+2+t[e+1]);return e+=2+t[e+1],{r:n.fromByteArrayUnsigned(r),s:n.fromByteArrayUnsigned(i)}},this.parseSigCompact=function(t){if(65!==t.length)throw"Signature has the wrong length";var e=t[0]-27;if(e<0||e>7)throw"Invalid signature type";var r=this.ecparams.n;return{r:n.fromByteArrayUnsigned(t.slice(1,33)).mod(r),s:n.fromByteArrayUnsigned(t.slice(33,65)).mod(r),i:e}},this.readPKCS5PrvKeyHex=function(t){if(!1===h(t))throw new Error("not ASN.1 hex string");var e,r,n;try{e=c(t,0,["[0]",0],"06"),r=c(t,0,[1],"04");try{n=c(t,0,["[1]",0],"03")}catch(t){}}catch(t){throw new Error("malformed PKCS#1/5 plain ECC private key")}if(this.curveName=a(e),void 0===this.curveName)throw"unsupported curve name";this.setNamedCurve(this.curveName),this.setPublicKeyHex(n),this.setPrivateKeyHex(r),this.isPublic=!1},this.readPKCS8PrvKeyHex=function(t){if(!1===h(t))throw new e("not ASN.1 hex string");var r,n,i;try{c(t,0,[1,0],"06"),r=c(t,0,[1,1],"06"),n=c(t,0,[2,0,1],"04");try{i=c(t,0,[2,0,"[1]",0],"03")}catch(t){}}catch(t){throw new e("malformed PKCS#8 plain ECC private key")}if(this.curveName=a(r),void 0===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i),this.setPrivateKeyHex(n),this.isPublic=!1},this.readPKCS8PubKeyHex=function(t){if(!1===h(t))throw new e("not ASN.1 hex string");var r,n;try{c(t,0,[0,0],"06"),r=c(t,0,[0,1],"06"),n=c(t,0,[1],"03")}catch(t){throw new e("malformed PKCS#8 ECC public key")}if(this.curveName=a(r),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(n)},this.readCertPubKeyHex=function(t,r){if(!1===h(t))throw new e("not ASN.1 hex string");var n,i;try{n=c(t,0,[0,5,0,1],"06"),i=c(t,0,[0,5,1],"03")}catch(t){throw new e("malformed X.509 certificate ECC public key")}if(this.curveName=a(n),null===this.curveName)throw new e("unsupported curve name");this.setNamedCurve(this.curveName),this.setPublicKeyHex(i)},void 0!==t&&void 0!==t.curve&&(this.curveName=t.curve),void 0===this.curveName&&(this.curveName="secp256r1"),this.setNamedCurve(this.curveName),void 0!==t&&(void 0!==t.prv&&this.setPrivateKeyHex(t.prv),void 0!==t.pub&&this.setPublicKeyHex(t.pub))},br.crypto.ECDSA.parseSigHex=function(t){var e=br.crypto.ECDSA.parseSigHexInHexRS(t);return{r:new F(e.r,16),s:new F(e.s,16)}},br.crypto.ECDSA.parseSigHexInHexRS=function(t){var e=Er,r=e.getChildIdx,n=e.getV;if(e.checkStrictDER(t,0),"30"!=t.substr(0,2))throw new Error("signature is not a ASN.1 sequence");var i=r(t,0);if(2!=i.length)throw new Error("signature shall have two elements");var o=i[0],s=i[1];if("02"!=t.substr(o,2))throw new Error("1st item not ASN.1 integer");if("02"!=t.substr(s,2))throw new Error("2nd item not ASN.1 integer");return{r:n(t,o),s:n(t,s)}},br.crypto.ECDSA.asn1SigToConcatSig=function(t){var e=br.crypto.ECDSA.parseSigHexInHexRS(t),r=e.r,n=e.s;if("00"==r.substr(0,2)&&r.length%32==2&&(r=r.substr(2)),"00"==n.substr(0,2)&&n.length%32==2&&(n=n.substr(2)),r.length%32==30&&(r="00"+r),n.length%32==30&&(n="00"+n),r.length%32!=0)throw"unknown ECDSA sig r length error";if(n.length%32!=0)throw"unknown ECDSA sig s length error";return r+n},br.crypto.ECDSA.concatSigToASN1Sig=function(t){if(t.length/2*8%128!=0)throw"unknown ECDSA concatinated r-s sig  length error";var e=t.substr(0,t.length/2),r=t.substr(t.length/2);return br.crypto.ECDSA.hexRSSigToASN1Sig(e,r)},br.crypto.ECDSA.hexRSSigToASN1Sig=function(t,e){var r=new F(t,16),n=new F(e,16);return br.crypto.ECDSA.biRSSigToASN1Sig(r,n)},br.crypto.ECDSA.biRSSigToASN1Sig=function(t,e){var r=br.asn1,n=new r.DERInteger({bigint:t}),i=new r.DERInteger({bigint:e});return new r.DERSequence({array:[n,i]}).getEncodedHex()},br.crypto.ECDSA.getName=function(t){return"2b8104001f"===t?"secp192k1":"2a8648ce3d030107"===t?"secp256r1":"2b8104000a"===t?"secp256k1":"2b81040021"===t?"secp224r1":"2b81040022"===t?"secp384r1":-1!=="|secp256r1|NIST P-256|P-256|prime256v1|".indexOf(t)?"secp256r1":-1!=="|secp256k1|".indexOf(t)?"secp256k1":-1!=="|secp224r1|NIST P-224|P-224|".indexOf(t)?"secp224r1":-1!=="|secp384r1|NIST P-384|P-384|".indexOf(t)?"secp384r1":null},void 0!==br&&br||(e.KJUR=br={}),void 0!==br.crypto&&br.crypto||(br.crypto={}),br.crypto.ECParameterDB=new function(){var t={},e={};function r(t){return new F(t,16)}this.getByName=function(r){var n=r;if(void 0!==e[n]&&(n=e[r]),void 0!==t[n])return t[n];throw"unregistered EC curve name: "+n},this.regist=function(n,i,o,s,a,u,c,h,l,f,g,d){t[n]={};var p=r(o),v=r(s),y=r(a),m=r(u),_=r(c),S=new qe(p,v,y),b=S.decodePointHex("04"+h+l);t[n].name=n,t[n].keylen=i,t[n].curve=S,t[n].G=b,t[n].n=m,t[n].h=_,t[n].oid=g,t[n].info=d;for(var w=0;w<f.length;w++)e[f[w]]=n}},br.crypto.ECParameterDB.regist("secp128r1",128,"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC","E87579C11079F43DD824993C2CEE5ED3","FFFFFFFE0000000075A30D1B9038A115","1","161FF7528B899B2D0C28607CA52C5B86","CF5AC8395BAFEB13C02DA292DDED7A83",[],"","secp128r1 : SECG curve over a 128 bit prime field"),br.crypto.ECParameterDB.regist("secp160k1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73","0","7","0100000000000000000001B8FA16DFAB9ACA16B6B3","1","3B4C382CE37AA192A4019E763036F4F5DD4D7EBB","938CF935318FDCED6BC28286531733C3F03C4FEE",[],"","secp160k1 : SECG curve over a 160 bit prime field"),br.crypto.ECParameterDB.regist("secp160r1",160,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC","1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45","0100000000000000000001F4C8F927AED3CA752257","1","4A96B5688EF573284664698968C38BB913CBFC82","23A628553168947D59DCC912042351377AC5FB32",[],"","secp160r1 : SECG curve over a 160 bit prime field"),br.crypto.ECParameterDB.regist("secp192k1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37","0","3","FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D","1","DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D","9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D",[]),br.crypto.ECParameterDB.regist("secp192r1",192,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC","64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1","FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831","1","188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012","07192B95FFC8DA78631011ED6B24CDD573F977A11E794811",[]),br.crypto.ECParameterDB.regist("secp224r1",224,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE","B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4","FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D","1","B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21","BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34",[]),br.crypto.ECParameterDB.regist("secp256k1",256,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F","0","7","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141","1","79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798","483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8",[]),br.crypto.ECParameterDB.regist("secp256r1",256,"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF","FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC","5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B","FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551","1","6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296","4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5",["NIST P-256","P-256","prime256v1"]),br.crypto.ECParameterDB.regist("secp384r1",384,"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC","B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF","FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973","1","AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7","3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f",["NIST P-384","P-384"]),br.crypto.ECParameterDB.regist("secp521r1",521,"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC","051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00","1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409","1","C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66","011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650",["NIST P-521","P-521"]);var Zr=function(){var t=function t(r,n,i){return e(y.AES,r,n,i)},e=function t(e,r,n,i){var o=y.enc.Hex.parse(r),s=y.enc.Hex.parse(n),a=y.enc.Hex.parse(i),u={};u.key=s,u.iv=a,u.ciphertext=o;var c=e.decrypt(u,s,{iv:a});return y.enc.Hex.stringify(c)},r=function t(e,r,i){return n(y.AES,e,r,i)},n=function t(e,r,n,i){var o=y.enc.Hex.parse(r),s=y.enc.Hex.parse(n),a=y.enc.Hex.parse(i),u=e.encrypt(o,s,{iv:a}),c=y.enc.Hex.parse(u.toString());return y.enc.Base64.stringify(c)},i={"AES-256-CBC":{proc:t,eproc:r,keylen:32,ivlen:16},"AES-192-CBC":{proc:t,eproc:r,keylen:24,ivlen:16},"AES-128-CBC":{proc:t,eproc:r,keylen:16,ivlen:16},"DES-EDE3-CBC":{proc:function t(r,n,i){return e(y.TripleDES,r,n,i)},eproc:function t(e,r,i){return n(y.TripleDES,e,r,i)},keylen:24,ivlen:8},"DES-CBC":{proc:function t(r,n,i){return e(y.DES,r,n,i)},eproc:function t(e,r,i){return n(y.DES,e,r,i)},keylen:8,ivlen:8}},o=function t(e){var r={},n=e.match(new RegExp("DEK-Info: ([^,]+),([0-9A-Fa-f]+)","m"));n&&(r.cipher=n[1],r.ivsalt=n[2]);var i=e.match(new RegExp("-----BEGIN ([A-Z]+) PRIVATE KEY-----"));i&&(r.type=i[1]);var o=-1,s=0;-1!=e.indexOf("\r\n\r\n")&&(o=e.indexOf("\r\n\r\n"),s=2),-1!=e.indexOf("\n\n")&&(o=e.indexOf("\n\n"),s=1);var a=e.indexOf("-----END");if(-1!=o&&-1!=a){var u=e.substring(o+2*s,a-s);u=u.replace(/\s+/g,""),r.data=u}return r},s=function t(e,r,n){for(var o=n.substring(0,16),s=y.enc.Hex.parse(o),a=y.enc.Utf8.parse(r),u=i[e].keylen+i[e].ivlen,c="",h=null;;){var l=y.algo.MD5.create();if(null!=h&&l.update(h),l.update(a),l.update(s),h=l.finalize(),(c+=y.enc.Hex.stringify(h)).length>=2*u)break}var f={};return f.keyhex=c.substr(0,2*i[e].keylen),f.ivhex=c.substr(2*i[e].keylen,2*i[e].ivlen),f},a=function t(e,r,n,o){var s=y.enc.Base64.parse(e),a=y.enc.Hex.stringify(s);return(0,i[r].proc)(a,n,o)};return{version:"1.0.0",parsePKCS5PEM:function t(e){return o(e)},getKeyAndUnusedIvByPasscodeAndIvsalt:function t(e,r,n){return s(e,r,n)},decryptKeyB64:function t(e,r,n,i){return a(e,r,n,i)},getDecryptedKeyHex:function t(e,r){var n=o(e),i=(n.type,n.cipher),u=n.ivsalt,c=n.data,h=s(i,r,u).keyhex;return a(c,i,h,u)},getEncryptedPKCS5PEMFromPrvKeyHex:function t(e,r,n,o,a){var u="";if(void 0!==o&&null!=o||(o="AES-256-CBC"),void 0===i[o])throw"KEYUTIL unsupported algorithm: "+o;void 0!==a&&null!=a||(a=function t(e){var r=y.lib.WordArray.random(e);return y.enc.Hex.stringify(r)}(i[o].ivlen).toUpperCase());var c=function t(e,r,n,o){return(0,i[r].eproc)(e,n,o)}(r,o,s(o,n,a).keyhex,a);u="-----BEGIN "+e+" PRIVATE KEY-----\r\n";return u+="Proc-Type: 4,ENCRYPTED\r\n",u+="DEK-Info: "+o+","+a+"\r\n",u+="\r\n",u+=c.replace(/(.{64})/g,"$1\r\n"),u+="\r\n-----END "+e+" PRIVATE KEY-----\r\n"},parseHexOfEncryptedPKCS8:function t(e){var r=Er,n=r.getChildIdx,i=r.getV,o={},s=n(e,0);if(2!=s.length)throw"malformed format: SEQUENCE(0).items != 2: "+s.length;o.ciphertext=i(e,s[1]);var a=n(e,s[0]);if(2!=a.length)throw"malformed format: SEQUENCE(0.0).items != 2: "+a.length;if("2a864886f70d01050d"!=i(e,a[0]))throw"this only supports pkcs5PBES2";var u=n(e,a[1]);if(2!=a.length)throw"malformed format: SEQUENCE(0.0.1).items != 2: "+u.length;var c=n(e,u[1]);if(2!=c.length)throw"malformed format: SEQUENCE(0.0.1.1).items != 2: "+c.length;if("2a864886f70d0307"!=i(e,c[0]))throw"this only supports TripleDES";o.encryptionSchemeAlg="TripleDES",o.encryptionSchemeIV=i(e,c[1]);var h=n(e,u[0]);if(2!=h.length)throw"malformed format: SEQUENCE(0.0.1.0).items != 2: "+h.length;if("2a864886f70d01050c"!=i(e,h[0]))throw"this only supports pkcs5PBKDF2";var l=n(e,h[1]);if(l.length<2)throw"malformed format: SEQUENCE(0.0.1.0.1).items < 2: "+l.length;o.pbkdf2Salt=i(e,l[0]);var f=i(e,l[1]);try{o.pbkdf2Iter=parseInt(f,16)}catch(t){throw"malformed format pbkdf2Iter: "+f}return o},getPBKDF2KeyHexFromParam:function t(e,r){var n=y.enc.Hex.parse(e.pbkdf2Salt),i=e.pbkdf2Iter,o=y.PBKDF2(r,n,{keySize:6,iterations:i});return y.enc.Hex.stringify(o)},_getPlainPKCS8HexFromEncryptedPKCS8PEM:function t(e,r){var n=Hr(e,"ENCRYPTED PRIVATE KEY"),i=this.parseHexOfEncryptedPKCS8(n),o=Zr.getPBKDF2KeyHexFromParam(i,r),s={};s.ciphertext=y.enc.Hex.parse(i.ciphertext);var a=y.enc.Hex.parse(o),u=y.enc.Hex.parse(i.encryptionSchemeIV),c=y.TripleDES.decrypt(s,a,{iv:u});return y.enc.Hex.stringify(c)},getKeyFromEncryptedPKCS8PEM:function t(e,r){var n=this._getPlainPKCS8HexFromEncryptedPKCS8PEM(e,r);return this.getKeyFromPlainPrivatePKCS8Hex(n)},parsePlainPrivatePKCS8Hex:function t(e){var r=Er,n=r.getChildIdx,i=r.getV,o={algparam:null};if("30"!=e.substr(0,2))throw"malformed plain PKCS8 private key(code:001)";var s=n(e,0);if(3!=s.length)throw"malformed plain PKCS8 private key(code:002)";if("30"!=e.substr(s[1],2))throw"malformed PKCS8 private key(code:003)";var a=n(e,s[1]);if(2!=a.length)throw"malformed PKCS8 private key(code:004)";if("06"!=e.substr(a[0],2))throw"malformed PKCS8 private key(code:005)";if(o.algoid=i(e,a[0]),"06"==e.substr(a[1],2)&&(o.algparam=i(e,a[1])),"04"!=e.substr(s[2],2))throw"malformed PKCS8 private key(code:006)";return o.keyidx=r.getVidx(e,s[2]),o},getKeyFromPlainPrivatePKCS8PEM:function t(e){var r=Hr(e,"PRIVATE KEY");return this.getKeyFromPlainPrivatePKCS8Hex(r)},getKeyFromPlainPrivatePKCS8Hex:function t(e){var r,n=this.parsePlainPrivatePKCS8Hex(e);if("2a864886f70d010101"==n.algoid)r=new He;else if("2a8648ce380401"==n.algoid)r=new br.crypto.DSA;else{if("2a8648ce3d0201"!=n.algoid)throw"unsupported private key algorithm";r=new br.crypto.ECDSA}return r.readPKCS8PrvKeyHex(e),r},_getKeyFromPublicPKCS8Hex:function t(e){var r,n=Er.getVbyList(e,0,[0,0],"06");if("2a864886f70d010101"===n)r=new He;else if("2a8648ce380401"===n)r=new br.crypto.DSA;else{if("2a8648ce3d0201"!==n)throw"unsupported PKCS#8 public key hex";r=new br.crypto.ECDSA}return r.readPKCS8PubKeyHex(e),r},parsePublicRawRSAKeyHex:function t(e){var r=Er,n=r.getChildIdx,i=r.getV,o={};if("30"!=e.substr(0,2))throw"malformed RSA key(code:001)";var s=n(e,0);if(2!=s.length)throw"malformed RSA key(code:002)";if("02"!=e.substr(s[0],2))throw"malformed RSA key(code:003)";if(o.n=i(e,s[0]),"02"!=e.substr(s[1],2))throw"malformed RSA key(code:004)";return o.e=i(e,s[1]),o},parsePublicPKCS8Hex:function t(e){var r=Er,n=r.getChildIdx,i=r.getV,o={algparam:null},s=n(e,0);if(2!=s.length)throw"outer DERSequence shall have 2 elements: "+s.length;var a=s[0];if("30"!=e.substr(a,2))throw"malformed PKCS8 public key(code:001)";var u=n(e,a);if(2!=u.length)throw"malformed PKCS8 public key(code:002)";if("06"!=e.substr(u[0],2))throw"malformed PKCS8 public key(code:003)";if(o.algoid=i(e,u[0]),"06"==e.substr(u[1],2)?o.algparam=i(e,u[1]):"30"==e.substr(u[1],2)&&(o.algparam={},o.algparam.p=r.getVbyList(e,u[1],[0],"02"),o.algparam.q=r.getVbyList(e,u[1],[1],"02"),o.algparam.g=r.getVbyList(e,u[1],[2],"02")),"03"!=e.substr(s[1],2))throw"malformed PKCS8 public key(code:004)";return o.key=i(e,s[1]).substr(2),o}}}();Zr.getKey=function(t,e,r){var n=(v=Er).getChildIdx,i=(v.getV,v.getVbyList),o=br.crypto,s=o.ECDSA,a=o.DSA,u=He,c=Hr,h=Zr;if(void 0!==u&&t instanceof u)return t;if(void 0!==s&&t instanceof s)return t;if(void 0!==a&&t instanceof a)return t;if(void 0!==t.curve&&void 0!==t.xy&&void 0===t.d)return new s({pub:t.xy,curve:t.curve});if(void 0!==t.curve&&void 0!==t.d)return new s({prv:t.d,curve:t.curve});if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(t.n,t.e),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.co&&void 0===t.qi)return(P=new u).setPrivateEx(t.n,t.e,t.d,t.p,t.q,t.dp,t.dq,t.co),P;if(void 0===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0===t.p)return(P=new u).setPrivate(t.n,t.e,t.d),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0===t.x)return(P=new a).setPublic(t.p,t.q,t.g,t.y),P;if(void 0!==t.p&&void 0!==t.q&&void 0!==t.g&&void 0!==t.y&&void 0!==t.x)return(P=new a).setPrivate(t.p,t.q,t.g,t.y,t.x),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0===t.d)return(P=new u).setPublic(Ir(t.n),Ir(t.e)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d&&void 0!==t.p&&void 0!==t.q&&void 0!==t.dp&&void 0!==t.dq&&void 0!==t.qi)return(P=new u).setPrivateEx(Ir(t.n),Ir(t.e),Ir(t.d),Ir(t.p),Ir(t.q),Ir(t.dp),Ir(t.dq),Ir(t.qi)),P;if("RSA"===t.kty&&void 0!==t.n&&void 0!==t.e&&void 0!==t.d)return(P=new u).setPrivate(Ir(t.n),Ir(t.e),Ir(t.d)),P;if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0===t.d){var l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Ir(t.x)).slice(-l)+("0000000000"+Ir(t.y)).slice(-l);return k.setPublicKeyHex(f),k}if("EC"===t.kty&&void 0!==t.crv&&void 0!==t.x&&void 0!==t.y&&void 0!==t.d){l=(k=new s({curve:t.crv})).ecparams.keylen/4,f="04"+("0000000000"+Ir(t.x)).slice(-l)+("0000000000"+Ir(t.y)).slice(-l);var g=("0000000000"+Ir(t.d)).slice(-l);return k.setPublicKeyHex(f),k.setPrivateKeyHex(g),k}if("pkcs5prv"===r){var d,p=t,v=Er;if(9===(d=n(p,0)).length)(P=new u).readPKCS5PrvKeyHex(p);else if(6===d.length)(P=new a).readPKCS5PrvKeyHex(p);else{if(!(d.length>2&&"04"===p.substr(d[1],2)))throw"unsupported PKCS#1/5 hexadecimal key";(P=new s).readPKCS5PrvKeyHex(p)}return P}if("pkcs8prv"===r)return P=h.getKeyFromPlainPrivatePKCS8Hex(t);if("pkcs8pub"===r)return h._getKeyFromPublicPKCS8Hex(t);if("x509pub"===r)return on.getPublicKeyFromCertHex(t);if(-1!=t.indexOf("-END CERTIFICATE-",0)||-1!=t.indexOf("-END X509 CERTIFICATE-",0)||-1!=t.indexOf("-END TRUSTED CERTIFICATE-",0))return on.getPublicKeyFromCertPEM(t);if(-1!=t.indexOf("-END PUBLIC KEY-")){var y=Hr(t,"PUBLIC KEY");return h._getKeyFromPublicPKCS8Hex(y)}if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var m=c(t,"RSA PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){var _=i(R=c(t,"DSA PRIVATE KEY"),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),w=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new F(_,16),new F(S,16),new F(b,16),new F(w,16),new F(E,16)),P}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1==t.indexOf("4,ENCRYPTED")){m=c(t,"EC PRIVATE KEY");return h.getKey(m,null,"pkcs5prv")}if(-1!=t.indexOf("-END PRIVATE KEY-"))return h.getKeyFromPlainPrivatePKCS8PEM(t);if(-1!=t.indexOf("-END RSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var x=h.getDecryptedKeyHex(t,e),A=new He;return A.readPKCS5PrvKeyHex(x),A}if(-1!=t.indexOf("-END EC PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var k,P=i(R=h.getDecryptedKeyHex(t,e),0,[1],"04"),C=i(R,0,[2,0],"06"),T=i(R,0,[3,0],"03").substr(2);if(void 0===br.crypto.OID.oidhex2name[C])throw"undefined OID(hex) in KJUR.crypto.OID: "+C;return(k=new s({curve:br.crypto.OID.oidhex2name[C]})).setPublicKeyHex(T),k.setPrivateKeyHex(P),k.isPublic=!1,k}if(-1!=t.indexOf("-END DSA PRIVATE KEY-")&&-1!=t.indexOf("4,ENCRYPTED")){var R;_=i(R=h.getDecryptedKeyHex(t,e),0,[1],"02"),S=i(R,0,[2],"02"),b=i(R,0,[3],"02"),w=i(R,0,[4],"02"),E=i(R,0,[5],"02");return(P=new a).setPrivate(new F(_,16),new F(S,16),new F(b,16),new F(w,16),new F(E,16)),P}if(-1!=t.indexOf("-END ENCRYPTED PRIVATE KEY-"))return h.getKeyFromEncryptedPKCS8PEM(t,e);throw new Error("not supported argument")},Zr.generateKeypair=function(t,e){if("RSA"==t){var r=e;(s=new He).generate(r,"10001"),s.isPrivate=!0,s.isPublic=!0;var n=new He,i=s.n.toString(16),o=s.e.toString(16);return n.setPublic(i,o),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}if("EC"==t){var s,a,u=e,c=new br.crypto.ECDSA({curve:u}).generateKeyPairHex();return(s=new br.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),s.setPrivateKeyHex(c.ecprvhex),s.isPrivate=!0,s.isPublic=!1,(n=new br.crypto.ECDSA({curve:u})).setPublicKeyHex(c.ecpubhex),n.isPrivate=!1,n.isPublic=!0,(a={}).prvKeyObj=s,a.pubKeyObj=n,a}throw"unknown algorithm: "+t},Zr.getPEM=function(t,e,r,n,i,o){var s=br,a=s.asn1,u=a.DERObjectIdentifier,c=a.DERInteger,h=a.ASN1Util.newObject,l=a.x509.SubjectPublicKeyInfo,f=s.crypto,g=f.DSA,d=f.ECDSA,p=He;function v(t){return h({seq:[{int:0},{int:{bigint:t.n}},{int:t.e},{int:{bigint:t.d}},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.dmp1}},{int:{bigint:t.dmq1}},{int:{bigint:t.coeff}}]})}function m(t){return h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a0",!0,{oid:{name:t.curveName}}]},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]})}function _(t){return h({seq:[{int:0},{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}},{int:{bigint:t.y}},{int:{bigint:t.x}}]})}if((void 0!==p&&t instanceof p||void 0!==g&&t instanceof g||void 0!==d&&t instanceof d)&&1==t.isPublic&&(void 0===e||"PKCS8PUB"==e))return Mr(F=new l(t).getEncodedHex(),"PUBLIC KEY");if("PKCS1PRV"==e&&void 0!==p&&t instanceof p&&(void 0===r||null==r)&&1==t.isPrivate)return Mr(F=v(t).getEncodedHex(),"RSA PRIVATE KEY");if("PKCS1PRV"==e&&void 0!==d&&t instanceof d&&(void 0===r||null==r)&&1==t.isPrivate){var S=new u({name:t.curveName}).getEncodedHex(),b=m(t).getEncodedHex(),w="";return w+=Mr(S,"EC PARAMETERS"),w+=Mr(b,"EC PRIVATE KEY")}if("PKCS1PRV"==e&&void 0!==g&&t instanceof g&&(void 0===r||null==r)&&1==t.isPrivate)return Mr(F=_(t).getEncodedHex(),"DSA PRIVATE KEY");if("PKCS5PRV"==e&&void 0!==p&&t instanceof p&&void 0!==r&&null!=r&&1==t.isPrivate){var F=v(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("RSA",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==d&&t instanceof d&&void 0!==r&&null!=r&&1==t.isPrivate){F=m(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("EC",F,r,n,o)}if("PKCS5PRV"==e&&void 0!==g&&t instanceof g&&void 0!==r&&null!=r&&1==t.isPrivate){F=_(t).getEncodedHex();return void 0===n&&(n="DES-EDE3-CBC"),this.getEncryptedPKCS5PEMFromPrvKeyHex("DSA",F,r,n,o)}var E=function t(e,r){var n=x(e,r);return new h({seq:[{seq:[{oid:{name:"pkcs5PBES2"}},{seq:[{seq:[{oid:{name:"pkcs5PBKDF2"}},{seq:[{octstr:{hex:n.pbkdf2Salt}},{int:n.pbkdf2Iter}]}]},{seq:[{oid:{name:"des-EDE3-CBC"}},{octstr:{hex:n.encryptionSchemeIV}}]}]}]},{octstr:{hex:n.ciphertext}}]}).getEncodedHex()},x=function t(e,r){var n=y.lib.WordArray.random(8),i=y.lib.WordArray.random(8),o=y.PBKDF2(r,n,{keySize:6,iterations:100}),s=y.enc.Hex.parse(e),a=y.TripleDES.encrypt(s,o,{iv:i})+"",u={};return u.ciphertext=a,u.pbkdf2Salt=y.enc.Hex.stringify(n),u.pbkdf2Iter=100,u.encryptionSchemeAlg="DES-EDE3-CBC",u.encryptionSchemeIV=y.enc.Hex.stringify(i),u};if("PKCS8PRV"==e&&null!=p&&t instanceof p&&1==t.isPrivate){var A=v(t).getEncodedHex();F=h({seq:[{int:0},{seq:[{oid:{name:"rsaEncryption"}},{null:!0}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?Mr(F,"PRIVATE KEY"):Mr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==d&&t instanceof d&&1==t.isPrivate){A=new h({seq:[{int:1},{octstr:{hex:t.prvKeyHex}},{tag:["a1",!0,{bitstr:{hex:"00"+t.pubKeyHex}}]}]}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"ecPublicKey"}},{oid:{name:t.curveName}}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?Mr(F,"PRIVATE KEY"):Mr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}if("PKCS8PRV"==e&&void 0!==g&&t instanceof g&&1==t.isPrivate){A=new c({bigint:t.x}).getEncodedHex(),F=h({seq:[{int:0},{seq:[{oid:{name:"dsa"}},{seq:[{int:{bigint:t.p}},{int:{bigint:t.q}},{int:{bigint:t.g}}]}]},{octstr:{hex:A}}]}).getEncodedHex();return void 0===r||null==r?Mr(F,"PRIVATE KEY"):Mr(b=E(F,r),"ENCRYPTED PRIVATE KEY")}throw new Error("unsupported object nor format")},Zr.getKeyFromCSRPEM=function(t){var e=Hr(t,"CERTIFICATE REQUEST");return Zr.getKeyFromCSRHex(e)},Zr.getKeyFromCSRHex=function(t){var e=Zr.parseCSRHex(t);return Zr.getKey(e.p8pubkeyhex,null,"pkcs8pub")},Zr.parseCSRHex=function(t){var e=Er,r=e.getChildIdx,n=e.getTLV,i={},o=t;if("30"!=o.substr(0,2))throw"malformed CSR(code:001)";var s=r(o,0);if(s.length<1)throw"malformed CSR(code:002)";if("30"!=o.substr(s[0],2))throw"malformed CSR(code:003)";var a=r(o,s[0]);if(a.length<3)throw"malformed CSR(code:004)";return i.p8pubkeyhex=n(o,a[2]),i},Zr.getKeyID=function(t){var e=Zr,r=Er;"string"==typeof t&&-1!=t.indexOf("BEGIN ")&&(t=e.getKey(t));var n=Hr(e.getPEM(t)),i=r.getIdxbyList(n,0,[1]),o=r.getV(n,i).substring(2);return br.crypto.Util.hashHex(o,"sha1")},Zr.getJWKFromKey=function(t){var e={};if(t instanceof He&&t.isPrivate)return e.kty="RSA",e.n=Rr(t.n.toString(16)),e.e=Rr(t.e.toString(16)),e.d=Rr(t.d.toString(16)),e.p=Rr(t.p.toString(16)),e.q=Rr(t.q.toString(16)),e.dp=Rr(t.dmp1.toString(16)),e.dq=Rr(t.dmq1.toString(16)),e.qi=Rr(t.coeff.toString(16)),e;if(t instanceof He&&t.isPublic)return e.kty="RSA",e.n=Rr(t.n.toString(16)),e.e=Rr(t.e.toString(16)),e;if(t instanceof br.crypto.ECDSA&&t.isPrivate){if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw"unsupported curve name for JWT: "+n;var r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Rr(r.x),e.y=Rr(r.y),e.d=Rr(t.prvKeyHex),e}if(t instanceof br.crypto.ECDSA&&t.isPublic){var n;if("P-256"!==(n=t.getShortNISTPCurveName())&&"P-384"!==n)throw"unsupported curve name for JWT: "+n;r=t.getPublicKeyXYHex();return e.kty="EC",e.crv=n,e.x=Rr(r.x),e.y=Rr(r.y),e}throw"not supported key object"},He.getPosArrayOfChildrenFromHex=function(t){return Er.getChildIdx(t,0)},He.getHexValueArrayOfChildrenFromHex=function(t){var e,r=Er.getV,n=r(t,(e=He.getPosArrayOfChildrenFromHex(t))[0]),i=r(t,e[1]),o=r(t,e[2]),s=r(t,e[3]),a=r(t,e[4]),u=r(t,e[5]),c=r(t,e[6]),h=r(t,e[7]),l=r(t,e[8]);return(e=new Array).push(n,i,o,s,a,u,c,h,l),e},He.prototype.readPrivateKeyFromPEMString=function(t){var e=Hr(t),r=He.getHexValueArrayOfChildrenFromHex(e);this.setPrivateEx(r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8])},He.prototype.readPKCS5PrvKeyHex=function(t){var e=He.getHexValueArrayOfChildrenFromHex(t);this.setPrivateEx(e[1],e[2],e[3],e[4],e[5],e[6],e[7],e[8])},He.prototype.readPKCS8PrvKeyHex=function(t){var e,r,n,i,o,s,a,u,c=Er,h=c.getVbyListEx;if(!1===c.isASN1HEX(t))throw new Error("not ASN.1 hex string");try{e=h(t,0,[2,0,1],"02"),r=h(t,0,[2,0,2],"02"),n=h(t,0,[2,0,3],"02"),i=h(t,0,[2,0,4],"02"),o=h(t,0,[2,0,5],"02"),s=h(t,0,[2,0,6],"02"),a=h(t,0,[2,0,7],"02"),u=h(t,0,[2,0,8],"02")}catch(t){throw new Error("malformed PKCS#8 plain RSA private key")}this.setPrivateEx(e,r,n,i,o,s,a,u)},He.prototype.readPKCS5PubKeyHex=function(t){var e=Er,r=e.getV;if(!1===e.isASN1HEX(t))throw new Error("keyHex is not ASN.1 hex string");var n=e.getChildIdx(t,0);if(2!==n.length||"02"!==t.substr(n[0],2)||"02"!==t.substr(n[1],2))throw new Error("wrong hex for PKCS#5 public key");var i=r(t,n[0]),o=r(t,n[1]);this.setPublic(i,o)},He.prototype.readPKCS8PubKeyHex=function(t){var e=Er;if(!1===e.isASN1HEX(t))throw new Error("not ASN.1 hex string");if("06092a864886f70d010101"!==e.getTLVbyListEx(t,0,[0,0]))throw new Error("not PKCS8 RSA public key");var r=e.getTLVbyListEx(t,0,[1,0]);this.readPKCS5PubKeyHex(r)},He.prototype.readCertPubKeyHex=function(t,e){var r,n;(r=new on).readCertHex(t),n=r.getPublicKeyHex(),this.readPKCS8PubKeyHex(n)};var tn=new RegExp("[^0-9a-f]","gi");function en(t,e){for(var r="",n=e/4-t.length,i=0;i<n;i++)r+="0";return r+t}function rn(t,e,r){for(var n="",i=0;n.length<e;)n+=Nr(r(Ur(t+String.fromCharCode.apply(String,[(4278190080&i)>>24,(16711680&i)>>16,(65280&i)>>8,255&i])))),i+=1;return n}function nn(t){for(var e in br.crypto.Util.DIGESTINFOHEAD){var r=br.crypto.Util.DIGESTINFOHEAD[e],n=r.length;if(t.substring(0,n)==r)return[e,t.substring(n)]}return[]}function on(t){var e,r=Er,n=r.getChildIdx,i=r.getV,o=r.getTLV,s=r.getVbyList,a=r.getVbyListEx,u=r.getTLVbyList,c=r.getTLVbyListEx,h=r.getIdxbyList,l=r.getIdxbyListEx,f=r.getVidx,g=r.oidname,d=r.hextooidstr,p=on,v=Hr;try{e=br.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV}catch(t){}this.HEX2STAG={"0c":"utf8",13:"prn",16:"ia5","1a":"vis","1e":"bmp"},this.hex=null,this.version=0,this.foffset=0,this.aExtInfo=null,this.getVersion=function(){return null===this.hex||0!==this.version?this.version:"a003020102"!==u(this.hex,0,[0,0])?(this.version=1,this.foffset=-1,1):(this.version=3,3)},this.getSerialNumberHex=function(){return a(this.hex,0,[0,0],"02")},this.getSignatureAlgorithmField=function(){var t=c(this.hex,0,[0,1]);return this.getAlgorithmIdentifierName(t)},this.getAlgorithmIdentifierName=function(t){for(var r in e)if(t===e[r])return r;return g(a(t,0,[0],"06"))},this.getIssuer=function(){return this.getX500Name(this.getIssuerHex())},this.getIssuerHex=function(){return u(this.hex,0,[0,3+this.foffset],"30")},this.getIssuerString=function(){return p.hex2dn(this.getIssuerHex())},this.getSubject=function(){return this.getX500Name(this.getSubjectHex())},this.getSubjectHex=function(){return u(this.hex,0,[0,5+this.foffset],"30")},this.getSubjectString=function(){return p.hex2dn(this.getSubjectHex())},this.getNotBefore=function(){var t=s(this.hex,0,[0,4+this.foffset,0]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getNotAfter=function(){var t=s(this.hex,0,[0,4+this.foffset,1]);return t=t.replace(/(..)/g,"%$1"),t=decodeURIComponent(t)},this.getPublicKeyHex=function(){return r.getTLVbyList(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyIdx=function(){return h(this.hex,0,[0,6+this.foffset],"30")},this.getPublicKeyContentIdx=function(){var t=this.getPublicKeyIdx();return h(this.hex,t,[1,0],"30")},this.getPublicKey=function(){return Zr.getKey(this.getPublicKeyHex(),null,"pkcs8pub")},this.getSignatureAlgorithmName=function(){var t=u(this.hex,0,[1],"30");return this.getAlgorithmIdentifierName(t)},this.getSignatureValueHex=function(){return s(this.hex,0,[2],"03",!0)},this.verifySignature=function(t){var e=this.getSignatureAlgorithmField(),r=this.getSignatureValueHex(),n=u(this.hex,0,[0],"30"),i=new br.crypto.Signature({alg:e});return i.init(t),i.updateHex(n),i.verify(r)},this.parseExt=function(t){var e,o,a;if(void 0===t){if(a=this.hex,3!==this.version)return-1;e=h(a,0,[0,7,0],"30"),o=n(a,e)}else{a=Hr(t);var u=h(a,0,[0,3,0,0],"06");if("2a864886f70d01090e"!=i(a,u))return void(this.aExtInfo=new Array);e=h(a,0,[0,3,0,1,0],"30"),o=n(a,e),this.hex=a}this.aExtInfo=new Array;for(var c=0;c<o.length;c++){var l={critical:!1},g=0;3===n(a,o[c]).length&&(l.critical=!0,g=1),l.oid=r.hextooidstr(s(a,o[c],[0],"06"));var d=h(a,o[c],[1+g]);l.vidx=f(a,d),this.aExtInfo.push(l)}},this.getExtInfo=function(t){var e=this.aExtInfo,r=t;if(t.match(/^[0-9.]+$/)||(r=br.asn1.x509.OID.name2oid(t)),""!==r)for(var n=0;n<e.length;n++)if(e[n].oid===r)return e[n]},this.getExtBasicConstraints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("basicConstraints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"basicConstraints"};if(e&&(n.critical=!0),"3000"===t)return n;if("30030101ff"===t)return n.cA=!0,n;if("30060101ff02"===t.substr(0,12)){var s=i(t,10),a=parseInt(s,16);return n.cA=!0,n.pathLen=a,n}throw new Error("hExtV parse error: "+t)},this.getExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("keyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"keyUsage"};return e&&(n.critical=!0),n.names=this.getExtKeyUsageString(t).split(","),n},this.getExtKeyUsageBin=function(t){if(void 0===t){var e=this.getExtInfo("keyUsage");if(void 0===e)return"";t=o(this.hex,e.vidx)}if(8!=t.length&&10!=t.length)throw new Error("malformed key usage value: "+t);var r="000000000000000"+parseInt(t.substr(6),16).toString(2);return 8==t.length&&(r=r.slice(-8)),10==t.length&&(r=r.slice(-16)),""==(r=r.replace(/0+$/,""))&&(r="0"),r},this.getExtKeyUsageString=function(t){for(var e=this.getExtKeyUsageBin(t),r=new Array,n=0;n<e.length;n++)"1"==e.substr(n,1)&&r.push(on.KEYUSAGE_NAME[n]);return r.join(",")},this.getExtSubjectKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectKeyIdentifier"};e&&(n.critical=!0);var s=i(t,0);return n.kid={hex:s},n},this.getExtAuthorityKeyIdentifier=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityKeyIdentifier");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"authorityKeyIdentifier"};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++){var c=t.substr(a[u],2);if("80"===c&&(s.kid={hex:i(t,a[u])}),"a1"===c){var h=o(t,a[u]),l=this.getGeneralNames(h);s.issuer=l[0].dn}"82"===c&&(s.sn={hex:i(t,a[u])})}return s},this.getExtExtKeyUsage=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("extKeyUsage");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var s={extname:"extKeyUsage",array:[]};e&&(s.critical=!0);for(var a=n(t,0),u=0;u<a.length;u++)s.array.push(g(i(t,a[u])));return s},this.getExtExtKeyUsageName=function(){var t=this.getExtInfo("extKeyUsage");if(void 0===t)return t;var e=new Array,r=o(this.hex,t.vidx);if(""===r)return e;for(var s=n(r,0),a=0;a<s.length;a++)e.push(g(i(r,s[a])));return e},this.getExtSubjectAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("subjectAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"subjectAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getExtIssuerAltName=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("issuerAltName");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var n={extname:"issuerAltName",array:[]};return e&&(n.critical=!0),n.array=this.getGeneralNames(t),n},this.getGeneralNames=function(t){for(var e=n(t,0),r=[],i=0;i<e.length;i++){var s=this.getGeneralName(o(t,e[i]));void 0!==s&&r.push(s)}return r},this.getGeneralName=function(t){var e=t.substr(0,2),r=i(t,0),n=Nr(r);return"81"==e?{rfc822:n}:"82"==e?{dns:n}:"86"==e?{uri:n}:"87"==e?{ip:Yr(r)}:"a4"==e?{dn:this.getX500Name(r)}:void 0},this.getExtSubjectAltName2=function(){var t,e,r,s=this.getExtInfo("subjectAltName");if(void 0===s)return s;for(var a=new Array,u=o(this.hex,s.vidx),c=n(u,0),h=0;h<c.length;h++)r=u.substr(c[h],2),t=i(u,c[h]),"81"===r&&(e=Lr(t),a.push(["MAIL",e])),"82"===r&&(e=Lr(t),a.push(["DNS",e])),"84"===r&&(e=on.hex2dn(t,0),a.push(["DN",e])),"86"===r&&(e=Lr(t),a.push(["URI",e])),"87"===r&&(e=Yr(t),a.push(["IP",e]));return a},this.getExtCRLDistributionPoints=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("cRLDistributionPoints");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"cRLDistributionPoints",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]);i.array.push(this.getDistributionPoint(u))}return i},this.getDistributionPoint=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.dpname=this.getDistributionPointName(a))}return e},this.getDistributionPointName=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=t.substr(r[i],2),a=o(t,r[i]);"a0"==s&&(e.full=this.getGeneralNames(a))}return e},this.getExtCRLDistributionPointsURI=function(){var t=this.getExtInfo("cRLDistributionPoints");if(void 0===t)return t;for(var e=new Array,r=n(this.hex,t.vidx),i=0;i<r.length;i++)try{var o=Lr(s(this.hex,r[i],[0,0,0],"86"));e.push(o)}catch(t){}return e},this.getExtAIAInfo=function(){var t=this.getExtInfo("authorityInfoAccess");if(void 0===t)return t;for(var e={ocsp:[],caissuer:[]},r=n(this.hex,t.vidx),i=0;i<r.length;i++){var o=s(this.hex,r[i],[0],"06"),a=s(this.hex,r[i],[1],"86");"2b06010505073001"===o&&e.ocsp.push(Lr(a)),"2b06010505073002"===o&&e.caissuer.push(Lr(a))}return e},this.getExtAuthorityInfoAccess=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("authorityInfoAccess");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"authorityInfoAccess",array:[]};e&&(i.critical=!0);for(var u=n(t,0),c=0;c<u.length;c++){var h=a(t,u[c],[0],"06"),l=Lr(s(t,u[c],[1],"86"));if("2b06010505073001"==h)i.array.push({ocsp:l});else{if("2b06010505073002"!=h)throw new Error("unknown method: "+h);i.array.push({caissuer:l})}}return i},this.getExtCertificatePolicies=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("certificatePolicies");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"certificatePolicies",array:[]};e&&(i.critical=!0);for(var s=n(t,0),a=0;a<s.length;a++){var u=o(t,s[a]),c=this.getPolicyInformation(u);i.array.push(c)}return i},this.getPolicyInformation=function(t){var e={},r=s(t,0,[0],"06");e.policyoid=g(r);var i=l(t,0,[1],"30");if(-1!=i){e.array=[];for(var a=n(t,i),u=0;u<a.length;u++){var c=o(t,a[u]),h=this.getPolicyQualifierInfo(c);e.array.push(h)}}return e},this.getPolicyQualifierInfo=function(t){var e={},r=s(t,0,[0],"06");if("2b06010505070201"===r){var n=a(t,0,[1],"16");e.cps=Nr(n)}else if("2b06010505070202"===r){var i=u(t,0,[1],"30");e.unotice=this.getUserNotice(i)}return e},this.getUserNotice=function(t){for(var e={},r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]);"30"!=s.substr(0,2)&&(e.exptext=this.getDisplayText(s))}return e},this.getDisplayText=function(t){var e={};return e.type={"0c":"utf8",16:"ia5","1a":"vis","1e":"bmp"}[t.substr(0,2)],e.str=Nr(i(t,0)),e},this.getExtCRLNumber=function(t,e){var r={extname:"cRLNumber"};if(e&&(r.critical=!0),"02"==t.substr(0,2))return r.num={hex:i(t,0)},r;throw new Error("hExtV parse error: "+t)},this.getExtCRLReason=function(t,e){var r={extname:"cRLReason"};if(e&&(r.critical=!0),"0a"==t.substr(0,2))return r.code=parseInt(i(t,0),16),r;throw new Error("hExtV parse error: "+t)},this.getExtOcspNonce=function(t,e){var r={extname:"ocspNonce"};e&&(r.critical=!0);var n=i(t,0);return r.hex=n,r},this.getExtOcspNoCheck=function(t,e){var r={extname:"ocspNoCheck"};return e&&(r.critical=!0),r},this.getExtAdobeTimeStamp=function(t,e){if(void 0===t&&void 0===e){var r=this.getExtInfo("adobeTimeStamp");if(void 0===r)return;t=o(this.hex,r.vidx),e=r.critical}var i={extname:"adobeTimeStamp"};e&&(i.critical=!0);var s=n(t,0);if(s.length>1){var a=o(t,s[1]),u=this.getGeneralName(a);null!=u.uri&&(i.uri=u.uri)}if(s.length>2){var c=o(t,s[2]);"0101ff"==c&&(i.reqauth=!0),"010100"==c&&(i.reqauth=!1)}return i},this.getX500NameRule=function(t){for(var e=null,r=[],n=0;n<t.length;n++)for(var i=t[n],o=0;o<i.length;o++)r.push(i[o]);for(n=0;n<r.length;n++){var s=r[n],a=s.ds,u=s.value,c=s.type;if(":"+a,"prn"!=a&&"utf8"!=a&&"ia5"!=a)return"mixed";if("ia5"==a){if("CN"!=c)return"mixed";if(br.lang.String.isMail(u))continue;return"mixed"}if("C"==c){if("prn"==a)continue;return"mixed"}if(":"+a,null==e)e=a;else if(e!==a)return"mixed"}return null==e?"prn":e},this.getX500Name=function(t){var e=this.getX500NameArray(t);return{array:e,str:this.dnarraytostr(e)}},this.getX500NameArray=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getRDN(o(t,r[i])));return e},this.getRDN=function(t){for(var e=[],r=n(t,0),i=0;i<r.length;i++)e.push(this.getAttrTypeAndValue(o(t,r[i])));return e},this.getAttrTypeAndValue=function(t){var e={type:null,value:null,ds:null},r=n(t,0),i=s(t,r[0],[],"06"),o=s(t,r[1],[]),a=br.asn1.ASN1Util.oidHexToInt(i);return e.type=br.asn1.x509.OID.oid2atype(a),e.value=Nr(o),e.ds=this.HEX2STAG[t.substr(r[1],2)],e},this.readCertPEM=function(t){this.readCertHex(v(t))},this.readCertHex=function(t){this.hex=t,this.getVersion();try{h(this.hex,0,[0,7],"a3"),this.parseExt()}catch(t){}},this.getParam=function(){var t={};return t.version=this.getVersion(),t.serial={hex:this.getSerialNumberHex()},t.sigalg=this.getSignatureAlgorithmField(),t.issuer=this.getIssuer(),t.notbefore=this.getNotBefore(),t.notafter=this.getNotAfter(),t.subject=this.getSubject(),t.sbjpubkey=Mr(this.getPublicKeyHex(),"PUBLIC KEY"),this.aExtInfo.length>0&&(t.ext=this.getExtParamArray()),t.sighex=this.getSignatureValueHex(),t},this.getExtParamArray=function(t){null==t&&(-1!=l(this.hex,0,[0,"[3]"])&&(t=c(this.hex,0,[0,"[3]",0],"30")));for(var e=[],r=n(t,0),i=0;i<r.length;i++){var s=o(t,r[i]),a=this.getExtParam(s);null!=a&&e.push(a)}return e},this.getExtParam=function(t){var e=n(t,0).length;if(2!=e&&3!=e)throw new Error("wrong number elements in Extension: "+e+" "+t);var r=d(s(t,0,[0],"06")),i=!1;3==e&&"0101ff"==u(t,0,[1])&&(i=!0);var o=u(t,0,[e-1,0]),a=void 0;if("2.5.29.14"==r?a=this.getExtSubjectKeyIdentifier(o,i):"2.5.29.15"==r?a=this.getExtKeyUsage(o,i):"2.5.29.17"==r?a=this.getExtSubjectAltName(o,i):"2.5.29.18"==r?a=this.getExtIssuerAltName(o,i):"2.5.29.19"==r?a=this.getExtBasicConstraints(o,i):"2.5.29.31"==r?a=this.getExtCRLDistributionPoints(o,i):"2.5.29.32"==r?a=this.getExtCertificatePolicies(o,i):"2.5.29.35"==r?a=this.getExtAuthorityKeyIdentifier(o,i):"2.5.29.37"==r?a=this.getExtExtKeyUsage(o,i):"1.3.6.1.5.5.7.1.1"==r?a=this.getExtAuthorityInfoAccess(o,i):"2.5.29.20"==r?a=this.getExtCRLNumber(o,i):"2.5.29.21"==r?a=this.getExtCRLReason(o,i):"1.3.6.1.5.5.7.48.1.2"==r?a=this.getExtOcspNonce(o,i):"1.3.6.1.5.5.7.48.1.5"==r?a=this.getExtOcspNoCheck(o,i):"1.2.840.113583.1.1.9.1"==r&&(a=this.getExtAdobeTimeStamp(o,i)),null!=a)return a;var c={extname:r,extn:o};return i&&(c.critical=!0),c},this.findExt=function(t,e){for(var r=0;r<t.length;r++)if(t[r].extname==e)return t[r];return null},this.updateExtCDPFullURI=function(t,e){var r=this.findExt(t,"cRLDistributionPoints");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)if(null!=n[i].dpname&&null!=n[i].dpname.full)for(var o=n[i].dpname.full,s=0;s<o.length;s++){var a=o[i];null!=a.uri&&(a.uri=e)}},this.updateExtAIAOCSP=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].ocsp&&(n[i].ocsp=e)},this.updateExtAIACAIssuer=function(t,e){var r=this.findExt(t,"authorityInfoAccess");if(null!=r&&null!=r.array)for(var n=r.array,i=0;i<n.length;i++)null!=n[i].caissuer&&(n[i].caissuer=e)},this.dnarraytostr=function(t){return"/"+t.map((function(t){return function e(t){return t.map((function(t){return function e(t){return t.type+"="+t.value}(t)})).join("+")}(t)})).join("/")},this.getInfo=function(){var t,e,r,n=function t(e){return JSON.stringify(e.array).replace(/[\[\]\{\}\"]/g,"")},i=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];if(r+="    policy oid: "+o.policyoid+"\n",void 0!==o.array)for(var s=0;s<o.array.length;s++){var a=o.array[s];void 0!==a.cps&&(r+="    cps: "+a.cps+"\n")}}return r},o=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];try{void 0!==o.dpname.full[0].uri&&(r+="    "+o.dpname.full[0].uri+"\n")}catch(t){}try{void 0!==o.dname.full[0].dn.hex&&(r+="    "+on.hex2dn(o.dpname.full[0].dn.hex)+"\n")}catch(t){}}return r},s=function t(e){for(var r="",n=e.array,i=0;i<n.length;i++){var o=n[i];void 0!==o.caissuer&&(r+="    caissuer: "+o.caissuer+"\n"),void 0!==o.ocsp&&(r+="    ocsp: "+o.ocsp+"\n")}return r};if(t="Basic Fields\n",t+="  serial number: "+this.getSerialNumberHex()+"\n",t+="  signature algorithm: "+this.getSignatureAlgorithmField()+"\n",t+="  issuer: "+this.getIssuerString()+"\n",t+="  notBefore: "+this.getNotBefore()+"\n",t+="  notAfter: "+this.getNotAfter()+"\n",t+="  subject: "+this.getSubjectString()+"\n",t+="  subject public key info: \n",t+="    key algorithm: "+(e=this.getPublicKey()).type+"\n","RSA"===e.type&&(t+="    n="+$r(e.n.toString(16)).substr(0,16)+"...\n",t+="    e="+$r(e.e.toString(16))+"\n"),null!=(r=this.aExtInfo)){t+="X509v3 Extensions:\n";for(var a=0;a<r.length;a++){var u=r[a],c=br.asn1.x509.OID.oid2name(u.oid);""===c&&(c=u.oid);var h="";if(!0===u.critical&&(h="CRITICAL"),t+="  "+c+" "+h+":\n","basicConstraints"===c){var l=this.getExtBasicConstraints();void 0===l.cA?t+="    {}\n":(t+="    cA=true",void 0!==l.pathLen&&(t+=", pathLen="+l.pathLen),t+="\n")}else if("keyUsage"===c)t+="    "+this.getExtKeyUsageString()+"\n";else if("subjectKeyIdentifier"===c)t+="    "+this.getExtSubjectKeyIdentifier().kid.hex+"\n";else if("authorityKeyIdentifier"===c){var f=this.getExtAuthorityKeyIdentifier();void 0!==f.kid&&(t+="    kid="+f.kid.hex+"\n")}else{if("extKeyUsage"===c)t+="    "+this.getExtExtKeyUsage().array.join(", ")+"\n";else if("subjectAltName"===c)t+="    "+n(this.getExtSubjectAltName())+"\n";else if("cRLDistributionPoints"===c)t+=o(this.getExtCRLDistributionPoints());else if("authorityInfoAccess"===c)t+=s(this.getExtAuthorityInfoAccess());else"certificatePolicies"===c&&(t+=i(this.getExtCertificatePolicies()))}}}return t+="signature algorithm: "+this.getSignatureAlgorithmName()+"\n",t+="signature: "+this.getSignatureValueHex().substr(0,16)+"...\n"},"string"==typeof t&&(-1!=t.indexOf("-----BEGIN")?this.readCertPEM(t):br.lang.String.isHex(t)&&this.readCertHex(t))}He.prototype.sign=function(t,e){var r=function t(r){return br.crypto.Util.hashString(r,e)}(t);return this.signWithMessageHash(r,e)},He.prototype.signWithMessageHash=function(t,e){var r=je(br.crypto.Util.getPaddedDigestInfoHex(t,e,this.n.bitLength()),16);return en(this.doPrivate(r).toString(16),this.n.bitLength())},He.prototype.signPSS=function(t,e,r){var n=function t(r){return br.crypto.Util.hashHex(r,e)}(Ur(t));return void 0===r&&(r=-1),this.signWithMessageHashPSS(n,e,r)},He.prototype.signWithMessageHashPSS=function(t,e,r){var n,i=Nr(t),o=i.length,s=this.n.bitLength()-1,a=Math.ceil(s/8),u=function t(r){return br.crypto.Util.hashHex(r,e)};if(-1===r||void 0===r)r=o;else if(-2===r)r=a-o-2;else if(r<-2)throw new Error("invalid salt length");if(a<o+r+2)throw new Error("data too long");var c="";r>0&&(c=new Array(r),(new Oe).nextBytes(c),c=String.fromCharCode.apply(String,c));var h=Nr(u(Ur("\0\0\0\0\0\0\0\0"+i+c))),l=[];for(n=0;n<a-r-o-2;n+=1)l[n]=0;var f=String.fromCharCode.apply(String,l)+""+c,g=rn(h,f.length,u),d=[];for(n=0;n<f.length;n+=1)d[n]=f.charCodeAt(n)^g.charCodeAt(n);var p=65280>>8*a-s&255;for(d[0]&=~p,n=0;n<o;n++)d.push(h.charCodeAt(n));return d.push(188),en(this.doPrivate(new F(d)).toString(16),this.n.bitLength())},He.prototype.verify=function(t,e){var r=je(e=(e=e.replace(tn,"")).replace(/[ \n]+/g,""),16);if(r.bitLength()>this.n.bitLength())return 0;var n=nn(this.doPublic(r).toString(16).replace(/^1f+00/,""));if(0==n.length)return!1;var i=n[0];return n[1]==function t(e){return br.crypto.Util.hashString(e,i)}(t)},He.prototype.verifyWithMessageHash=function(t,e){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var r=je(e,16);if(r.bitLength()>this.n.bitLength())return 0;var n=nn(this.doPublic(r).toString(16).replace(/^1f+00/,""));if(0==n.length)return!1;n[0];return n[1]==t},He.prototype.verifyPSS=function(t,e,r,n){var i=function t(e){return br.crypto.Util.hashHex(e,r)}(Ur(t));return void 0===n&&(n=-1),this.verifyWithMessageHashPSS(i,e,r,n)},He.prototype.verifyWithMessageHashPSS=function(t,e,r,n){if(e.length!=Math.ceil(this.n.bitLength()/4))return!1;var i,o=new F(e,16),s=function t(e){return br.crypto.Util.hashHex(e,r)},a=Nr(t),u=a.length,c=this.n.bitLength()-1,h=Math.ceil(c/8);if(-1===n||void 0===n)n=u;else if(-2===n)n=h-u-2;else if(n<-2)throw new Error("invalid salt length");if(h<u+n+2)throw new Error("data too long");var l=this.doPublic(o).toByteArray();for(i=0;i<l.length;i+=1)l[i]&=255;for(;l.length<h;)l.unshift(0);if(188!==l[h-1])throw new Error("encoded message does not end in 0xbc");var f=(l=String.fromCharCode.apply(String,l)).substr(0,h-u-1),g=l.substr(f.length,u),d=65280>>8*h-c&255;if(0!=(f.charCodeAt(0)&d))throw new Error("bits beyond keysize not zero");var p=rn(g,f.length,s),v=[];for(i=0;i<f.length;i+=1)v[i]=f.charCodeAt(i)^p.charCodeAt(i);v[0]&=~d;var y=h-u-n-2;for(i=0;i<y;i+=1)if(0!==v[i])throw new Error("leftmost octets not zero");if(1!==v[y])throw new Error("0x01 marker not found");return g===Nr(s(Ur("\0\0\0\0\0\0\0\0"+a+String.fromCharCode.apply(String,v.slice(-n)))))},He.SALT_LEN_HLEN=-1,He.SALT_LEN_MAX=-2,He.SALT_LEN_RECOVER=-2,on.hex2dn=function(t,e){if(void 0===e&&(e=0),"30"!==t.substr(e,2))throw new Error("malformed DN");for(var r=new Array,n=Er.getChildIdx(t,e),i=0;i<n.length;i++)r.push(on.hex2rdn(t,n[i]));return"/"+(r=r.map((function(t){return t.replace("/","\\/")}))).join("/")},on.hex2rdn=function(t,e){if(void 0===e&&(e=0),"31"!==t.substr(e,2))throw new Error("malformed RDN");for(var r=new Array,n=Er.getChildIdx(t,e),i=0;i<n.length;i++)r.push(on.hex2attrTypeValue(t,n[i]));return(r=r.map((function(t){return t.replace("+","\\+")}))).join("+")},on.hex2attrTypeValue=function(t,e){var r=Er,n=r.getV;if(void 0===e&&(e=0),"30"!==t.substr(e,2))throw new Error("malformed attribute type and value");var i=r.getChildIdx(t,e);2!==i.length||t.substr(i[0],2);var o=n(t,i[0]),s=br.asn1.ASN1Util.oidHexToInt(o);return br.asn1.x509.OID.oid2atype(s)+"="+Nr(n(t,i[1]))},on.getPublicKeyFromCertHex=function(t){var e=new on;return e.readCertHex(t),e.getPublicKey()},on.getPublicKeyFromCertPEM=function(t){var e=new on;return e.readCertPEM(t),e.getPublicKey()},on.getPublicKeyInfoPropOfCertPEM=function(t){var e,r,n=Er.getVbyList,i={};return i.algparam=null,(e=new on).readCertPEM(t),r=e.getPublicKeyHex(),i.keyhex=n(r,0,[1],"03").substr(2),i.algoid=n(r,0,[0,0],"06"),"2a8648ce3d0201"===i.algoid&&(i.algparam=n(r,0,[0,1],"06")),i},on.KEYUSAGE_NAME=["digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly"],void 0!==br&&br||(e.KJUR=br={}),void 0!==br.jws&&br.jws||(br.jws={}),br.jws.JWS=function(){var t=br.jws.JWS.isSafeJSONString;this.parseJWS=function(e,r){if(void 0===this.parsedJWS||!r&&void 0===this.parsedJWS.sigvalH){var n=e.match(/^([^.]+)\.([^.]+)\.([^.]+)$/);if(null==n)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";var i=n[1],o=n[2],s=n[3],a=i+"."+o;if(this.parsedJWS={},this.parsedJWS.headB64U=i,this.parsedJWS.payloadB64U=o,this.parsedJWS.sigvalB64U=s,this.parsedJWS.si=a,!r){var u=Ir(s),c=je(u,16);this.parsedJWS.sigvalH=u,this.parsedJWS.sigvalBI=c}var h=Fr(i),l=Fr(o);if(this.parsedJWS.headS=h,this.parsedJWS.payloadS=l,!t(h,this.parsedJWS,"headP"))throw"malformed JSON string for JWS Head: "+h}}},br.jws.JWS.sign=function(t,e,n,i,o){var s,a,u,c=br,h=c.jws.JWS,l=h.readSafeJSONString,f=h.isSafeJSONString,g=c.crypto,d=(g.ECDSA,g.Mac),p=g.Signature,v=JSON;if("string"!=typeof e&&"object"!=(void 0===e?"undefined":r(e)))throw"spHeader must be JSON string or object: "+e;if("object"==(void 0===e?"undefined":r(e))&&(a=e,s=v.stringify(a)),"string"==typeof e){if(!f(s=e))throw"JWS Head is not safe JSON string: "+s;a=l(s)}if(u=n,"object"==(void 0===n?"undefined":r(n))&&(u=v.stringify(n)),""!=t&&null!=t||void 0===a.alg||(t=a.alg),""!=t&&null!=t&&void 0===a.alg&&(a.alg=t,s=v.stringify(a)),t!==a.alg)throw"alg and sHeader.alg doesn't match: "+t+"!="+a.alg;var y=null;if(void 0===h.jwsalg2sigalg[t])throw"unsupported alg name: "+t;y=h.jwsalg2sigalg[t];var m=wr(s)+"."+wr(u),_="";if("Hmac"==y.substr(0,4)){if(void 0===i)throw"mac key shall be specified for HS* alg";var S=new d({alg:y,prov:"cryptojs",pass:i});S.updateString(m),_=S.doFinal()}else if(-1!=y.indexOf("withECDSA")){(w=new p({alg:y})).init(i,o),w.updateString(m);var b=w.sign();_=br.crypto.ECDSA.asn1SigToConcatSig(b)}else{var w;if("none"!=y)(w=new p({alg:y})).init(i,o),w.updateString(m),_=w.sign()}return m+"."+Rr(_)},br.jws.JWS.verify=function(t,e,n){var i,o=br,s=o.jws.JWS,a=s.readSafeJSONString,u=o.crypto,c=u.ECDSA,h=u.Mac,l=u.Signature;void 0!==r(He)&&(i=He);var f=t.split(".");if(3!==f.length)return!1;var g=f[0]+"."+f[1],d=Ir(f[2]),p=a(Fr(f[0])),v=null,y=null;if(void 0===p.alg)throw"algorithm not specified in header";if((y=(v=p.alg).substr(0,2),null!=n&&"[object Array]"===Object.prototype.toString.call(n)&&n.length>0)&&-1==(":"+n.join(":")+":").indexOf(":"+v+":"))throw"algorithm '"+v+"' not accepted in the list";if("none"!=v&&null===e)throw"key shall be specified to verify.";if("string"==typeof e&&-1!=e.indexOf("-----BEGIN ")&&(e=Zr.getKey(e)),!("RS"!=y&&"PS"!=y||e instanceof i))throw"key shall be a RSAKey obj for RS* and PS* algs";if("ES"==y&&!(e instanceof c))throw"key shall be a ECDSA obj for ES* algs";var m=null;if(void 0===s.jwsalg2sigalg[p.alg])throw"unsupported alg name: "+v;if("none"==(m=s.jwsalg2sigalg[v]))throw"not supported";if("Hmac"==m.substr(0,4)){if(void 0===e)throw"hexadecimal key shall be specified for HMAC";var _=new h({alg:m,pass:e});return _.updateString(g),d==_.doFinal()}if(-1!=m.indexOf("withECDSA")){var S,b=null;try{b=c.concatSigToASN1Sig(d)}catch(t){return!1}return(S=new l({alg:m})).init(e),S.updateString(g),S.verify(b)}return(S=new l({alg:m})).init(e),S.updateString(g),S.verify(d)},br.jws.JWS.parse=function(t){var e,r,n,i=t.split("."),o={};if(2!=i.length&&3!=i.length)throw"malformed sJWS: wrong number of '.' splitted elements";return e=i[0],r=i[1],3==i.length&&(n=i[2]),o.headerObj=br.jws.JWS.readSafeJSONString(Fr(e)),o.payloadObj=br.jws.JWS.readSafeJSONString(Fr(r)),o.headerPP=JSON.stringify(o.headerObj,null,"  "),null==o.payloadObj?o.payloadPP=Fr(r):o.payloadPP=JSON.stringify(o.payloadObj,null,"  "),void 0!==n&&(o.sigHex=Ir(n)),o},br.jws.JWS.verifyJWT=function(t,e,n){var i=br.jws,o=i.JWS,s=o.readSafeJSONString,a=o.inArray,u=o.includedArray,c=t.split("."),h=c[0],l=c[1],f=(Ir(c[2]),s(Fr(h))),g=s(Fr(l));if(void 0===f.alg)return!1;if(void 0===n.alg)throw"acceptField.alg shall be specified";if(!a(f.alg,n.alg))return!1;if(void 0!==g.iss&&"object"===r(n.iss)&&!a(g.iss,n.iss))return!1;if(void 0!==g.sub&&"object"===r(n.sub)&&!a(g.sub,n.sub))return!1;if(void 0!==g.aud&&"object"===r(n.aud))if("string"==typeof g.aud){if(!a(g.aud,n.aud))return!1}else if("object"==r(g.aud)&&!u(g.aud,n.aud))return!1;var d=i.IntDate.getNow();return void 0!==n.verifyAt&&"number"==typeof n.verifyAt&&(d=n.verifyAt),void 0!==n.gracePeriod&&"number"==typeof n.gracePeriod||(n.gracePeriod=0),!(void 0!==g.exp&&"number"==typeof g.exp&&g.exp+n.gracePeriod<d)&&(!(void 0!==g.nbf&&"number"==typeof g.nbf&&d<g.nbf-n.gracePeriod)&&(!(void 0!==g.iat&&"number"==typeof g.iat&&d<g.iat-n.gracePeriod)&&((void 0===g.jti||void 0===n.jti||g.jti===n.jti)&&!!o.verify(t,e,n.alg))))},br.jws.JWS.includedArray=function(t,e){var n=br.jws.JWS.inArray;if(null===t)return!1;if("object"!==(void 0===t?"undefined":r(t)))return!1;if("number"!=typeof t.length)return!1;for(var i=0;i<t.length;i++)if(!n(t[i],e))return!1;return!0},br.jws.JWS.inArray=function(t,e){if(null===e)return!1;if("object"!==(void 0===e?"undefined":r(e)))return!1;if("number"!=typeof e.length)return!1;for(var n=0;n<e.length;n++)if(e[n]==t)return!0;return!1},br.jws.JWS.jwsalg2sigalg={HS256:"HmacSHA256",HS384:"HmacSHA384",HS512:"HmacSHA512",RS256:"SHA256withRSA",RS384:"SHA384withRSA",RS512:"SHA512withRSA",ES256:"SHA256withECDSA",ES384:"SHA384withECDSA",PS256:"SHA256withRSAandMGF1",PS384:"SHA384withRSAandMGF1",PS512:"SHA512withRSAandMGF1",none:"none"},br.jws.JWS.isSafeJSONString=function(t,e,n){var i=null;try{return"object"!=(void 0===(i=Sr(t))?"undefined":r(i))||i.constructor===Array?0:(e&&(e[n]=i),1)}catch(t){return 0}},br.jws.JWS.readSafeJSONString=function(t){var e=null;try{return"object"!=(void 0===(e=Sr(t))?"undefined":r(e))||e.constructor===Array?null:e}catch(t){return null}},br.jws.JWS.getEncodedSignatureValueFromJWS=function(t){var e=t.match(/^[^.]+\.[^.]+\.([^.]+)$/);if(null==e)throw"JWS signature is not a form of 'Head.Payload.SigValue'.";return e[1]},br.jws.JWS.getJWKthumbprint=function(t){if("RSA"!==t.kty&&"EC"!==t.kty&&"oct"!==t.kty)throw"unsupported algorithm for JWK Thumprint";var e="{";if("RSA"===t.kty){if("string"!=typeof t.n||"string"!=typeof t.e)throw"wrong n and e value for RSA key";e+='"e":"'+t.e+'",',e+='"kty":"'+t.kty+'",',e+='"n":"'+t.n+'"}'}else if("EC"===t.kty){if("string"!=typeof t.crv||"string"!=typeof t.x||"string"!=typeof t.y)throw"wrong crv, x and y value for EC key";e+='"crv":"'+t.crv+'",',e+='"kty":"'+t.kty+'",',e+='"x":"'+t.x+'",',e+='"y":"'+t.y+'"}'}else if("oct"===t.kty){if("string"!=typeof t.k)throw"wrong k value for oct(symmetric) key";e+='"kty":"'+t.kty+'",',e+='"k":"'+t.k+'"}'}var r=Ur(e);return Rr(br.crypto.Util.hashHex(r,"sha256"))},br.jws.IntDate={},br.jws.IntDate.get=function(t){var e=br.jws.IntDate,r=e.getNow,n=e.getZulu;if("now"==t)return r();if("now + 1hour"==t)return r()+3600;if("now + 1day"==t)return r()+86400;if("now + 1month"==t)return r()+2592e3;if("now + 1year"==t)return r()+31536e3;if(t.match(/Z$/))return n(t);if(t.match(/^[0-9]+$/))return parseInt(t);throw"unsupported format: "+t},br.jws.IntDate.getZulu=function(t){return Kr(t)},br.jws.IntDate.getNow=function(){return~~(new Date/1e3)},br.jws.IntDate.intDate2UTCString=function(t){return new Date(1e3*t).toUTCString()},br.jws.IntDate.intDate2Zulu=function(t){var e=new Date(1e3*t);return("0000"+e.getUTCFullYear()).slice(-4)+("00"+(e.getUTCMonth()+1)).slice(-2)+("00"+e.getUTCDate()).slice(-2)+("00"+e.getUTCHours()).slice(-2)+("00"+e.getUTCMinutes()).slice(-2)+("00"+e.getUTCSeconds()).slice(-2)+"Z"},e.SecureRandom=Oe,e.rng_seed_time=Ie,e.BigInteger=F,e.RSAKey=He;var sn=br.crypto.EDSA;e.EDSA=sn;var an=br.crypto.DSA;e.DSA=an;var un=br.crypto.Signature;e.Signature=un;var cn=br.crypto.MessageDigest;e.MessageDigest=cn;var hn=br.crypto.Mac;e.Mac=hn;var ln=br.crypto.Cipher;e.Cipher=ln,e.KEYUTIL=Zr,e.ASN1HEX=Er,e.X509=on,e.CryptoJS=y,e.b64tohex=b,e.b64toBA=w,e.stoBA=xr,e.BAtos=Ar,e.BAtohex=kr,e.stohex=Pr,e.stob64=function fn(t){return S(Pr(t))},e.stob64u=function gn(t){return Cr(S(Pr(t)))},e.b64utos=function dn(t){return Ar(w(Tr(t)))},e.b64tob64u=Cr,e.b64utob64=Tr,e.hex2b64=S,e.hextob64u=Rr,e.b64utohex=Ir,e.utf8tob64u=wr,e.b64utoutf8=Fr,e.utf8tob64=function pn(t){return S(qr(Gr(t)))},e.b64toutf8=function vn(t){return decodeURIComponent(Jr(b(t)))},e.utf8tohex=Dr,e.hextoutf8=Lr,e.hextorstr=Nr,e.rstrtohex=Ur,e.hextob64=Br,e.hextob64nl=Or,e.b64nltohex=jr,e.hextopem=Mr,e.pemtohex=Hr,e.hextoArrayBuffer=function yn(t){if(t.length%2!=0)throw"input is not even length";if(null==t.match(/^[0-9A-Fa-f]+$/))throw"input is not hexadecimal";for(var e=new ArrayBuffer(t.length/2),r=new DataView(e),n=0;n<t.length/2;n++)r.setUint8(n,parseInt(t.substr(2*n,2),16));return e},e.ArrayBuffertohex=function mn(t){for(var e="",r=new DataView(t),n=0;n<t.byteLength;n++)e+=("00"+r.getUint8(n).toString(16)).slice(-2);return e},e.zulutomsec=Vr,e.zulutosec=Kr,e.zulutodate=function _n(t){return new Date(Vr(t))},e.datetozulu=function Sn(t,e,r){var n,i=t.getUTCFullYear();if(e){if(i<1950||2049<i)throw"not proper year for UTCTime: "+i;n=(""+i).slice(-2)}else n=("000"+i).slice(-4);if(n+=("0"+(t.getUTCMonth()+1)).slice(-2),n+=("0"+t.getUTCDate()).slice(-2),n+=("0"+t.getUTCHours()).slice(-2),n+=("0"+t.getUTCMinutes()).slice(-2),n+=("0"+t.getUTCSeconds()).slice(-2),r){var o=t.getUTCMilliseconds();0!==o&&(n+="."+(o=(o=("00"+o).slice(-3)).replace(/0+$/g,"")))}return n+="Z"},e.uricmptohex=qr,e.hextouricmp=Jr,e.ipv6tohex=Wr,e.hextoipv6=zr,e.hextoip=Yr,e.iptohex=function bn(t){var e="malformed IP address";if(!(t=t.toLowerCase(t)).match(/^[0-9.]+$/)){if(t.match(/^[0-9a-f:]+$/)&&-1!==t.indexOf(":"))return Wr(t);throw e}var r=t.split(".");if(4!==r.length)throw e;var n="";try{for(var i=0;i<4;i++){n+=("0"+parseInt(r[i]).toString(16)).slice(-2)}return n}catch(t){throw e}},e.encodeURIComponentAll=Gr,e.newline_toUnix=function wn(t){return t=t.replace(/\r\n/gm,"\n")},e.newline_toDos=function Fn(t){return t=(t=t.replace(/\r\n/gm,"\n")).replace(/\n/gm,"\r\n")},e.hextoposhex=$r,e.intarystrtohex=function En(t){t=(t=(t=t.replace(/^\s*\[\s*/,"")).replace(/\s*\]\s*$/,"")).replace(/\s*/g,"");try{return t.split(/,/).map((function(t,e,r){var n=parseInt(t);if(n<0||255<n)throw"integer not in range 0-255";return("00"+n.toString(16)).slice(-2)})).join("")}catch(t){throw"malformed integer array string: "+t}},e.strdiffidx=function t(e,r){var n=e.length;e.length>r.length&&(n=r.length);for(var i=0;i<n;i++)if(e.charCodeAt(i)!=r.charCodeAt(i))return i;return e.length!=r.length?n:-1},e.KJUR=br;var xn=br.crypto;e.crypto=xn;var An=br.asn1;e.asn1=An;var kn=br.jws;e.jws=kn;var Pn=br.lang;e.lang=Pn}).call(this,r(28).Buffer)},function(t,e,r){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var n=r(30),i=r(31),o=r(32);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(s()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,r){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,r);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,r)}function c(t,e,r,n){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function i(t,e,r,n){if(e.byteLength,r<0||e.byteLength<r)throw new RangeError("'offset' is out of bounds");if(e.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");e=void 0===r&&void 0===n?new Uint8Array(e):void 0===n?new Uint8Array(e,r):new Uint8Array(e,r,n);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,r,n):"string"==typeof e?function s(t,e,r){"string"==typeof r&&""!==r||(r="utf8");if(!u.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|d(e,r),i=(t=a(t,n)).write(e,r);i!==n&&(t=t.slice(0,i));return t}(t,e,r):function c(t,e){if(u.isBuffer(e)){var r=0|g(e.length);return 0===(t=a(t,r)).length||e.copy(t,0,0,r),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||function n(t){return t!=t}(e.length)?a(t,0):f(t,e);if("Buffer"===e.type&&o(e.data))return f(t,e.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function h(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(h(e),t=a(t,e<0?0:0|g(e)),!u.TYPED_ARRAY_SUPPORT)for(var r=0;r<e;++r)t[r]=0;return t}function f(t,e){var r=e.length<0?0:0|g(e.length);t=a(t,r);for(var n=0;n<r;n+=1)t[n]=255&e[n];return t}function g(t){if(t>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|t}function d(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var r=t.length;if(0===r)return 0;for(var n=!1;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return K(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return q(t).length;default:if(n)return K(t).length;e=(""+e).toLowerCase(),n=!0}}function p(t,e,r){var n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return I(this,e,r);case"utf8":case"utf-8":return A(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return x(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function v(t,e,r){var n=t[e];t[e]=t[r],t[r]=n}function y(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=u.from(e,n)),u.isBuffer(e))return 0===e.length?-1:m(t,e,r,n,i);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):m(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function m(t,e,r,n,i){var o,s=1,a=t.length,u=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,u/=2,r/=2}function c(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){var h=-1;for(o=r;o<a;o++)if(c(t,o)===c(e,-1===h?0:o-h)){if(-1===h&&(h=o),o-h+1===u)return h*s}else-1!==h&&(o-=o-h),h=-1}else for(r+u>a&&(r=a-u),o=r;o>=0;o--){for(var l=!0,f=0;f<u;f++)if(c(t,o+f)!==c(e,f)){l=!1;break}if(l)return o}return-1}function _(t,e,r,n){r=Number(r)||0;var i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");n>o/2&&(n=o/2);for(var s=0;s<n;++s){var a=parseInt(e.substr(2*s,2),16);if(isNaN(a))return s;t[r+s]=a}return s}function S(t,e,r,n){return J(K(e,t.length-r),t,r,n)}function b(t,e,r,n){return J(function i(t){for(var e=[],r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function w(t,e,r,n){return b(t,e,r,n)}function F(t,e,r,n){return J(q(e),t,r,n)}function E(t,e,r,n){return J(function i(t,e){for(var r,n,i,o=[],s=0;s<t.length&&!((e-=2)<0);++s)n=(r=t.charCodeAt(s))>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function x(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function A(t,e,r){r=Math.min(t.length,r);for(var n=[],i=e;i<r;){var o,s,a,u,c=t[i],h=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=r)switch(l){case 1:c<128&&(h=c);break;case 2:128==(192&(o=t[i+1]))&&(u=(31&c)<<6|63&o)>127&&(h=u);break;case 3:o=t[i+1],s=t[i+2],128==(192&o)&&128==(192&s)&&(u=(15&c)<<12|(63&o)<<6|63&s)>2047&&(u<55296||u>57343)&&(h=u);break;case 4:o=t[i+1],s=t[i+2],a=t[i+3],128==(192&o)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(h=u)}null===h?(h=65533,l=1):h>65535&&(h-=65536,n.push(h>>>10&1023|55296),h=56320|1023&h),n.push(h),i+=l}return function f(t){var e=t.length;if(e<=C)return String.fromCharCode.apply(String,t);var r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=C));return r}(n)}e.Buffer=u,e.SlowBuffer=function k(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function P(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=s(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,r){return c(null,t,e,r)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,r){return function n(t,e,r,i){return h(e),e<=0?a(t,e):void 0!==r?"string"==typeof i?a(t,e).fill(r,i):a(t,e).fill(r):a(t,e)}(null,t,e,r)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function t(e){return!(null==e||!e._isBuffer)},u.compare=function t(e,r){if(!u.isBuffer(e)||!u.isBuffer(r))throw new TypeError("Arguments must be Buffers");if(e===r)return 0;for(var n=e.length,i=r.length,o=0,s=Math.min(n,i);o<s;++o)if(e[o]!==r[o]){n=e[o],i=r[o];break}return n<i?-1:i<n?1:0},u.isEncoding=function t(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function t(e,r){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===r)for(r=0,n=0;n<e.length;++n)r+=e[n].length;var i=u.allocUnsafe(r),s=0;for(n=0;n<e.length;++n){var a=e[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(i,s),s+=a.length}return i},u.byteLength=d,u.prototype._isBuffer=!0,u.prototype.swap16=function t(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var r=0;r<e;r+=2)v(this,r,r+1);return this},u.prototype.swap32=function t(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var r=0;r<e;r+=4)v(this,r,r+3),v(this,r+1,r+2);return this},u.prototype.swap64=function t(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var r=0;r<e;r+=8)v(this,r,r+7),v(this,r+1,r+6),v(this,r+2,r+5),v(this,r+3,r+4);return this},u.prototype.toString=function t(){var e=0|this.length;return 0===e?"":0===arguments.length?A(this,0,e):p.apply(this,arguments)},u.prototype.equals=function t(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function t(){var r="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(r=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(r+=" ... ")),"<Buffer "+r+">"},u.prototype.compare=function t(e,r,n,i,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===r&&(r=0),void 0===n&&(n=e?e.length:0),void 0===i&&(i=0),void 0===o&&(o=this.length),r<0||n>e.length||i<0||o>this.length)throw new RangeError("out of range index");if(i>=o&&r>=n)return 0;if(i>=o)return-1;if(r>=n)return 1;if(this===e)return 0;for(var s=(o>>>=0)-(i>>>=0),a=(n>>>=0)-(r>>>=0),c=Math.min(s,a),h=this.slice(i,o),l=e.slice(r,n),f=0;f<c;++f)if(h[f]!==l[f]){s=h[f],a=l[f];break}return s<a?-1:a<s?1:0},u.prototype.includes=function t(e,r,n){return-1!==this.indexOf(e,r,n)},u.prototype.indexOf=function t(e,r,n){return y(this,e,r,n,!0)},u.prototype.lastIndexOf=function t(e,r,n){return y(this,e,r,n,!1)},u.prototype.write=function t(e,r,n,i){if(void 0===r)i="utf8",n=this.length,r=0;else if(void 0===n&&"string"==typeof r)i=r,n=this.length,r=0;else{if(!isFinite(r))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");r|=0,isFinite(n)?(n|=0,void 0===i&&(i="utf8")):(i=n,n=void 0)}var o=this.length-r;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||r<0)||r>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");for(var s=!1;;)switch(i){case"hex":return _(this,e,r,n);case"utf8":case"utf-8":return S(this,e,r,n);case"ascii":return b(this,e,r,n);case"latin1":case"binary":return w(this,e,r,n);case"base64":return F(this,e,r,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,r,n);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},u.prototype.toJSON=function t(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var C=4096;function T(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){var n="";r=Math.min(t.length,r);for(var i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function I(t,e,r){var n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);for(var i="",o=e;o<r;++o)i+=V(t[o]);return i}function D(t,e,r){for(var n=t.slice(e,r),i="",o=0;o<n.length;o+=2)i+=String.fromCharCode(n[o]+256*n[o+1]);return i}function L(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function N(t,e,r,n,i,o){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function U(t,e,r,n){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-r,2);i<o;++i)t[r+i]=(e&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function B(t,e,r,n){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-r,4);i<o;++i)t[r+i]=e>>>8*(n?i:3-i)&255}function O(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function j(t,e,r,n,o){return o||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function M(t,e,r,n,o){return o||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}u.prototype.slice=function t(e,r){var n,i=this.length;if((e=~~e)<0?(e+=i)<0&&(e=0):e>i&&(e=i),(r=void 0===r?i:~~r)<0?(r+=i)<0&&(r=0):r>i&&(r=i),r<e&&(r=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,r)).__proto__=u.prototype;else{var o=r-e;n=new u(o,void 0);for(var s=0;s<o;++s)n[s]=this[s+e]}return n},u.prototype.readUIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i},u.prototype.readUIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e+--r],o=1;r>0&&(o*=256);)i+=this[e+--r]*o;return i},u.prototype.readUInt8=function t(e,r){return r||L(e,1,this.length),this[e]},u.prototype.readUInt16LE=function t(e,r){return r||L(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function t(e,r){return r||L(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function t(e,r){return r||L(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function t(e,r){return r||L(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=this[e],o=1,s=0;++s<r&&(o*=256);)i+=this[e+s]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*r)),i},u.prototype.readIntBE=function t(e,r,n){e|=0,r|=0,n||L(e,r,this.length);for(var i=r,o=1,s=this[e+--i];i>0&&(o*=256);)s+=this[e+--i]*o;return s>=(o*=128)&&(s-=Math.pow(2,8*r)),s},u.prototype.readInt8=function t(e,r){return r||L(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function t(e,r){r||L(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function t(e,r){r||L(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function t(e,r){return r||L(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function t(e,r){return r||L(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!0,23,4)},u.prototype.readFloatBE=function t(e,r){return r||L(e,4,this.length),i.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function t(e,r){return r||L(e,8,this.length),i.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=1,s=0;for(this[r]=255&e;++s<n&&(o*=256);)this[r+s]=e/o&255;return r+n},u.prototype.writeUIntBE=function t(e,r,n,i){(e=+e,r|=0,n|=0,i)||N(this,e,r,n,Math.pow(2,8*n)-1,0);var o=n-1,s=1;for(this[r+o]=255&e;--o>=0&&(s*=256);)this[r+o]=e/s&255;return r+n},u.prototype.writeUInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[r]=255&e,r+1},u.prototype.writeUInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeUInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeUInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r+3]=e>>>24,this[r+2]=e>>>16,this[r+1]=e>>>8,this[r]=255&e):B(this,e,r,!0),r+4},u.prototype.writeUInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeIntLE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=0,a=1,u=0;for(this[r]=255&e;++s<n&&(a*=256);)e<0&&0===u&&0!==this[r+s-1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeIntBE=function t(e,r,n,i){if(e=+e,r|=0,!i){var o=Math.pow(2,8*n-1);N(this,e,r,n,o-1,-o)}var s=n-1,a=1,u=0;for(this[r+s]=255&e;--s>=0&&(a*=256);)e<0&&0===u&&0!==this[r+s+1]&&(u=1),this[r+s]=(e/a>>0)-u&255;return r+n},u.prototype.writeInt8=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[r]=255&e,r+1},u.prototype.writeInt16LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8):U(this,e,r,!0),r+2},u.prototype.writeInt16BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>8,this[r+1]=255&e):U(this,e,r,!1),r+2},u.prototype.writeInt32LE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[r]=255&e,this[r+1]=e>>>8,this[r+2]=e>>>16,this[r+3]=e>>>24):B(this,e,r,!0),r+4},u.prototype.writeInt32BE=function t(e,r,n){return e=+e,r|=0,n||N(this,e,r,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[r]=e>>>24,this[r+1]=e>>>16,this[r+2]=e>>>8,this[r+3]=255&e):B(this,e,r,!1),r+4},u.prototype.writeFloatLE=function t(e,r,n){return j(this,e,r,!0,n)},u.prototype.writeFloatBE=function t(e,r,n){return j(this,e,r,!1,n)},u.prototype.writeDoubleLE=function t(e,r,n){return M(this,e,r,!0,n)},u.prototype.writeDoubleBE=function t(e,r,n){return M(this,e,r,!1,n)},u.prototype.copy=function t(e,r,n,i){if(n||(n=0),i||0===i||(i=this.length),r>=e.length&&(r=e.length),r||(r=0),i>0&&i<n&&(i=n),i===n)return 0;if(0===e.length||0===this.length)return 0;if(r<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),e.length-r<i-n&&(i=e.length-r+n);var o,s=i-n;if(this===e&&n<r&&r<i)for(o=s-1;o>=0;--o)e[o+r]=this[o+n];else if(s<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<s;++o)e[o+r]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+s),r);return s},u.prototype.fill=function t(e,r,n,i){if("string"==typeof e){if("string"==typeof r?(i=r,r=0,n=this.length):"string"==typeof n&&(i=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!u.isEncoding(i))throw new TypeError("Unknown encoding: "+i)}else"number"==typeof e&&(e&=255);if(r<0||this.length<r||this.length<n)throw new RangeError("Out of range index");if(n<=r)return this;var s;if(r>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(s=r;s<n;++s)this[s]=e;else{var a=u.isBuffer(e)?e:K(new u(e,i).toString()),c=a.length;for(s=0;s<n-r;++s)this[s+r]=a[s%c]}return this};var H=/[^+\/0-9A-Za-z-_]/g;function V(t){return t<16?"0"+t.toString(16):t.toString(16)}function K(t,e){var r;e=e||1/0;for(var n=t.length,i=null,o=[],s=0;s<n;++s){if((r=t.charCodeAt(s))>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function q(t){return n.toByteArray(function e(t){if((t=function e(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(H,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function J(t,e,r,n){for(var i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}}).call(this,r(29))},function(t,e){var r;r=function(){return this}();try{r=r||new Function("return this")()}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e,r){"use strict";e.byteLength=function n(t){var e=f(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function i(t){var e,r,n=f(t),i=n[0],o=n[1],s=new u(function c(t,e,r){return 3*(e+r)/4-r}(0,i,o)),h=0,l=o>0?i-4:i;for(r=0;r<l;r+=4)e=a[t.charCodeAt(r)]<<18|a[t.charCodeAt(r+1)]<<12|a[t.charCodeAt(r+2)]<<6|a[t.charCodeAt(r+3)],s[h++]=e>>16&255,s[h++]=e>>8&255,s[h++]=255&e;2===o&&(e=a[t.charCodeAt(r)]<<2|a[t.charCodeAt(r+1)]>>4,s[h++]=255&e);1===o&&(e=a[t.charCodeAt(r)]<<10|a[t.charCodeAt(r+1)]<<4|a[t.charCodeAt(r+2)]>>2,s[h++]=e>>8&255,s[h++]=255&e);return s},e.fromByteArray=function o(t){for(var e,r=t.length,n=r%3,i=[],o=16383,a=0,u=r-n;a<u;a+=o)i.push(g(t,a,a+o>u?u:a+o));1===n?(e=t[r-1],i.push(s[e>>2]+s[e<<4&63]+"==")):2===n&&(e=(t[r-2]<<8)+t[r-1],i.push(s[e>>10]+s[e>>4&63]+s[e<<2&63]+"="));return i.join("")};for(var s=[],a=[],u="undefined"!=typeof Uint8Array?Uint8Array:Array,c="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",h=0,l=c.length;h<l;++h)s[h]=c[h],a[c.charCodeAt(h)]=h;function f(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function g(t,e,r){for(var n,i,o=[],a=e;a<r;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(s[(i=n)>>18&63]+s[i>>12&63]+s[i>>6&63]+s[63&i]);return o.join("")}a["-".charCodeAt(0)]=62,a["_".charCodeAt(0)]=63},function(t,e){
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,u=(1<<a)-1,c=u>>1,h=-7,l=r?i-1:0,f=r?-1:1,g=t[e+l];for(l+=f,o=g&(1<<-h)-1,g>>=-h,h+=a;h>0;o=256*o+t[e+l],l+=f,h-=8);for(s=o&(1<<-h)-1,o>>=-h,h+=n;h>0;s=256*s+t[e+l],l+=f,h-=8);if(0===o)o=1-c;else{if(o===u)return s?NaN:1/0*(g?-1:1);s+=Math.pow(2,n),o-=c}return(g?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,u,c=8*o-i-1,h=(1<<c)-1,l=h>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,g=n?0:o-1,d=n?1:-1,p=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=h):(s=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-s))<1&&(s--,u*=2),(e+=s+l>=1?f/u:f*Math.pow(2,1-l))*u>=2&&(s++,u/=2),s+l>=h?(a=0,s=h):s+l>=1?(a=(e*u-1)*Math.pow(2,i),s+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),s=0));i>=8;t[r+g]=255&a,g+=d,a/=256,i-=8);for(s=s<<i|a,c+=i;c>0;t[r+g]=255&s,g+=d,s/=256,c-=8);t[r+g-d]|=128*p}},function(t,e){var r={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==r.call(t)}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function n(t){var e=t.jws,r=t.KeyUtil,n=t.X509,o=t.crypto,s=t.hextob64u,a=t.b64tohex,u=t.AllowedSigningAlgs;return function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.parseJwt=function t(r){i.Log.debug("JoseUtil.parseJwt");try{var n=e.JWS.parse(r);return{header:n.headerObj,payload:n.payloadObj}}catch(t){i.Log.error(t)}},t.validateJwt=function e(o,s,u,c,h,l,f){i.Log.debug("JoseUtil.validateJwt");try{if("RSA"===s.kty)if(s.e&&s.n)s=r.getKey(s);else{if(!s.x5c||!s.x5c.length)return i.Log.error("JoseUtil.validateJwt: RSA key missing key material",s),Promise.reject(new Error("RSA key missing key material"));var g=a(s.x5c[0]);s=n.getPublicKeyFromCertHex(g)}else{if("EC"!==s.kty)return i.Log.error("JoseUtil.validateJwt: Unsupported key type",s&&s.kty),Promise.reject(new Error(s.kty));if(!(s.crv&&s.x&&s.y))return i.Log.error("JoseUtil.validateJwt: EC key missing key material",s),Promise.reject(new Error("EC key missing key material"));s=r.getKey(s)}return t._validateJwt(o,s,u,c,h,l,f)}catch(t){return i.Log.error(t&&t.message||t),Promise.reject("JWT validation failed")}},t.validateJwtAttributes=function e(r,n,o,s,a,u){s||(s=0),a||(a=parseInt(Date.now()/1e3));var c=t.parseJwt(r).payload;if(!c.iss)return i.Log.error("JoseUtil._validateJwt: issuer was not provided"),Promise.reject(new Error("issuer was not provided"));if(c.iss!==n)return i.Log.error("JoseUtil._validateJwt: Invalid issuer in token",c.iss),Promise.reject(new Error("Invalid issuer in token: "+c.iss));if(!c.aud)return i.Log.error("JoseUtil._validateJwt: aud was not provided"),Promise.reject(new Error("aud was not provided"));if(!(c.aud===o||Array.isArray(c.aud)&&c.aud.indexOf(o)>=0))return i.Log.error("JoseUtil._validateJwt: Invalid audience in token",c.aud),Promise.reject(new Error("Invalid audience in token: "+c.aud));if(c.azp&&c.azp!==o)return i.Log.error("JoseUtil._validateJwt: Invalid azp in token",c.azp),Promise.reject(new Error("Invalid azp in token: "+c.azp));if(!u){var h=a+s,l=a-s;if(!c.iat)return i.Log.error("JoseUtil._validateJwt: iat was not provided"),Promise.reject(new Error("iat was not provided"));if(h<c.iat)return i.Log.error("JoseUtil._validateJwt: iat is in the future",c.iat),Promise.reject(new Error("iat is in the future: "+c.iat));if(c.nbf&&h<c.nbf)return i.Log.error("JoseUtil._validateJwt: nbf is in the future",c.nbf),Promise.reject(new Error("nbf is in the future: "+c.nbf));if(!c.exp)return i.Log.error("JoseUtil._validateJwt: exp was not provided"),Promise.reject(new Error("exp was not provided"));if(c.exp<l)return i.Log.error("JoseUtil._validateJwt: exp is in the past",c.exp),Promise.reject(new Error("exp is in the past:"+c.exp))}return Promise.resolve(c)},t._validateJwt=function r(n,o,s,a,c,h,l){return t.validateJwtAttributes(n,s,a,c,h,l).then((function(t){try{return e.JWS.verify(n,o,u)?t:(i.Log.error("JoseUtil._validateJwt: signature validation failed"),Promise.reject(new Error("signature validation failed")))}catch(t){return i.Log.error(t&&t.message||t),Promise.reject(new Error("signature validation failed"))}}))},t.hashString=function t(e,r){try{return o.Util.hashString(e,r)}catch(t){i.Log.error(t)}},t.hexToBase64Url=function t(e){try{return s(e)}catch(t){i.Log.error(t)}},t}()};var i=r(0);t.exports=e.default},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SigninResponse=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(3);function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SigninResponse=function(){function t(e){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"#";o(this,t);var n=i.UrlUtility.parseUrlFragment(e,r);this.error=n.error,this.error_description=n.error_description,this.error_uri=n.error_uri,this.code=n.code,this.state=n.state,this.id_token=n.id_token,this.session_state=n.session_state,this.access_token=n.access_token,this.token_type=n.token_type,this.scope=n.scope,this.profile=void 0,this.expires_in=n.expires_in}return n(t,[{key:"expires_in",get:function t(){if(this.expires_at){var e=parseInt(Date.now()/1e3);return this.expires_at-e}},set:function t(e){var r=parseInt(e);if("number"==typeof r&&r>0){var n=parseInt(Date.now()/1e3);this.expires_at=n+r}}},{key:"expired",get:function t(){var e=this.expires_in;if(void 0!==e)return e<=0}},{key:"scopes",get:function t(){return(this.scope||"").split(" ")}},{key:"isOpenIdConnect",get:function t(){return this.scopes.indexOf("openid")>=0||!!this.id_token}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutRequest=void 0;var n=r(0),i=r(3),o=r(9);e.SignoutRequest=function t(e){var r=e.url,s=e.id_token_hint,a=e.post_logout_redirect_uri,u=e.data,c=e.extraQueryParams,h=e.request_type;if(function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),!r)throw n.Log.error("SignoutRequest.ctor: No url passed"),new Error("url");for(var f in s&&(r=i.UrlUtility.addQueryParam(r,"id_token_hint",s)),a&&(r=i.UrlUtility.addQueryParam(r,"post_logout_redirect_uri",a),u&&(this.state=new o.State({data:u,request_type:h}),r=i.UrlUtility.addQueryParam(r,"state",this.state.id))),c)r=i.UrlUtility.addQueryParam(r,f,c[f]);this.url=r}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SignoutResponse=void 0;var n=r(3);e.SignoutResponse=function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var i=n.UrlUtility.parseUrlFragment(e,"?");this.error=i.error,this.error_description=i.error_description,this.error_uri=i.error_uri,this.state=i.state}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.InMemoryWebStorage=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.InMemoryWebStorage=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t),this._data={}}return t.prototype.getItem=function t(e){return i.Log.debug("InMemoryWebStorage.getItem",e),this._data[e]},t.prototype.setItem=function t(e,r){i.Log.debug("InMemoryWebStorage.setItem",e),this._data[e]=r},t.prototype.removeItem=function t(e){i.Log.debug("InMemoryWebStorage.removeItem",e),delete this._data[e]},t.prototype.key=function t(e){return Object.getOwnPropertyNames(this._data)[e]},n(t,[{key:"length",get:function t(){return Object.getOwnPropertyNames(this._data).length}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManager=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(10),s=r(39),a=r(15),u=r(45),c=r(47),h=r(18),l=r(8),f=r(20),g=r(11),d=r(4);function p(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function v(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManager=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:c.SilentRenewService,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:h.SessionMonitor,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:f.TokenRevocationClient,l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:g.TokenClient,y=arguments.length>5&&void 0!==arguments[5]?arguments[5]:d.JoseUtil;p(this,e),r instanceof s.UserManagerSettings||(r=new s.UserManagerSettings(r));var m=v(this,t.call(this,r));return m._events=new u.UserManagerEvents(r),m._silentRenewService=new n(m),m.settings.automaticSilentRenew&&(i.Log.debug("UserManager.ctor: automaticSilentRenew is configured, setting up silent renew"),m.startSilentRenew()),m.settings.monitorSession&&(i.Log.debug("UserManager.ctor: monitorSession is configured, setting up session monitor"),m._sessionMonitor=new o(m)),m._tokenRevocationClient=new a(m._settings),m._tokenClient=new l(m._settings),m._joseUtil=y,m}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.getUser=function t(){var e=this;return this._loadUser().then((function(t){return t?(i.Log.info("UserManager.getUser: user loaded"),e._events.load(t,!1),t):(i.Log.info("UserManager.getUser: user not found in storage"),null)}))},e.prototype.removeUser=function t(){var e=this;return this.storeUser(null).then((function(){i.Log.info("UserManager.removeUser: user removed from storage"),e._events.unload()}))},e.prototype.signinRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:r";var r={useReplaceToNavigate:e.useReplaceToNavigate};return this._signinStart(e,this._redirectNavigator,r).then((function(){i.Log.info("UserManager.signinRedirect: successful")}))},e.prototype.signinRedirectCallback=function t(e){return this._signinEnd(e||this._redirectNavigator.url).then((function(t){return t.profile&&t.profile.sub?i.Log.info("UserManager.signinRedirectCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinRedirectCallback: no sub"),t}))},e.prototype.signinPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="si:p";var r=e.redirect_uri||this.settings.popup_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.display="popup",this._signin(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopup: signinPopup successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopup: no sub")),t}))):(i.Log.error("UserManager.signinPopup: No popup_redirect_uri or redirect_uri configured"),Promise.reject(new Error("No popup_redirect_uri or redirect_uri configured")))},e.prototype.signinPopupCallback=function t(e){return this._signinCallback(e,this._popupNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinPopupCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinPopupCallback: no sub")),t})).catch((function(t){i.Log.error(t.message)}))},e.prototype.signinSilent=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return r=Object.assign({},r),this._loadUser().then((function(t){return t&&t.refresh_token?(r.refresh_token=t.refresh_token,e._useRefreshToken(r)):(r.request_type="si:s",r.id_token_hint=r.id_token_hint||e.settings.includeIdTokenInSilentRenew&&t&&t.id_token,t&&e._settings.validateSubOnSilentRenew&&(i.Log.debug("UserManager.signinSilent, subject prior to silent renew: ",t.profile.sub),r.current_sub=t.profile.sub),e._signinSilentIframe(r))}))},e.prototype._useRefreshToken=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return this._tokenClient.exchangeRefreshToken(r).then((function(t){return t?t.access_token?e._loadUser().then((function(r){if(r){var n=Promise.resolve();return t.id_token&&(n=e._validateIdTokenFromTokenRefreshToken(r.profile,t.id_token)),n.then((function(){return i.Log.debug("UserManager._useRefreshToken: refresh token response success"),r.id_token=t.id_token||r.id_token,r.access_token=t.access_token,r.refresh_token=t.refresh_token||r.refresh_token,r.expires_in=t.expires_in,e.storeUser(r).then((function(){return e._events.load(r),r}))}))}return null})):(i.Log.error("UserManager._useRefreshToken: No access token returned from token endpoint"),Promise.reject("No access token returned from token endpoint")):(i.Log.error("UserManager._useRefreshToken: No response returned from token endpoint"),Promise.reject("No response returned from token endpoint"))}))},e.prototype._validateIdTokenFromTokenRefreshToken=function t(e,r){var n=this;return this._metadataService.getIssuer().then((function(t){return n.settings.getEpochTime().then((function(o){return n._joseUtil.validateJwtAttributes(r,t,n._settings.client_id,n._settings.clockSkew,o).then((function(t){return t?t.sub!==e.sub?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: sub in id_token does not match current sub"),Promise.reject(new Error("sub in id_token does not match current sub"))):t.auth_time&&t.auth_time!==e.auth_time?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: auth_time in id_token does not match original auth_time"),Promise.reject(new Error("auth_time in id_token does not match original auth_time"))):t.azp&&t.azp!==e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp in id_token does not match original azp"),Promise.reject(new Error("azp in id_token does not match original azp"))):!t.azp&&e.azp?(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: azp not in id_token, but present in original id_token"),Promise.reject(new Error("azp not in id_token, but present in original id_token"))):void 0:(i.Log.error("UserManager._validateIdTokenFromTokenRefreshToken: Failed to validate id_token"),Promise.reject(new Error("Failed to validate id_token")))}))}))}))},e.prototype._signinSilentIframe=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=e.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return r?(e.redirect_uri=r,e.prompt=e.prompt||"none",this._signin(e,this._iframeNavigator,{startUrl:r,silentRequestTimeout:e.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilent: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilent: no sub")),t}))):(i.Log.error("UserManager.signinSilent: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype.signinSilentCallback=function t(e){return this._signinCallback(e,this._iframeNavigator).then((function(t){return t&&(t.profile&&t.profile.sub?i.Log.info("UserManager.signinSilentCallback: successful, signed in sub: ",t.profile.sub):i.Log.info("UserManager.signinSilentCallback: no sub")),t}))},e.prototype.signinCallback=function t(e){var r=this;return this.readSigninResponseState(e).then((function(t){var n=t.state;t.response;return"si:r"===n.request_type?r.signinRedirectCallback(e):"si:p"===n.request_type?r.signinPopupCallback(e):"si:s"===n.request_type?r.signinSilentCallback(e):Promise.reject(new Error("invalid response_type in state"))}))},e.prototype.signoutCallback=function t(e,r){var n=this;return this.readSignoutResponseState(e).then((function(t){var i=t.state,o=t.response;return i?"so:r"===i.request_type?n.signoutRedirectCallback(e):"so:p"===i.request_type?n.signoutPopupCallback(e,r):Promise.reject(new Error("invalid response_type in state")):o}))},e.prototype.querySessionStatus=function t(){var e=this,r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(r=Object.assign({},r)).request_type="si:s";var n=r.redirect_uri||this.settings.silent_redirect_uri||this.settings.redirect_uri;return n?(r.redirect_uri=n,r.prompt="none",r.response_type=r.response_type||this.settings.query_status_response_type,r.scope=r.scope||"openid",r.skipUserInfo=!0,this._signinStart(r,this._iframeNavigator,{startUrl:n,silentRequestTimeout:r.silentRequestTimeout||this.settings.silentRequestTimeout}).then((function(t){return e.processSigninResponse(t.url).then((function(t){if(i.Log.debug("UserManager.querySessionStatus: got signin response"),t.session_state&&t.profile.sub)return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for sub: ",t.profile.sub),{session_state:t.session_state,sub:t.profile.sub,sid:t.profile.sid};i.Log.info("querySessionStatus successful, user not authenticated")})).catch((function(t){if(t.session_state&&e.settings.monitorAnonymousSession&&("login_required"==t.message||"consent_required"==t.message||"interaction_required"==t.message||"account_selection_required"==t.message))return i.Log.info("UserManager.querySessionStatus: querySessionStatus success for anonymous user"),{session_state:t.session_state};throw t}))}))):(i.Log.error("UserManager.querySessionStatus: No silent_redirect_uri configured"),Promise.reject(new Error("No silent_redirect_uri configured")))},e.prototype._signin=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signinStart(e,r,i).then((function(t){return n._signinEnd(t.url,e)}))},e.prototype._signinStart=function t(e,r){var n=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return r.prepare(o).then((function(t){return i.Log.debug("UserManager._signinStart: got navigator window handle"),n.createSigninRequest(e).then((function(e){return i.Log.debug("UserManager._signinStart: got signin request"),o.url=e.url,o.id=e.state.id,t.navigate(o)})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signinStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signinEnd=function t(e){var r=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return this.processSigninResponse(e).then((function(t){i.Log.debug("UserManager._signinEnd: got signin response");var e=new a.User(t);if(n.current_sub){if(n.current_sub!==e.profile.sub)return i.Log.debug("UserManager._signinEnd: current user does not match user returned from signin. sub from signin: ",e.profile.sub),Promise.reject(new Error("login_required"));i.Log.debug("UserManager._signinEnd: current user matches user returned from signin")}return r.storeUser(e).then((function(){return i.Log.debug("UserManager._signinEnd: user stored"),r._events.load(e),e}))}))},e.prototype._signinCallback=function t(e,r){i.Log.debug("UserManager._signinCallback");var n="query"===this._settings.response_mode||!this._settings.response_mode&&l.SigninRequest.isCode(this._settings.response_type)?"?":"#";return r.callback(e,void 0,n)},e.prototype.signoutRedirect=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:r";var r=e.post_logout_redirect_uri||this.settings.post_logout_redirect_uri;r&&(e.post_logout_redirect_uri=r);var n={useReplaceToNavigate:e.useReplaceToNavigate};return this._signoutStart(e,this._redirectNavigator,n).then((function(){i.Log.info("UserManager.signoutRedirect: successful")}))},e.prototype.signoutRedirectCallback=function t(e){return this._signoutEnd(e||this._redirectNavigator.url).then((function(t){return i.Log.info("UserManager.signoutRedirectCallback: successful"),t}))},e.prototype.signoutPopup=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(e=Object.assign({},e)).request_type="so:p";var r=e.post_logout_redirect_uri||this.settings.popup_post_logout_redirect_uri||this.settings.post_logout_redirect_uri;return e.post_logout_redirect_uri=r,e.display="popup",e.post_logout_redirect_uri&&(e.state=e.state||{}),this._signout(e,this._popupNavigator,{startUrl:r,popupWindowFeatures:e.popupWindowFeatures||this.settings.popupWindowFeatures,popupWindowTarget:e.popupWindowTarget||this.settings.popupWindowTarget}).then((function(){i.Log.info("UserManager.signoutPopup: successful")}))},e.prototype.signoutPopupCallback=function t(e,r){void 0===r&&"boolean"==typeof e&&(r=e,e=null);return this._popupNavigator.callback(e,r,"?").then((function(){i.Log.info("UserManager.signoutPopupCallback: successful")}))},e.prototype._signout=function t(e,r){var n=this,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this._signoutStart(e,r,i).then((function(t){return n._signoutEnd(t.url)}))},e.prototype._signoutStart=function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=this,n=arguments[1],o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return n.prepare(o).then((function(t){return i.Log.debug("UserManager._signoutStart: got navigator window handle"),r._loadUser().then((function(n){return i.Log.debug("UserManager._signoutStart: loaded current user from storage"),(r._settings.revokeAccessTokenOnSignout?r._revokeInternal(n):Promise.resolve()).then((function(){var s=e.id_token_hint||n&&n.id_token;return s&&(i.Log.debug("UserManager._signoutStart: Setting id_token into signout request"),e.id_token_hint=s),r.removeUser().then((function(){return i.Log.debug("UserManager._signoutStart: user removed, creating signout request"),r.createSignoutRequest(e).then((function(e){return i.Log.debug("UserManager._signoutStart: got signout request"),o.url=e.url,e.state&&(o.id=e.state.id),t.navigate(o)}))}))}))})).catch((function(e){throw t.close&&(i.Log.debug("UserManager._signoutStart: Error after preparing navigator, closing navigator window"),t.close()),e}))}))},e.prototype._signoutEnd=function t(e){return this.processSignoutResponse(e).then((function(t){return i.Log.debug("UserManager._signoutEnd: got signout response"),t}))},e.prototype.revokeAccessToken=function t(){var e=this;return this._loadUser().then((function(t){return e._revokeInternal(t,!0).then((function(r){if(r)return i.Log.debug("UserManager.revokeAccessToken: removing token properties from user and re-storing"),t.access_token=null,t.refresh_token=null,t.expires_at=null,t.token_type=null,e.storeUser(t).then((function(){i.Log.debug("UserManager.revokeAccessToken: user stored"),e._events.load(t)}))}))})).then((function(){i.Log.info("UserManager.revokeAccessToken: access token revoked successfully")}))},e.prototype._revokeInternal=function t(e,r){var n=this;if(e){var o=e.access_token,s=e.refresh_token;return this._revokeAccessTokenInternal(o,r).then((function(t){return n._revokeRefreshTokenInternal(s,r).then((function(e){return t||e||i.Log.debug("UserManager.revokeAccessToken: no need to revoke due to no token(s), or JWT format"),t||e}))}))}return Promise.resolve(!1)},e.prototype._revokeAccessTokenInternal=function t(e,r){return!e||e.indexOf(".")>=0?Promise.resolve(!1):this._tokenRevocationClient.revoke(e,r).then((function(){return!0}))},e.prototype._revokeRefreshTokenInternal=function t(e,r){return e?this._tokenRevocationClient.revoke(e,r,"refresh_token").then((function(){return!0})):Promise.resolve(!1)},e.prototype.startSilentRenew=function t(){this._silentRenewService.start()},e.prototype.stopSilentRenew=function t(){this._silentRenewService.stop()},e.prototype._loadUser=function t(){return this._userStore.get(this._userStoreKey).then((function(t){return t?(i.Log.debug("UserManager._loadUser: user storageString loaded"),a.User.fromStorageString(t)):(i.Log.debug("UserManager._loadUser: no user storageString"),null)}))},e.prototype.storeUser=function t(e){if(e){i.Log.debug("UserManager.storeUser: storing user");var r=e.toStorageString();return this._userStore.set(this._userStoreKey,r)}return i.Log.debug("storeUser.storeUser: removing user"),this._userStore.remove(this._userStoreKey)},n(e,[{key:"_redirectNavigator",get:function t(){return this.settings.redirectNavigator}},{key:"_popupNavigator",get:function t(){return this.settings.popupNavigator}},{key:"_iframeNavigator",get:function t(){return this.settings.iframeNavigator}},{key:"_userStore",get:function t(){return this.settings.userStore}},{key:"events",get:function t(){return this._events}},{key:"_userStoreKey",get:function t(){return"user:"+this.settings.authority+":"+this.settings.client_id}}]),e}(o.OidcClient)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerSettings=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=(r(0),r(5)),o=r(40),s=r(41),a=r(43),u=r(6),c=r(1),h=r(8);function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.UserManagerSettings=function(t){function e(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=r.popup_redirect_uri,i=r.popup_post_logout_redirect_uri,g=r.popupWindowFeatures,d=r.popupWindowTarget,p=r.silent_redirect_uri,v=r.silentRequestTimeout,y=r.automaticSilentRenew,m=void 0!==y&&y,_=r.validateSubOnSilentRenew,S=void 0!==_&&_,b=r.includeIdTokenInSilentRenew,w=void 0===b||b,F=r.monitorSession,E=void 0===F||F,x=r.monitorAnonymousSession,A=void 0!==x&&x,k=r.checkSessionInterval,P=void 0===k?2e3:k,C=r.stopCheckSessionOnError,T=void 0===C||C,R=r.query_status_response_type,I=r.revokeAccessTokenOnSignout,D=void 0!==I&&I,L=r.accessTokenExpiringNotificationTime,N=void 0===L?60:L,U=r.redirectNavigator,B=void 0===U?new o.RedirectNavigator:U,O=r.popupNavigator,j=void 0===O?new s.PopupNavigator:O,M=r.iframeNavigator,H=void 0===M?new a.IFrameNavigator:M,V=r.userStore,K=void 0===V?new u.WebStorageStateStore({store:c.Global.sessionStorage}):V;l(this,e);var q=f(this,t.call(this,arguments[0]));return q._popup_redirect_uri=n,q._popup_post_logout_redirect_uri=i,q._popupWindowFeatures=g,q._popupWindowTarget=d,q._silent_redirect_uri=p,q._silentRequestTimeout=v,q._automaticSilentRenew=m,q._validateSubOnSilentRenew=S,q._includeIdTokenInSilentRenew=w,q._accessTokenExpiringNotificationTime=N,q._monitorSession=E,q._monitorAnonymousSession=A,q._checkSessionInterval=P,q._stopCheckSessionOnError=T,R?q._query_status_response_type=R:arguments[0]&&arguments[0].response_type?q._query_status_response_type=h.SigninRequest.isOidc(arguments[0].response_type)?"id_token":"code":q._query_status_response_type="id_token",q._revokeAccessTokenOnSignout=D,q._redirectNavigator=B,q._popupNavigator=j,q._iframeNavigator=H,q._userStore=K,q}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),n(e,[{key:"popup_redirect_uri",get:function t(){return this._popup_redirect_uri}},{key:"popup_post_logout_redirect_uri",get:function t(){return this._popup_post_logout_redirect_uri}},{key:"popupWindowFeatures",get:function t(){return this._popupWindowFeatures}},{key:"popupWindowTarget",get:function t(){return this._popupWindowTarget}},{key:"silent_redirect_uri",get:function t(){return this._silent_redirect_uri}},{key:"silentRequestTimeout",get:function t(){return this._silentRequestTimeout}},{key:"automaticSilentRenew",get:function t(){return this._automaticSilentRenew}},{key:"validateSubOnSilentRenew",get:function t(){return this._validateSubOnSilentRenew}},{key:"includeIdTokenInSilentRenew",get:function t(){return this._includeIdTokenInSilentRenew}},{key:"accessTokenExpiringNotificationTime",get:function t(){return this._accessTokenExpiringNotificationTime}},{key:"monitorSession",get:function t(){return this._monitorSession}},{key:"monitorAnonymousSession",get:function t(){return this._monitorAnonymousSession}},{key:"checkSessionInterval",get:function t(){return this._checkSessionInterval}},{key:"stopCheckSessionOnError",get:function t(){return this._stopCheckSessionOnError}},{key:"query_status_response_type",get:function t(){return this._query_status_response_type}},{key:"revokeAccessTokenOnSignout",get:function t(){return this._revokeAccessTokenOnSignout}},{key:"redirectNavigator",get:function t(){return this._redirectNavigator}},{key:"popupNavigator",get:function t(){return this._popupNavigator}},{key:"iframeNavigator",get:function t(){return this._iframeNavigator}},{key:"userStore",get:function t(){return this._userStore}}]),e}(i.OidcClientSettings)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RedirectNavigator=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.RedirectNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(){return Promise.resolve(this)},t.prototype.navigate=function t(e){return e&&e.url?(e.useReplaceToNavigate?window.location.replace(e.url):window.location=e.url,Promise.resolve()):(i.Log.error("RedirectNavigator.navigate: No url provided"),Promise.reject(new Error("No url provided")))},n(t,[{key:"url",get:function t(){return window.location.href}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupNavigator=void 0;var n=r(0),i=r(42);e.PopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.PopupWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e,r,o){n.Log.debug("PopupNavigator.callback");try{return i.PopupWindow.notifyOpener(e,r,o),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.PopupWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(3);e.PopupWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e}));var o=e.popupWindowTarget||"_blank",s=e.popupWindowFeatures||"location=no,toolbar=no,width=500,height=500,left=100,top=100;";this._popup=window.open("",o,s),this._popup&&(i.Log.debug("PopupWindow.ctor: popup successfully created"),this._checkForPopupClosedTimer=window.setInterval(this._checkForPopupClosed.bind(this),500))}return t.prototype.navigate=function t(e){return this._popup?e&&e.url?(i.Log.debug("PopupWindow.navigate: Setting URL in popup"),this._id=e.id,this._id&&(window["popupCallback_"+e.id]=this._callback.bind(this)),this._popup.focus(),this._popup.window.location=e.url):(this._error("PopupWindow.navigate: no url provided"),this._error("No url provided")):this._error("PopupWindow.navigate: Error opening popup window"),this.promise},t.prototype._success=function t(e){i.Log.debug("PopupWindow.callback: Successful response from popup window"),this._cleanup(),this._resolve(e)},t.prototype._error=function t(e){i.Log.error("PopupWindow.error: ",e),this._cleanup(),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup(!1)},t.prototype._cleanup=function t(e){i.Log.debug("PopupWindow.cleanup"),window.clearInterval(this._checkForPopupClosedTimer),this._checkForPopupClosedTimer=null,delete window["popupCallback_"+this._id],this._popup&&!e&&this._popup.close(),this._popup=null},t.prototype._checkForPopupClosed=function t(){this._popup&&!this._popup.closed||this._error("Popup window closed")},t.prototype._callback=function t(e,r){this._cleanup(r),e?(i.Log.debug("PopupWindow.callback success"),this._success({url:e})):(i.Log.debug("PopupWindow.callback: Invalid response from popup"),this._error("Invalid response from popup"))},t.notifyOpener=function t(e,r,n){if(window.opener){if(e=e||window.location.href){var s=o.UrlUtility.parseUrlFragment(e,n);if(s.state){var a="popupCallback_"+s.state,u=window.opener[a];u?(i.Log.debug("PopupWindow.notifyOpener: passing url message to opener"),u(e,r)):i.Log.warn("PopupWindow.notifyOpener: no matching callback found on opener")}else i.Log.warn("PopupWindow.notifyOpener: no state found in response url")}}else i.Log.warn("PopupWindow.notifyOpener: no window.opener. Can't complete notification.")},n(t,[{key:"promise",get:function t(){return this._promise}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameNavigator=void 0;var n=r(0),i=r(44);e.IFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new i.IFrameWindow(e);return Promise.resolve(r)},t.prototype.callback=function t(e){n.Log.debug("IFrameNavigator.callback");try{return i.IFrameWindow.notifyParent(e),Promise.resolve()}catch(t){return Promise.reject(t)}},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.IFrameWindow=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0);e.IFrameWindow=function(){function t(e){var r=this;!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._promise=new Promise((function(t,e){r._resolve=t,r._reject=e})),this._boundMessageEvent=this._message.bind(this),window.addEventListener("message",this._boundMessageEvent,!1),this._frame=window.document.createElement("iframe"),this._frame.style.visibility="hidden",this._frame.style.position="absolute",this._frame.width=0,this._frame.height=0,window.document.body.appendChild(this._frame)}return t.prototype.navigate=function t(e){if(e&&e.url){var r=e.silentRequestTimeout||1e4;i.Log.debug("IFrameWindow.navigate: Using timeout of:",r),this._timer=window.setTimeout(this._timeout.bind(this),r),this._frame.src=e.url}else this._error("No url provided");return this.promise},t.prototype._success=function t(e){this._cleanup(),i.Log.debug("IFrameWindow: Successful response from frame window"),this._resolve(e)},t.prototype._error=function t(e){this._cleanup(),i.Log.error(e),this._reject(new Error(e))},t.prototype.close=function t(){this._cleanup()},t.prototype._cleanup=function t(){this._frame&&(i.Log.debug("IFrameWindow: cleanup"),window.removeEventListener("message",this._boundMessageEvent,!1),window.clearTimeout(this._timer),window.document.body.removeChild(this._frame),this._timer=null,this._frame=null,this._boundMessageEvent=null)},t.prototype._timeout=function t(){i.Log.debug("IFrameWindow.timeout"),this._error("Frame window timed out")},t.prototype._message=function t(e){if(i.Log.debug("IFrameWindow.message"),this._timer&&e.origin===this._origin&&e.source===this._frame.contentWindow&&"string"==typeof e.data&&(e.data.startsWith("http://")||e.data.startsWith("https://"))){var r=e.data;r?this._success({url:r}):this._error("Invalid response from frame")}},t.notifyParent=function t(e){i.Log.debug("IFrameWindow.notifyParent"),(e=e||window.location.href)&&(i.Log.debug("IFrameWindow.notifyParent: posting url message to parent"),window.parent.postMessage(e,location.protocol+"//"+location.host))},n(t,[{key:"promise",get:function t(){return this._promise}},{key:"_origin",get:function t(){return location.protocol+"//"+location.host}}]),t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.UserManagerEvents=void 0;var n=r(0),i=r(16),o=r(17);e.UserManagerEvents=function(t){function e(r){!function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=function s(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this,r));return i._userLoaded=new o.Event("User loaded"),i._userUnloaded=new o.Event("User unloaded"),i._silentRenewError=new o.Event("Silent renew error"),i._userSignedIn=new o.Event("User signed in"),i._userSignedOut=new o.Event("User signed out"),i._userSessionChanged=new o.Event("User session changed"),i}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.load=function e(r){var i=!(arguments.length>1&&void 0!==arguments[1])||arguments[1];n.Log.debug("UserManagerEvents.load"),t.prototype.load.call(this,r),i&&this._userLoaded.raise(r)},e.prototype.unload=function e(){n.Log.debug("UserManagerEvents.unload"),t.prototype.unload.call(this),this._userUnloaded.raise()},e.prototype.addUserLoaded=function t(e){this._userLoaded.addHandler(e)},e.prototype.removeUserLoaded=function t(e){this._userLoaded.removeHandler(e)},e.prototype.addUserUnloaded=function t(e){this._userUnloaded.addHandler(e)},e.prototype.removeUserUnloaded=function t(e){this._userUnloaded.removeHandler(e)},e.prototype.addSilentRenewError=function t(e){this._silentRenewError.addHandler(e)},e.prototype.removeSilentRenewError=function t(e){this._silentRenewError.removeHandler(e)},e.prototype._raiseSilentRenewError=function t(e){n.Log.debug("UserManagerEvents._raiseSilentRenewError",e.message),this._silentRenewError.raise(e)},e.prototype.addUserSignedIn=function t(e){this._userSignedIn.addHandler(e)},e.prototype.removeUserSignedIn=function t(e){this._userSignedIn.removeHandler(e)},e.prototype._raiseUserSignedIn=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedIn"),this._userSignedIn.raise()},e.prototype.addUserSignedOut=function t(e){this._userSignedOut.addHandler(e)},e.prototype.removeUserSignedOut=function t(e){this._userSignedOut.removeHandler(e)},e.prototype._raiseUserSignedOut=function t(){n.Log.debug("UserManagerEvents._raiseUserSignedOut"),this._userSignedOut.raise()},e.prototype.addUserSessionChanged=function t(e){this._userSessionChanged.addHandler(e)},e.prototype.removeUserSessionChanged=function t(e){this._userSessionChanged.removeHandler(e)},e.prototype._raiseUserSessionChanged=function t(){n.Log.debug("UserManagerEvents._raiseUserSessionChanged"),this._userSessionChanged.raise()},e}(i.AccessTokenEvents)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Timer=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(0),o=r(1),s=r(17);function a(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}e.Timer=function(t){function e(r){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o.Global.timer,i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:void 0;a(this,e);var s=u(this,t.call(this,r));return s._timer=n,s._nowFunc=i||function(){return Date.now()/1e3},s}return function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e.prototype.init=function t(e){e<=0&&(e=1),e=parseInt(e);var r=this.now+e;if(this.expiration===r&&this._timerHandle)i.Log.debug("Timer.init timer "+this._name+" skipping initialization since already initialized for expiration:",this.expiration);else{this.cancel(),i.Log.debug("Timer.init timer "+this._name+" for duration:",e),this._expiration=r;var n=5;e<n&&(n=e),this._timerHandle=this._timer.setInterval(this._callback.bind(this),1e3*n)}},e.prototype.cancel=function t(){this._timerHandle&&(i.Log.debug("Timer.cancel: ",this._name),this._timer.clearInterval(this._timerHandle),this._timerHandle=null)},e.prototype._callback=function e(){var r=this._expiration-this.now;i.Log.debug("Timer.callback; "+this._name+" timer expires in:",r),this._expiration<=this.now&&(this.cancel(),t.prototype.raise.call(this))},n(e,[{key:"now",get:function t(){return parseInt(this._nowFunc())}},{key:"expiration",get:function t(){return this._expiration}}]),e}(s.Event)},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.SilentRenewService=void 0;var n=r(0);e.SilentRenewService=function(){function t(e){!function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this._userManager=e}return t.prototype.start=function t(){this._callback||(this._callback=this._tokenExpiring.bind(this),this._userManager.events.addAccessTokenExpiring(this._callback),this._userManager.getUser().then((function(t){})).catch((function(t){n.Log.error("SilentRenewService.start: Error from getUser:",t.message)})))},t.prototype.stop=function t(){this._callback&&(this._userManager.events.removeAccessTokenExpiring(this._callback),delete this._callback)},t.prototype._tokenExpiring=function t(){var e=this;this._userManager.signinSilent().then((function(t){n.Log.debug("SilentRenewService._tokenExpiring: Silent token renewal successful")}),(function(t){n.Log.error("SilentRenewService._tokenExpiring: Error from signinSilent:",t.message),e._userManager.events._raiseSilentRenewError(t)}))},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaPopupNavigator=void 0;var n=r(21);e.CordovaPopupNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CordovaIFrameNavigator=void 0;var n=r(21);e.CordovaIFrameNavigator=function(){function t(){!function e(t,r){if(!(t instanceof r))throw new TypeError("Cannot call a class as a function")}(this,t)}return t.prototype.prepare=function t(e){e.popupWindowFeatures="hidden=yes";var r=new n.CordovaPopupWindow(e);return Promise.resolve(r)},t}()},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.Version="1.11.5"}])}));
},{}],"node_modules/form-urlencoded/form-urlencoded.js":[function(require,module,exports) {
module.exports = (data, opts = {}) => {
  const {
    sorted, skipIndex, ignorenull, skipBracket, useDot, whitespace = '+'
  } = opts;

  const encode = value => String(value)
    .replace(/[^ !'()~*]/gu, encodeURIComponent)
    .replace(/ /g, whitespace)
    .replace(/[!'()~*]/g, ch =>
      `%${ch.charCodeAt().toString(16).slice(-2).toUpperCase()}`);

  const keys = (obj, keyarr = Object.keys(obj)) =>
    sorted ? keyarr.sort() : keyarr;

  const filterjoin = arr => arr.filter(e => e).join('&');

  const objnest = (name, obj) => filterjoin(keys(obj).map(key => useDot
    ? nest(`${name}.${key}`, obj[key])
    : nest(`${name}[${key}]`, obj[key])));

  const arrnest = (name, arr, brackets = skipBracket ? '' : '[]') => arr.length
    ? filterjoin(arr.map((elem, index) => skipIndex
      ? nest(name + brackets, elem)
      : nest(name + '[' + index + ']', elem)))
    : encode(name + brackets);

  const setnest = (name, set) => filterjoin(
    Array.from(set).map(elem => nest(name, elem)));

  const nest = (name, value, type = typeof value, f = null) => {
    if (value === f)
      f = ignorenull ? f : encode(name) + '=' + f;
    else if (/string|number|boolean/.test(type))
      f = encode(name) + '=' + encode(value);
    else if (Array.isArray(value))
      f = arrnest(name, value);
    else if (value instanceof Set)
      f = setnest(name, value);
    else if (type === 'object')
      f = objnest(name, value);

    return f;
  };

  return data && filterjoin(keys(data).map(key => nest(key, data[key])));
};

},{}],"node_modules/@inrupt/oidc-client-ext/dist/index.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearOidcPersistentStorage = clearOidcPersistentStorage;
exports.getBearerToken = getBearerToken;
exports.getDpopToken = getDpopToken;
exports.registerClient = registerClient;
exports.removeOidcQueryParam = removeOidcQueryParam;
Object.defineProperty(exports, "CordovaIFrameNavigator", {
  enumerable: true,
  get: function () {
    return _oidcClient.CordovaIFrameNavigator;
  }
});
Object.defineProperty(exports, "CordovaPopupNavigator", {
  enumerable: true,
  get: function () {
    return _oidcClient.CordovaPopupNavigator;
  }
});
Object.defineProperty(exports, "InMemoryWebStorage", {
  enumerable: true,
  get: function () {
    return _oidcClient.InMemoryWebStorage;
  }
});
Object.defineProperty(exports, "Log", {
  enumerable: true,
  get: function () {
    return _oidcClient.Log;
  }
});
Object.defineProperty(exports, "OidcClient", {
  enumerable: true,
  get: function () {
    return _oidcClient.OidcClient;
  }
});
Object.defineProperty(exports, "SessionMonitor", {
  enumerable: true,
  get: function () {
    return _oidcClient.SessionMonitor;
  }
});
Object.defineProperty(exports, "User", {
  enumerable: true,
  get: function () {
    return _oidcClient.User;
  }
});
Object.defineProperty(exports, "UserManager", {
  enumerable: true,
  get: function () {
    return _oidcClient.UserManager;
  }
});
Object.defineProperty(exports, "Version", {
  enumerable: true,
  get: function () {
    return _oidcClient.Version;
  }
});
Object.defineProperty(exports, "WebStorageStateStore", {
  enumerable: true,
  get: function () {
    return _oidcClient.WebStorageStateStore;
  }
});

var _oidcClient = require("oidc-client");

var _solidClientAuthnCore = require("@inrupt/solid-client-authn-core");

var _formUrlencoded = _interopRequireDefault(require("form-urlencoded"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function processErrorResponse(responseBody, options) {
  var _a, _b, _c, _d;

  if (responseBody.error === "invalid_redirect_uri") {
    throw new Error(`Dynamic client registration failed: the provided redirect uri [${(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()}] is invalid - ${(_b = responseBody.error_description) !== null && _b !== void 0 ? _b : ""}`);
  }

  if (responseBody.error === "invalid_client_metadata") {
    throw new Error(`Dynamic client registration failed: the provided client metadata ${JSON.stringify(options)} is invalid - ${(_c = responseBody.error_description) !== null && _c !== void 0 ? _c : ""}`);
  }

  throw new Error(`Dynamic client registration failed: ${responseBody.error} - ${(_d = responseBody.error_description) !== null && _d !== void 0 ? _d : ""}`);
}

function validateRegistrationResponse(responseBody, options) {
  if (responseBody.client_id === undefined) {
    throw new Error(`Dynamic client registration failed: no client_id has been found on ${JSON.stringify(responseBody)}`);
  }

  if (options.redirectUrl && (responseBody.redirect_uris === undefined || responseBody.redirect_uris[0] !== options.redirectUrl.toString())) {
    throw new Error(`Dynamic client registration failed: the returned redirect URIs ${JSON.stringify(responseBody.redirect_uris)} don't match the provided ${JSON.stringify([options.redirectUrl.toString()])}`);
  }
}

async function registerClient(options, issuerConfig) {
  var _a;

  if (!issuerConfig.registrationEndpoint) {
    throw new Error("Dynamic Registration could not be completed because the issuer has no registration endpoint.");
  }

  if (!Array.isArray(issuerConfig.idTokenSigningAlgValuesSupported)) {
    throw new Error("The OIDC issuer discovery profile is missing the 'id_token_signing_alg_values_supported' value, which is mandatory.");
  }

  const signingAlg = (0, _solidClientAuthnCore.determineSigningAlg)(issuerConfig.idTokenSigningAlgValuesSupported, _solidClientAuthnCore.PREFERRED_SIGNING_ALG);
  const config = {
    client_name: options.clientName,
    application_type: "web",
    redirect_uris: [(_a = options.redirectUrl) === null || _a === void 0 ? void 0 : _a.toString()],
    subject_type: "pairwise",
    token_endpoint_auth_method: "client_secret_basic",
    id_token_signed_response_alg: signingAlg
  };
  const headers = {
    "Content-Type": "application/json"
  };

  if (options.registrationAccessToken) {
    headers.Authorization = `Bearer ${options.registrationAccessToken}`;
  }

  const registerResponse = await fetch(issuerConfig.registrationEndpoint.toString(), {
    method: "POST",
    headers,
    body: JSON.stringify(config)
  });

  if (registerResponse.ok) {
    const responseBody = await registerResponse.json();
    validateRegistrationResponse(responseBody, options);
    return {
      clientId: responseBody.client_id,
      clientSecret: responseBody.client_secret,
      idTokenSignedResponseAlg: responseBody.id_token_signed_response_alg
    };
  }

  if (registerResponse.status === 400) {
    processErrorResponse(await registerResponse.json(), options);
  }

  throw new Error(`Dynamic client registration failed: the server returned ${registerResponse.status} ${registerResponse.statusText} - ${await registerResponse.text()}`);
}

function hasError(value) {
  return value.error !== undefined && typeof value.error === "string";
}

function hasErrorDescription(value) {
  return value.error_description !== undefined && typeof value.error_description === "string";
}

function hasErrorUri(value) {
  return value.error_uri !== undefined && typeof value.error_uri === "string";
}

function hasAccessToken(value) {
  return value.access_token !== undefined && typeof value.access_token === "string";
}

function hasIdToken(value) {
  return value.id_token !== undefined && typeof value.id_token === "string";
}

function hasRefreshToken(value) {
  return value.refresh_token !== undefined && typeof value.refresh_token === "string";
}

function hasTokenType(value) {
  return value.token_type !== undefined && typeof value.token_type === "string";
}

function hasExpiresIn(value) {
  return value.expires_in === undefined || typeof value.expires_in === "number";
}

function validatePreconditions(issuer, data) {
  if (data.grantType && (!issuer.grantTypesSupported || !issuer.grantTypesSupported.includes(data.grantType))) {
    throw new Error(`The issuer [${issuer.issuer}] does not support the [${data.grantType}] grant`);
  }

  if (!issuer.tokenEndpoint) {
    throw new Error(`This issuer [${issuer.issuer}] does not have a token endpoint`);
  }
}

function validateTokenEndpointResponse(tokenResponse, dpop) {
  if (hasError(tokenResponse)) {
    throw new Error(`Token endpoint returned error [${tokenResponse.error}]${hasErrorDescription(tokenResponse) ? `: ${tokenResponse.error_description}` : ""}${hasErrorUri(tokenResponse) ? ` (see ${tokenResponse.error_uri})` : ""}`);
  }

  if (!hasAccessToken(tokenResponse)) {
    throw new Error(`Invalid token endpoint response (missing the field 'access_token'): ${JSON.stringify(tokenResponse)}`);
  }

  if (!hasIdToken(tokenResponse)) {
    throw new Error(`Invalid token endpoint response (missing the field 'id_token'): ${JSON.stringify(tokenResponse)}.`);
  }

  if (!hasTokenType(tokenResponse)) {
    throw new Error(`Invalid token endpoint response (missing the field 'token_type'): ${JSON.stringify(tokenResponse)}`);
  }

  if (!hasExpiresIn(tokenResponse)) {
    throw new Error(`Invalid token endpoint response (invalid field 'expires_in'): ${JSON.stringify(tokenResponse)}`);
  }

  if (!dpop && tokenResponse.token_type.toLowerCase() !== "bearer") {
    throw new Error(`Invalid token endpoint response: requested a [Bearer] token, but got a 'token_type' value of [${tokenResponse.token_type}].`);
  }

  return tokenResponse;
}

async function getTokens(issuer, client, data, dpop) {
  validatePreconditions(issuer, data);
  const headers = {
    "content-type": "application/x-www-form-urlencoded"
  };
  let dpopKey;

  if (dpop) {
    dpopKey = await (0, _solidClientAuthnCore.generateDpopKeyPair)();
    headers.DPoP = await (0, _solidClientAuthnCore.createDpopHeader)(issuer.tokenEndpoint, "POST", dpopKey);
  }

  if (client.clientSecret) {
    headers.Authorization = `Basic ${btoa(`${client.clientId}:${client.clientSecret}`)}`;
  }

  const tokenRequestInit = {
    method: "POST",
    headers,
    body: (0, _formUrlencoded.default)({
      grant_type: data.grantType,
      redirect_uri: data.redirectUrl,
      code: data.code,
      code_verifier: data.codeVerifier,
      client_id: client.clientId
    })
  };
  const rawTokenResponse = await await fetch(issuer.tokenEndpoint, tokenRequestInit);
  const jsonTokenResponse = await rawTokenResponse.json();
  const tokenResponse = validateTokenEndpointResponse(jsonTokenResponse, dpop);
  const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(tokenResponse.id_token, issuer.jwksUri, issuer.issuer, client.clientId);
  return {
    accessToken: tokenResponse.access_token,
    idToken: tokenResponse.id_token,
    refreshToken: hasRefreshToken(tokenResponse) ? tokenResponse.refresh_token : undefined,
    webId,
    dpopKey,
    expiresIn: tokenResponse.expires_in
  };
}

async function getBearerToken(redirectUrl) {
  let signinResponse;

  try {
    const client = new _oidcClient.OidcClient({
      response_mode: "query",
      loadUserInfo: false
    });
    signinResponse = await client.processSigninResponse(redirectUrl);

    if (client.settings.metadata === undefined) {
      throw new Error("Cannot retrieve issuer metadata from client information in storage.");
    }

    if (client.settings.metadata.jwks_uri === undefined) {
      throw new Error("Missing some issuer metadata from client information in storage: 'jwks_uri' is undefined");
    }

    if (client.settings.metadata.issuer === undefined) {
      throw new Error("Missing some issuer metadata from client information in storage: 'issuer' is undefined");
    }

    if (client.settings.client_id === undefined) {
      throw new Error("Missing some client information in storage: 'client_id' is undefined");
    }

    const webId = await (0, _solidClientAuthnCore.getWebidFromTokenPayload)(signinResponse.id_token, client.settings.metadata.jwks_uri, client.settings.metadata.issuer, client.settings.client_id);
    return {
      accessToken: signinResponse.access_token,
      idToken: signinResponse.id_token,
      webId,
      refreshToken: signinResponse.refresh_token
    };
  } catch (err) {
    throw new Error(`Problem handling Auth Code Grant (Flow) redirect - URL [${redirectUrl}]: ${err}`);
  }
}

async function getDpopToken(issuer, client, data) {
  return getTokens(issuer, client, data, true);
}

function removeOidcQueryParam(redirectUrl) {
  const cleanedUrl = new URL(redirectUrl);
  cleanedUrl.searchParams.delete("code");
  cleanedUrl.searchParams.delete("state");
  cleanedUrl.hash = "";
  return cleanedUrl.toString();
}

async function clearOidcPersistentStorage() {
  const client = new _oidcClient.OidcClient({
    response_mode: "query"
  });
  await client.clearStaleState(new _oidcClient.WebStorageStateStore({}));
  const myStorage = window.localStorage;
  const itemsToRemove = [];

  for (let i = 0; i <= myStorage.length; i += 1) {
    const key = myStorage.key(i);

    if (key && (key.match(/^oidc\..+$/) || key.match(/^solidClientAuthenticationUser:.+$/))) {
      itemsToRemove.push(key);
    }
  }

  itemsToRemove.forEach(key => myStorage.removeItem(key));
}
},{"oidc-client":"node_modules/oidc-client/lib/oidc-client.min.js","@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","form-urlencoded":"node_modules/form-urlencoded/form-urlencoded.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEY_CURRENT_URL = exports.KEY_CURRENT_SESSION = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
exports.KEY_CURRENT_SESSION = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentSession`;
exports.KEY_CURRENT_URL = `${solid_client_authn_core_1.SOLID_CLIENT_AUTHN_KEY_PREFIX}currentUrl`;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
const constant_1 = require("./constant");
const globalFetch = (request, init) => window.fetch(request, init);
class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.login = async (options) => {
            var _a, _b;
            await this.sessionInfoManager.clear(options.sessionId);
            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);
            await this.loginHandler.handle({
                ...options,
                redirectUrl,
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
            });
        };
        this.fetch = globalFetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = globalFetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.validateCurrentSession = async () => {
            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
            if (currentSessionId === null) {
                return null;
            }
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined ||
                sessionInfo.idToken === undefined ||
                sessionInfo.clientAppId === undefined ||
                sessionInfo.issuer === undefined) {
                return null;
            }
            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);
            try {
                const jwk = await solid_client_authn_core_1.fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);
                await jose_legacy_modules_1.jwtVerify(sessionInfo.idToken, await jose_legacy_modules_1.parseJwk(jwk), {
                    audience: sessionInfo.clientAppId,
                    issuer: issuerConfig.issuer,
                });
                return sessionInfo;
            }
            catch (e) {
            }
            return null;
        };
        this.handleIncomingRedirect = async (url) => {
            const redirectInfo = await this.redirectHandler.handle(url);
            this.fetch = redirectInfo.fetch.bind(window);
            const cleanedUpUrl = new URL(url);
            cleanedUpUrl.searchParams.delete("state");
            cleanedUpUrl.searchParams.delete("code");
            cleanedUpUrl.searchParams.delete("id_token");
            cleanedUpUrl.searchParams.delete("access_token");
            window.history.replaceState(null, "", cleanedUpUrl.toString());
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
                expirationDate: redirectInfo.expirationDate,
            };
        };
    }
}
exports.default = ClientAuthentication;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js","@inrupt/jose-legacy-modules":"node_modules/@inrupt/jose-legacy-modules/dist/index.browser.js","./constant":"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function hasIssuer(options) {
    return typeof options.oidcIssuer === "string";
}
function hasRedirectUrl(options) {
    return typeof options.redirectUrl === "string";
}
class OidcLoginHandler {
    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.oidcHandler = oidcHandler;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(options) {
        return hasIssuer(options) && hasRedirectUrl(options);
    }
    async handle(options) {
        if (!hasIssuer(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);
        }
        if (!hasRedirectUrl(options)) {
            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);
        }
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);
        const clientRegistration = await solid_client_authn_core_1.handleRegistration(options, issuerConfig, this.storageUtility, this.clientRegistrar);
        const OidcOptions = {
            issuer: issuerConfig.issuer,
            dpop: options.tokenType.toLowerCase() === "dpop",
            ...options,
            issuerConfiguration: issuerConfig,
            client: clientRegistration,
        };
        return this.oidcHandler.handle(OidcOptions);
    }
}
exports.default = OidcLoginHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
class AuthorizationCodeWithPkceOidcHandler {
    constructor(storageUtility, redirector) {
        this.storageUtility = storageUtility;
        this.redirector = redirector;
    }
    async canHandle(oidcLoginOptions) {
        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&
            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf("authorization_code") > -1);
    }
    async handle(oidcLoginOptions) {
        const oidcOptions = {
            authority: oidcLoginOptions.issuer.toString(),
            client_id: oidcLoginOptions.client.clientId,
            client_secret: oidcLoginOptions.client.clientSecret,
            redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),
            response_type: "code",
            scope: "openid webid",
            filterProtocolClaims: true,
            loadUserInfo: false,
            code_verifier: true,
            prompt: oidcLoginOptions.prompt,
        };
        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);
        const { redirector } = this;
        const storage = this.storageUtility;
        try {
            const signingRequest = await oidcClientLibrary.createSigninRequest();
            await Promise.all([
                storage.setForUser(signingRequest.state._id, {
                    sessionId: oidcLoginOptions.sessionId,
                }),
                storage.setForUser(oidcLoginOptions.sessionId, {
                    codeVerifier: signingRequest.state._code_verifier,
                    issuer: oidcLoginOptions.issuer.toString(),
                    redirectUrl: oidcLoginOptions.redirectUrl,
                    dpop: oidcLoginOptions.dpop ? "true" : "false",
                }),
            ]);
            redirector.redirect(signingRequest.url.toString(), {
                handleRedirect: oidcLoginOptions.handleRedirect,
                redirectInIframe: oidcLoginOptions.inIframe,
            });
        }
        catch (err) {
            console.error(err);
        }
        return undefined;
    }
}
exports.default = AuthorizationCodeWithPkceOidcHandler;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/util/urlPath.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.appendToUrlPathname = void 0;
function appendToUrlPathname(url, append) {
    const parsedUrl = new URL(url);
    const path = parsedUrl.pathname;
    parsedUrl.pathname = `${path}${path.endsWith("/") ? "" : "/"}${append.startsWith("/") ? append.substring(1) : append}`;
    return parsedUrl.toString();
}
exports.appendToUrlPathname = appendToUrlPathname;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WELL_KNOWN_OPENID_CONFIG = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const urlPath_1 = require("../../util/urlPath");
exports.WELL_KNOWN_OPENID_CONFIG = ".well-known/openid-configuration";
const issuerConfigKeyMap = {
    issuer: {
        toKey: "issuer",
        convertToUrl: true,
    },
    authorization_endpoint: {
        toKey: "authorizationEndpoint",
        convertToUrl: true,
    },
    token_endpoint: {
        toKey: "tokenEndpoint",
        convertToUrl: true,
    },
    userinfo_endpoint: {
        toKey: "userinfoEndpoint",
        convertToUrl: true,
    },
    jwks_uri: {
        toKey: "jwksUri",
        convertToUrl: true,
    },
    registration_endpoint: {
        toKey: "registrationEndpoint",
        convertToUrl: true,
    },
    scopes_supported: { toKey: "scopesSupported" },
    response_types_supported: { toKey: "responseTypesSupported" },
    response_modes_supported: { toKey: "responseModesSupported" },
    grant_types_supported: { toKey: "grantTypesSupported" },
    acr_values_supported: { toKey: "acrValuesSupported" },
    subject_types_supported: { toKey: "subjectTypesSupported" },
    id_token_signing_alg_values_supported: {
        toKey: "idTokenSigningAlgValuesSupported",
    },
    id_token_encryption_alg_values_supported: {
        toKey: "idTokenEncryptionAlgValuesSupported",
    },
    id_token_encryption_enc_values_supported: {
        toKey: "idTokenEncryptionEncValuesSupported",
    },
    userinfo_signing_alg_values_supported: {
        toKey: "userinfoSigningAlgValuesSupported",
    },
    userinfo_encryption_alg_values_supported: {
        toKey: "userinfoEncryptionAlgValuesSupported",
    },
    userinfo_encryption_enc_values_supported: {
        toKey: "userinfoEncryptionEncValuesSupported",
    },
    request_object_signing_alg_values_supported: {
        toKey: "requestObjectSigningAlgValuesSupported",
    },
    request_object_encryption_alg_values_supported: {
        toKey: "requestObjectEncryptionAlgValuesSupported",
    },
    request_object_encryption_enc_values_supported: {
        toKey: "requestObjectEncryptionEncValuesSupported",
    },
    token_endpoint_auth_methods_supported: {
        toKey: "tokenEndpointAuthMethodsSupported",
    },
    token_endpoint_auth_signing_alg_values_supported: {
        toKey: "tokenEndpointAuthSigningAlgValuesSupported",
    },
    display_values_supported: { toKey: "displayValuesSupported" },
    claim_types_supported: { toKey: "claimTypesSupported" },
    claims_supported: { toKey: "claimsSupported" },
    service_documentation: { toKey: "serviceDocumentation" },
    claims_locales_supported: { toKey: "claimsLocalesSupported" },
    ui_locales_supported: { toKey: "uiLocalesSupported" },
    claims_parameter_supported: { toKey: "claimsParameterSupported" },
    request_parameter_supported: { toKey: "requestParameterSupported" },
    request_uri_parameter_supported: { toKey: "requestUriParameterSupported" },
    require_request_uri_registration: { toKey: "requireRequestUriRegistration" },
    op_policy_uri: {
        toKey: "opPolicyUri",
        convertToUrl: true,
    },
    op_tos_uri: {
        toKey: "opTosUri",
        convertToUrl: true,
    },
    solid_oidc_supported: {
        toKey: "solidOidcSupported",
    },
};
function processConfig(config) {
    const parsedConfig = {};
    Object.keys(config).forEach((key) => {
        if (issuerConfigKeyMap[key]) {
            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];
        }
    });
    return parsedConfig;
}
class IssuerConfigFetcher {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    static getLocalStorageKey(issuer) {
        return `issuerConfig:${issuer}`;
    }
    async fetchConfig(issuer) {
        let issuerConfig;
        const openIdConfigUrl = urlPath_1.appendToUrlPathname(issuer, exports.WELL_KNOWN_OPENID_CONFIG);
        const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);
        try {
            issuerConfig = processConfig(await issuerConfigRequestBody.json());
        }
        catch (err) {
            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);
        }
        await this.storageUtility.set(IssuerConfigFetcher.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));
        return issuerConfig;
    }
}
exports.default = IssuerConfigFetcher;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","../../util/urlPath":"node_modules/@inrupt/solid-client-authn-browser/dist/util/urlPath.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SessionInfoManager = exports.clear = exports.getUnauthenticatedSession = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const uuid_1 = require("uuid");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
function getUnauthenticatedSession() {
    return {
        isLoggedIn: false,
        sessionId: uuid_1.v4(),
        fetch,
    };
}
exports.getUnauthenticatedSession = getUnauthenticatedSession;
async function clear(sessionId, storage) {
    const storedSessionCookieReference = await storage.get("tmp-resource-server-session-info");
    const reference = JSON.parse(storedSessionCookieReference !== null && storedSessionCookieReference !== void 0 ? storedSessionCookieReference : "{}");
    const { webId } = reference;
    if (webId !== undefined) {
        const webIdAsUrl = new URL(webId);
        const resourceServerIri = webIdAsUrl.origin;
        await storage.clearResourceServerSessionInfo(resourceServerIri);
    }
    await Promise.all([
        storage.deleteAllUserData(sessionId, { secure: false }),
        storage.deleteAllUserData(sessionId, { secure: true }),
        storage.delete("clientKey", { secure: false }),
    ]);
    await oidc_client_ext_1.clearOidcPersistentStorage();
}
exports.clear = clear;
class SessionInfoManager {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    update(_sessionId, _options) {
        throw new Error("Not Implemented");
    }
    async get(sessionId) {
        var _a;
        const isLoggedIn = await this.storageUtility.getForUser(sessionId, "isLoggedIn", {
            secure: true,
        });
        const webId = await this.storageUtility.getForUser(sessionId, "webId", {
            secure: true,
        });
        const clientId = await this.storageUtility.getForUser(sessionId, "clientId", {
            secure: false,
        });
        const clientSecret = await this.storageUtility.getForUser(sessionId, "clientSecret", {
            secure: false,
        });
        const idToken = await this.storageUtility.getForUser(sessionId, "idToken", {
            secure: false,
        });
        const redirectUrl = await this.storageUtility.getForUser(sessionId, "redirectUrl", {
            secure: false,
        });
        const refreshToken = await this.storageUtility.getForUser(sessionId, "refreshToken", {
            secure: true,
        });
        const issuer = await this.storageUtility.getForUser(sessionId, "issuer", {
            secure: false,
        });
        const tokenType = (_a = (await this.storageUtility.getForUser(sessionId, "tokenType", {
            secure: false,
        }))) !== null && _a !== void 0 ? _a : "DPoP";
        if (!solid_client_authn_core_1.isSupportedTokenType(tokenType)) {
            throw new Error(`Tokens of type [${tokenType}] are not supported.`);
        }
        if (clientId === undefined &&
            idToken === undefined &&
            isLoggedIn === undefined &&
            webId === undefined &&
            refreshToken === undefined) {
            return undefined;
        }
        return {
            sessionId,
            webId,
            isLoggedIn: isLoggedIn === "true",
            redirectUrl,
            idToken,
            refreshToken,
            issuer,
            clientAppId: clientId,
            clientAppSecret: clientSecret,
            tokenType,
        };
    }
    async getAll() {
        throw new Error("Not implemented");
    }
    async clear(sessionId) {
        return clear(sessionId, this.storageUtility);
    }
    async register(_sessionId) {
        throw new Error("Not implemented");
    }
    async getRegisteredSessionIdAll() {
        throw new Error("Not implemented");
    }
    async clearAll() {
        throw new Error("Not implemented");
    }
}
exports.SessionInfoManager = SessionInfoManager;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","uuid":"node_modules/uuid/dist/esm-browser/index.js","@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/FallbackRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FallbackRedirectHandler = void 0;
const SessionInfoManager_1 = require("../../../sessionInfo/SessionInfoManager");
class FallbackRedirectHandler {
    async canHandle(redirectUrl) {
        try {
            new URL(redirectUrl);
            return true;
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`);
        }
    }
    async handle(_redirectUrl) {
        return SessionInfoManager_1.getUnauthenticatedSession();
    }
}
exports.FallbackRedirectHandler = FallbackRedirectHandler;

},{"../../../sessionInfo/SessionInfoManager":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/logout/GeneralLogoutHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class GeneralLogoutHandler {
    constructor(sessionInfoManager) {
        this.sessionInfoManager = sessionInfoManager;
    }
    async canHandle() {
        return true;
    }
    async handle(userId) {
        await this.sessionInfoManager.clear(userId);
    }
}
exports.default = GeneralLogoutHandler;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/authenticatedFetch/fetchFactory.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildDpopFetch = exports.buildBearerFetch = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
function buildBearerFetch(authToken) {
    return (init, options) => {
        return fetch(init, {
            ...options,
            credentials: "include",
            headers: {
                ...options === null || options === void 0 ? void 0 : options.headers,
                Authorization: `Bearer ${authToken}`,
            },
        });
    };
}
exports.buildBearerFetch = buildBearerFetch;
async function buildDpopFetchOptions(targetUrl, authToken, dpopKey, defaultOptions) {
    var _a;
    return {
        ...defaultOptions,
        headers: {
            ...defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.headers,
            Authorization: `DPoP ${authToken}`,
            DPoP: await solid_client_authn_core_1.createDpopHeader(targetUrl, (_a = defaultOptions === null || defaultOptions === void 0 ? void 0 : defaultOptions.method) !== null && _a !== void 0 ? _a : "get", dpopKey),
        },
        credentials: "include",
    };
}
function isExpectedAuthError(statusCode) {
    return [401, 403].includes(statusCode);
}
async function buildDpopFetch(authToken, dpopKey) {
    return async (url, options) => {
        const response = await fetch(url, await buildDpopFetchOptions(url.toString(), authToken, dpopKey, options));
        const failedButNotExpectedAuthError = !response.ok && !isExpectedAuthError(response.status);
        const hasBeenRedirected = response.url !== url;
        if (response.ok || failedButNotExpectedAuthError || !hasBeenRedirected) {
            return response;
        }
        return fetch(response.url, await buildDpopFetchOptions(response.url, authToken, dpopKey, options));
    };
}
exports.buildDpopFetch = buildDpopFetch;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AuthCodeRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthCodeRedirectHandler = exports.DEFAULT_LIFESPAN = void 0;
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
const fetchFactory_1 = require("../../../authenticatedFetch/fetchFactory");
const constant_1 = require("../../../constant");
exports.DEFAULT_LIFESPAN = 30 * 60 * 1000;
async function setupResourceServerSession(webId, authenticatedFetch, storageUtility) {
    const webIdAsUrl = new URL(webId);
    const resourceServerIri = webIdAsUrl.origin;
    await authenticatedFetch(webId);
    try {
        const resourceServerResponse = await authenticatedFetch(`${resourceServerIri}/session`);
        if (resourceServerResponse.status === 200) {
            await storageUtility.storeResourceServerSessionInfo(webId, resourceServerIri, Date.now() + exports.DEFAULT_LIFESPAN);
            return;
        }
        await storageUtility.clearResourceServerSessionInfo(resourceServerIri);
    }
    catch (_e) {
        await storageUtility.clearResourceServerSessionInfo(resourceServerIri);
    }
}
class AuthCodeRedirectHandler {
    constructor(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar) {
        this.storageUtility = storageUtility;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.clientRegistrar = clientRegistrar;
    }
    async canHandle(redirectUrl) {
        try {
            const myUrl = new URL(redirectUrl);
            return (myUrl.searchParams.get("code") !== null &&
                myUrl.searchParams.get("state") !== null);
        }
        catch (e) {
            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`);
        }
    }
    async handle(redirectUrl) {
        if (!(await this.canHandle(redirectUrl))) {
            throw new Error(`AuthCodeRedirectHandler cannot handle [${redirectUrl}]: it is missing one of [code, state].`);
        }
        const url = new URL(redirectUrl);
        const oauthState = url.searchParams.get("state");
        const storedSessionId = (await this.storageUtility.getForUser(oauthState, "sessionId", {
            errorIfNull: true,
        }));
        const isDpop = (await this.storageUtility.getForUser(storedSessionId, "dpop")) ===
            "true";
        const issuer = (await this.storageUtility.getForUser(storedSessionId, "issuer", { errorIfNull: true }));
        window.localStorage.setItem(constant_1.KEY_CURRENT_SESSION, storedSessionId);
        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(issuer);
        const client = await this.clientRegistrar.getClient({ sessionId: storedSessionId }, issuerConfig);
        let tokens;
        let authFetch;
        const referenceTime = Date.now();
        if (isDpop) {
            const codeVerifier = (await this.storageUtility.getForUser(storedSessionId, "codeVerifier", { errorIfNull: true }));
            const storedRedirectIri = (await this.storageUtility.getForUser(storedSessionId, "redirectUrl", { errorIfNull: true }));
            tokens = await oidc_client_ext_1.getDpopToken(issuerConfig, client, {
                grantType: "authorization_code",
                code: url.searchParams.get("code"),
                codeVerifier,
                redirectUrl: storedRedirectIri,
            });
            authFetch = await fetchFactory_1.buildDpopFetch(tokens.accessToken, tokens.dpopKey);
        }
        else {
            tokens = await oidc_client_ext_1.getBearerToken(url.toString());
            authFetch = fetchFactory_1.buildBearerFetch(tokens.accessToken);
        }
        await this.storageUtility.setForUser(storedSessionId, {
            refreshToken: "<Refresh token that *is* coming back in the redirect URL is not yet being parsed and provided by oidc-client-js in it's response object>",
            webId: tokens.webId,
            isLoggedIn: "true",
        }, { secure: true });
        url.searchParams.delete("code");
        await this.storageUtility.setForUser(storedSessionId, {
            redirectUrl: url.toString(),
            idToken: tokens.idToken,
        }, {
            secure: false,
        });
        const essWorkaroundDisabled = window.localStorage.getItem("tmp-resource-server-session-enabled") ===
            "false";
        if (!essWorkaroundDisabled) {
            await setupResourceServerSession(tokens.webId, authFetch, this.storageUtility);
        }
        const sessionInfo = await this.sessionInfoManager.get(storedSessionId);
        if (!sessionInfo) {
            throw new Error(`Could not retrieve session: [${storedSessionId}].`);
        }
        return Object.assign(sessionInfo, {
            fetch: authFetch,
            expirationDate: typeof tokens.expiresIn === "number"
                ? referenceTime + tokens.expiresIn * 1000
                : null,
        });
    }
}
exports.AuthCodeRedirectHandler = AuthCodeRedirectHandler;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js","../../../authenticatedFetch/fetchFactory":"node_modules/@inrupt/solid-client-authn-browser/dist/authenticatedFetch/fetchFactory.js","../../../constant":"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AggregateRedirectHandler.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
class AggregateRedirectHandler extends solid_client_authn_core_1.AggregateHandler {
    constructor(redirectHandlers) {
        super(redirectHandlers);
    }
}
exports.default = AggregateRedirectHandler;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/storage/BrowserStorage.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class BrowserStorage {
    get storage() {
        return window.localStorage;
    }
    async get(key) {
        return this.storage.getItem(key) || undefined;
    }
    async set(key, value) {
        this.storage.setItem(key, value);
    }
    async delete(key) {
        this.storage.removeItem(key);
    }
}
exports.default = BrowserStorage;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.postRedirectUrlToParent = exports.setupIframeListener = exports.redirectInIframe = void 0;
let redirectIframe;
function getRedirectIframe() {
    if (typeof redirectIframe === "undefined") {
        redirectIframe = window.document.createElement("iframe");
        redirectIframe.setAttribute("hidden", "true");
        redirectIframe.setAttribute("sandbox", "allow-scripts allow-same-origin");
    }
    return redirectIframe;
}
function redirectInIframe(redirectUrl) {
    const iframe = getRedirectIframe();
    window.document.body.appendChild(iframe);
    iframe.src = redirectUrl;
}
exports.redirectInIframe = redirectInIframe;
function setupIframeListener(handleIframeRedirect) {
    if (typeof window === "undefined") {
        return;
    }
    window.addEventListener("message", async (evt) => {
        const iframe = getRedirectIframe();
        if (evt.origin === window.location.origin &&
            evt.source === iframe.contentWindow) {
            if (typeof evt.data.redirectUrl === "string") {
                await handleIframeRedirect(evt.data.redirectUrl);
            }
        }
        if (window.document.body.contains(iframe)) {
            window.document.body.removeChild(iframe);
        }
    });
}
exports.setupIframeListener = setupIframeListener;
function postRedirectUrlToParent(redirectUrl) {
    window.top.postMessage({
        redirectUrl,
    }, window.location.origin);
}
exports.postRedirectUrlToParent = postRedirectUrlToParent;

},{}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/Redirector.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const iframe_1 = require("../../iframe");
class Redirector {
    redirect(redirectUrl, options) {
        if (options && options.handleRedirect) {
            options.handleRedirect(redirectUrl);
        }
        else if (options && options.redirectByReplacingState) {
            window.history.replaceState({}, "", redirectUrl);
        }
        else if (options === null || options === void 0 ? void 0 : options.redirectInIframe) {
            iframe_1.redirectInIframe(redirectUrl);
        }
        else {
            window.location.href = redirectUrl;
        }
    }
}
exports.default = Redirector;

},{"../../iframe":"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/ClientRegistrar.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
class ClientRegistrar {
    constructor(storageUtility) {
        this.storageUtility = storageUtility;
    }
    async getClient(options, issuerConfig) {
        var _a;
        const [storedClientId, storedClientSecret,] = await Promise.all([
            this.storageUtility.getForUser(options.sessionId, "clientId", {
                secure: false,
            }),
            this.storageUtility.getForUser(options.sessionId, "clientSecret", {
                secure: false,
            }),
        ]);
        if (storedClientId) {
            return {
                clientId: storedClientId,
                clientSecret: storedClientSecret,
            };
        }
        const extendedOptions = { ...options };
        extendedOptions.registrationAccessToken =
            (_a = extendedOptions.registrationAccessToken) !== null && _a !== void 0 ? _a : (await this.storageUtility.getForUser(options.sessionId, "registrationAccessToken"));
        try {
            const registeredClient = await oidc_client_ext_1.registerClient(extendedOptions, issuerConfig);
            const infoToSave = {
                clientId: registeredClient.clientId,
            };
            if (registeredClient.clientSecret) {
                infoToSave.clientSecret = registeredClient.clientSecret;
            }
            if (registeredClient.idTokenSignedResponseAlg) {
                infoToSave.idTokenSignedResponseAlg =
                    registeredClient.idTokenSignedResponseAlg;
            }
            await this.storageUtility.setForUser(extendedOptions.sessionId, infoToSave, {
                secure: false,
            });
            return registeredClient;
        }
        catch (error) {
            throw new Error(`Client registration failed: [${error.toString()}]`);
        }
    }
}
exports.default = ClientRegistrar;

},{"@inrupt/oidc-client-ext":"node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js":[function(require,module,exports) {
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientAuthenticationWithDependencies = void 0;
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const StorageUtility_1 = __importDefault(require("./storage/StorageUtility"));
const ClientAuthentication_1 = __importDefault(require("./ClientAuthentication"));
const OidcLoginHandler_1 = __importDefault(require("./login/oidc/OidcLoginHandler"));
const AuthorizationCodeWithPkceOidcHandler_1 = __importDefault(require("./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler"));
const IssuerConfigFetcher_1 = __importDefault(require("./login/oidc/IssuerConfigFetcher"));
const FallbackRedirectHandler_1 = require("./login/oidc/redirectHandler/FallbackRedirectHandler");
const GeneralLogoutHandler_1 = __importDefault(require("./logout/GeneralLogoutHandler"));
const SessionInfoManager_1 = require("./sessionInfo/SessionInfoManager");
const AuthCodeRedirectHandler_1 = require("./login/oidc/redirectHandler/AuthCodeRedirectHandler");
const AggregateRedirectHandler_1 = __importDefault(require("./login/oidc/redirectHandler/AggregateRedirectHandler"));
const BrowserStorage_1 = __importDefault(require("./storage/BrowserStorage"));
const Redirector_1 = __importDefault(require("./login/oidc/Redirector"));
const ClientRegistrar_1 = __importDefault(require("./login/oidc/ClientRegistrar"));
function getClientAuthenticationWithDependencies(dependencies) {
    const inMemoryStorage = new solid_client_authn_core_1.InMemoryStorage();
    const secureStorage = dependencies.secureStorage || inMemoryStorage;
    const insecureStorage = dependencies.insecureStorage || new BrowserStorage_1.default();
    const storageUtility = new StorageUtility_1.default(secureStorage, insecureStorage);
    const issuerConfigFetcher = new IssuerConfigFetcher_1.default(storageUtility);
    const clientRegistrar = new ClientRegistrar_1.default(storageUtility);
    const sessionInfoManager = new SessionInfoManager_1.SessionInfoManager(storageUtility);
    const loginHandler = new OidcLoginHandler_1.default(storageUtility, new AuthorizationCodeWithPkceOidcHandler_1.default(storageUtility, new Redirector_1.default()), issuerConfigFetcher, clientRegistrar);
    const redirectHandler = new AggregateRedirectHandler_1.default([
        new AuthCodeRedirectHandler_1.AuthCodeRedirectHandler(storageUtility, sessionInfoManager, issuerConfigFetcher, clientRegistrar),
        new FallbackRedirectHandler_1.FallbackRedirectHandler(),
    ]);
    return new ClientAuthentication_1.default(loginHandler, redirectHandler, new GeneralLogoutHandler_1.default(sessionInfoManager), sessionInfoManager, issuerConfigFetcher);
}
exports.getClientAuthenticationWithDependencies = getClientAuthenticationWithDependencies;

},{"@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js","./storage/StorageUtility":"node_modules/@inrupt/solid-client-authn-browser/dist/storage/StorageUtility.js","./ClientAuthentication":"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","./login/oidc/OidcLoginHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","./login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","./login/oidc/IssuerConfigFetcher":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","./login/oidc/redirectHandler/FallbackRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/FallbackRedirectHandler.js","./logout/GeneralLogoutHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/logout/GeneralLogoutHandler.js","./sessionInfo/SessionInfoManager":"node_modules/@inrupt/solid-client-authn-browser/dist/sessionInfo/SessionInfoManager.js","./login/oidc/redirectHandler/AuthCodeRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AuthCodeRedirectHandler.js","./login/oidc/redirectHandler/AggregateRedirectHandler":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/AggregateRedirectHandler.js","./storage/BrowserStorage":"node_modules/@inrupt/solid-client-authn-browser/dist/storage/BrowserStorage.js","./login/oidc/Redirector":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/Redirector.js","./login/oidc/ClientRegistrar":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/ClientRegistrar.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = exports.silentlyAuthenticate = void 0;
const events_1 = require("events");
const uuid_1 = require("uuid");
const dependencies_1 = require("./dependencies");
const constant_1 = require("./constant");
const iframe_1 = require("./iframe");
async function silentlyAuthenticate(sessionId, clientAuthn, options = {
    inIframe: false,
}) {
    var _a;
    const storedSessionInfo = await clientAuthn.validateCurrentSession();
    if (storedSessionInfo !== null) {
        window.localStorage.setItem(constant_1.KEY_CURRENT_URL, window.location.href);
        await clientAuthn.login({
            sessionId,
            prompt: "none",
            oidcIssuer: storedSessionInfo.issuer,
            redirectUrl: storedSessionInfo.redirectUrl,
            clientId: storedSessionInfo.clientAppId,
            clientSecret: storedSessionInfo.clientAppSecret,
            tokenType: (_a = storedSessionInfo.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            inIframe: options.inIframe,
        });
        return true;
    }
    return false;
}
exports.silentlyAuthenticate = silentlyAuthenticate;
function isLoggedIn(sessionInfo) {
    return !!(sessionInfo === null || sessionInfo === void 0 ? void 0 : sessionInfo.isLoggedIn);
}
class Session extends events_1.EventEmitter {
    constructor(sessionOptions = {}, sessionId) {
        super();
        this.tokenRequestInProgress = false;
        this.tmpFetchWithCookies = false;
        this.login = async (options) => {
            var _a;
            await this.clientAuthentication.login({
                sessionId: this.info.sessionId,
                ...options,
                tokenType: (_a = options.tokenType) !== null && _a !== void 0 ? _a : "DPoP",
            });
            return new Promise(() => undefined);
        };
        this.fetch = async (url, init) => {
            return this.clientAuthentication.fetch(url, {
                ...init,
                credentials: this.tmpFetchWithCookies
                    ?
                        "include"
                    :
                        init === null || init === void 0 ? void 0 : init.credentials,
            });
        };
        this.logout = async () => {
            await this.clientAuthentication.logout(this.info.sessionId);
            this.info.isLoggedIn = false;
            this.tmpFetchWithCookies = false;
            this.emit("logout");
        };
        this.handleIncomingRedirect = async (inputOptions = {}) => {
            var _a;
            if (this.info.isLoggedIn) {
                return this.info;
            }
            if (this.tokenRequestInProgress) {
                return undefined;
            }
            const options = typeof inputOptions === "string" ? { url: inputOptions } : inputOptions;
            const url = (_a = options.url) !== null && _a !== void 0 ? _a : window.location.href;
            if (window.frameElement !== null) {
                iframe_1.postRedirectUrlToParent(url);
                return undefined;
            }
            if (options.useEssSession !== true ||
                options.restorePreviousSession === true) {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "false");
            }
            else {
                window.localStorage.setItem("tmp-resource-server-session-enabled", "true");
            }
            const storedSessionCookieReference = window.localStorage.getItem("tmp-resource-server-session-info");
            if (typeof storedSessionCookieReference === "string" &&
                options.restorePreviousSession !== true &&
                options.useEssSession === true) {
                function isValidSessionCookieReference(reference) {
                    var _a;
                    const resourceServers = Object.keys((_a = reference.sessions) !== null && _a !== void 0 ? _a : {});
                    return (typeof reference.webId === "string" &&
                        resourceServers.length > 0 &&
                        typeof reference.sessions[resourceServers[0]].expiration === "number");
                }
                const reference = JSON.parse(storedSessionCookieReference);
                if (isValidSessionCookieReference(reference)) {
                    const resourceServers = Object.keys(reference.sessions);
                    const webIdOrigin = new URL(reference.webId).hostname;
                    const ownResourceServer = resourceServers.find((resourceServer) => {
                        return new URL(resourceServer).hostname === webIdOrigin;
                    });
                    const relevantServer = ownResourceServer !== null && ownResourceServer !== void 0 ? ownResourceServer : resourceServers[0];
                    if (reference.sessions[relevantServer].expiration - Date.now() >
                        5 * 60 * 1000) {
                        this.info.isLoggedIn = true;
                        this.info.webId = reference.webId;
                        this.tmpFetchWithCookies = true;
                        return this.info;
                    }
                }
            }
            this.tokenRequestInProgress = true;
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(url);
            if (isLoggedIn(sessionInfo)) {
                this.setSessionInfo(sessionInfo);
                const currentUrl = window.localStorage.getItem(constant_1.KEY_CURRENT_URL);
                if (currentUrl === null) {
                    this.emit("login");
                }
                else {
                    window.localStorage.removeItem(constant_1.KEY_CURRENT_URL);
                    this.emit("sessionRestore", currentUrl);
                }
            }
            else if (options.restorePreviousSession === true) {
                const storedSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
                if (storedSessionId !== null) {
                    const attemptedSilentAuthentication = await silentlyAuthenticate(storedSessionId, this.clientAuthentication);
                    if (attemptedSilentAuthentication) {
                        return new Promise(() => { });
                    }
                }
            }
            this.tokenRequestInProgress = false;
            return sessionInfo;
        };
        if (sessionOptions.clientAuthentication) {
            this.clientAuthentication = sessionOptions.clientAuthentication;
        }
        else if (sessionOptions.secureStorage && sessionOptions.insecureStorage) {
            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({
                secureStorage: sessionOptions.secureStorage,
                insecureStorage: sessionOptions.insecureStorage,
            });
        }
        else {
            this.clientAuthentication = dependencies_1.getClientAuthenticationWithDependencies({});
        }
        if (sessionOptions.sessionInfo) {
            this.info = {
                sessionId: sessionOptions.sessionInfo.sessionId,
                isLoggedIn: false,
                webId: sessionOptions.sessionInfo.webId,
            };
        }
        else {
            this.info = {
                sessionId: sessionId !== null && sessionId !== void 0 ? sessionId : uuid_1.v4(),
                isLoggedIn: false,
            };
        }
        iframe_1.setupIframeListener(async (redirectUrl) => {
            const sessionInfo = await this.clientAuthentication.handleIncomingRedirect(redirectUrl);
            if (!isLoggedIn(sessionInfo)) {
                return;
            }
            this.setSessionInfo(sessionInfo);
        });
        this.on("tokenRenewal", () => silentlyAuthenticate(this.info.sessionId, this.clientAuthentication, {
            inIframe: true,
        }));
    }
    onLogin(callback) {
        this.on("login", callback);
    }
    onLogout(callback) {
        this.on("logout", callback);
    }
    onSessionRestore(callback) {
        this.on("sessionRestore", callback);
    }
    setSessionInfo(sessionInfo) {
        this.info.isLoggedIn = sessionInfo.isLoggedIn;
        this.info.webId = sessionInfo.webId;
        this.info.sessionId = sessionInfo.sessionId;
        this.info.expirationDate = sessionInfo.expirationDate;
        if (typeof sessionInfo.expirationDate === "number") {
            setTimeout(async () => {
                await this.logout();
            }, sessionInfo.expirationDate - Date.now());
        }
    }
}
exports.Session = Session;

},{"events":"node_modules/events/events.js","uuid":"node_modules/uuid/dist/esm-browser/index.js","./dependencies":"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js","./constant":"node_modules/@inrupt/solid-client-authn-browser/dist/constant.js","./iframe":"node_modules/@inrupt/solid-client-authn-browser/dist/iframe.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/defaultSession.js":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onSessionRestore = exports.onLogout = exports.onLogin = exports.handleIncomingRedirect = exports.logout = exports.login = exports.fetch = exports.getDefaultSession = void 0;
const Session_1 = require("./Session");
let defaultSession;
function getDefaultSession() {
    if (typeof defaultSession === "undefined") {
        defaultSession = new Session_1.Session();
    }
    return defaultSession;
}
exports.getDefaultSession = getDefaultSession;
const fetch = (...args) => {
    const session = getDefaultSession();
    return session.fetch(...args);
};
exports.fetch = fetch;
const login = (...args) => {
    const session = getDefaultSession();
    return session.login(...args);
};
exports.login = login;
const logout = (...args) => {
    const session = getDefaultSession();
    return session.logout(...args);
};
exports.logout = logout;
const handleIncomingRedirect = (...args) => {
    const session = getDefaultSession();
    return session.handleIncomingRedirect(...args);
};
exports.handleIncomingRedirect = handleIncomingRedirect;
const onLogin = (...args) => {
    const session = getDefaultSession();
    return session.onLogin(...args);
};
exports.onLogin = onLogin;
const onLogout = (...args) => {
    const session = getDefaultSession();
    return session.onLogout(...args);
};
exports.onLogout = onLogout;
const onSessionRestore = (...args) => {
    const session = getDefaultSession();
    return session.onSessionRestore(...args);
};
exports.onSessionRestore = onSessionRestore;

},{"./Session":"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js"}],"node_modules/@inrupt/solid-client-authn-browser/dist/index.js":[function(require,module,exports) {
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InMemoryStorage = exports.ConfigurationError = exports.NotImplementedError = exports.getClientAuthenticationWithDependencies = exports.Session = void 0;
var Session_1 = require("./Session");
Object.defineProperty(exports, "Session", { enumerable: true, get: function () { return Session_1.Session; } });
var dependencies_1 = require("./dependencies");
Object.defineProperty(exports, "getClientAuthenticationWithDependencies", { enumerable: true, get: function () { return dependencies_1.getClientAuthenticationWithDependencies; } });
__exportStar(require("./defaultSession"), exports);
var solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
Object.defineProperty(exports, "NotImplementedError", { enumerable: true, get: function () { return solid_client_authn_core_1.NotImplementedError; } });
Object.defineProperty(exports, "ConfigurationError", { enumerable: true, get: function () { return solid_client_authn_core_1.ConfigurationError; } });
Object.defineProperty(exports, "InMemoryStorage", { enumerable: true, get: function () { return solid_client_authn_core_1.InMemoryStorage; } });

},{"./Session":"node_modules/@inrupt/solid-client-authn-browser/dist/Session.js","./dependencies":"node_modules/@inrupt/solid-client-authn-browser/dist/dependencies.js","./defaultSession":"node_modules/@inrupt/solid-client-authn-browser/dist/defaultSession.js","@inrupt/solid-client-authn-core":"node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"node_modules/ieee754/index.js":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"node_modules/base64-js/index.js","ieee754":"node_modules/ieee754/index.js","isarray":"node_modules/isarray/index.js","buffer":"node_modules/buffer/index.js"}],"node_modules/http-link-header/lib/link.js":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
'use strict';

var COMPATIBLE_ENCODING_PATTERN = /^utf-?8|ascii|utf-?16-?le|ucs-?2|base-?64|latin-?1$/i;
var WS_TRIM_PATTERN = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
var WS_CHAR_PATTERN = /\s|\uFEFF|\xA0/;
var WS_FOLD_PATTERN = /\r?\n[\x20\x09]+/g;
var DELIMITER_PATTERN = /[;,"]/;
var WS_DELIMITER_PATTERN = /[;,"]|\s/;
/**
 * Token character pattern
 * @type {RegExp}
 * @see https://tools.ietf.org/html/rfc7230#section-3.2.6
 */

var TOKEN_PATTERN = /^[!#$%&'*+\-\.^_`|~\da-zA-Z]+$/;
var STATE = {
  IDLE: 1 << 0,
  URI: 1 << 1,
  ATTR: 1 << 2
};

function trim(value) {
  return value.replace(WS_TRIM_PATTERN, '');
}

function hasWhitespace(value) {
  return WS_CHAR_PATTERN.test(value);
}

function skipWhitespace(value, offset) {
  while (hasWhitespace(value[offset])) {
    offset++;
  }

  return offset;
}

function needsQuotes(value) {
  return WS_DELIMITER_PATTERN.test(value) || !TOKEN_PATTERN.test(value);
}

class Link {
  /**
   * Link
   * @constructor
   * @param {String} [value]
   * @returns {Link}
   */
  constructor(value) {
    /** @type {Array} URI references */
    this.refs = [];

    if (value) {
      this.parse(value);
    }
  }
  /**
   * Get refs with given relation type
   * @param {String} value
   * @returns {Array<Object>}
   */


  rel(value) {
    var links = [];
    var type = value.toLowerCase();

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i].rel.toLowerCase() === type) {
        links.push(this.refs[i]);
      }
    }

    return links;
  }
  /**
   * Get refs where given attribute has a given value
   * @param {String} attr
   * @param {String} value
   * @returns {Array<Object>}
   */


  get(attr, value) {
    attr = attr.toLowerCase();
    var links = [];

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i][attr] === value) {
        links.push(this.refs[i]);
      }
    }

    return links;
  }

  set(link) {
    this.refs.push(link);
    return this;
  }

  has(attr, value) {
    attr = attr.toLowerCase();

    for (var i = 0; i < this.refs.length; i++) {
      if (this.refs[i][attr] === value) {
        return true;
      }
    }

    return false;
  }

  parse(value, offset) {
    offset = offset || 0;
    value = offset ? value.slice(offset) : value; // Trim & unfold folded lines

    value = trim(value).replace(WS_FOLD_PATTERN, '');
    var state = STATE.IDLE;
    var length = value.length;
    var offset = 0;
    var ref = null;

    while (offset < length) {
      if (state === STATE.IDLE) {
        if (hasWhitespace(value[offset])) {
          offset++;
          continue;
        } else if (value[offset] === '<') {
          if (ref != null) {
            ref.rel != null ? this.refs.push(...Link.expandRelations(ref)) : this.refs.push(ref);
          }

          var end = value.indexOf('>', offset);
          if (end === -1) throw new Error('Expected end of URI delimiter at offset ' + offset);
          ref = {
            uri: value.slice(offset + 1, end)
          }; // this.refs.push( ref )

          offset = end;
          state = STATE.URI;
        } else {
          throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
        }

        offset++;
      } else if (state === STATE.URI) {
        if (hasWhitespace(value[offset])) {
          offset++;
          continue;
        } else if (value[offset] === ';') {
          state = STATE.ATTR;
          offset++;
        } else if (value[offset] === ',') {
          state = STATE.IDLE;
          offset++;
        } else {
          throw new Error('Unexpected character "' + value[offset] + '" at offset ' + offset);
        }
      } else if (state === STATE.ATTR) {
        if (value[offset] === ';' || hasWhitespace(value[offset])) {
          offset++;
          continue;
        }

        var end = value.indexOf('=', offset);
        if (end === -1) throw new Error('Expected attribute delimiter at offset ' + offset);
        var attr = trim(value.slice(offset, end)).toLowerCase();
        var attrValue = '';
        offset = end + 1;
        offset = skipWhitespace(value, offset);

        if (value[offset] === '"') {
          offset++;

          while (offset < length) {
            if (value[offset] === '"') {
              offset++;
              break;
            }

            if (value[offset] === '\\') {
              offset++;
            }

            attrValue += value[offset];
            offset++;
          }
        } else {
          var end = offset + 1;

          while (!DELIMITER_PATTERN.test(value[end]) && end < length) {
            end++;
          }

          attrValue = value.slice(offset, end);
          offset = end;
        }

        if (ref[attr] && Link.isSingleOccurenceAttr(attr)) {// Ignore multiples of attributes which may only appear once
        } else if (attr[attr.length - 1] === '*') {
          ref[attr] = Link.parseExtendedValue(attrValue);
        } else {
          attrValue = attr === 'type' ? attrValue.toLowerCase() : attrValue;

          if (ref[attr] != null) {
            if (Array.isArray(ref[attr])) {
              ref[attr].push(attrValue);
            } else {
              ref[attr] = [ref[attr], attrValue];
            }
          } else {
            ref[attr] = attrValue;
          }
        }

        switch (value[offset]) {
          case ',':
            state = STATE.IDLE;
            break;

          case ';':
            state = STATE.ATTR;
            break;
        }

        offset++;
      } else {
        throw new Error('Unknown parser state "' + state + '"');
      }
    }

    if (ref != null) {
      ref.rel != null ? this.refs.push(...Link.expandRelations(ref)) : this.refs.push(ref);
    }

    ref = null;
    return this;
  }

  toString() {
    var refs = [];
    var link = '';
    var ref = null;

    for (var i = 0; i < this.refs.length; i++) {
      ref = this.refs[i];
      link = Object.keys(this.refs[i]).reduce(function (link, attr) {
        if (attr === 'uri') return link;
        return link + '; ' + Link.formatAttribute(attr, ref[attr]);
      }, '<' + ref.uri + '>');
      refs.push(link);
    }

    return refs.join(', ');
  }

}
/**
 * Determines whether an encoding can be
 * natively handled with a `Buffer`
 * @param {String} value
 * @returns {Boolean}
 */


Link.isCompatibleEncoding = function (value) {
  return COMPATIBLE_ENCODING_PATTERN.test(value);
};

Link.parse = function (value, offset) {
  return new Link().parse(value, offset);
};

Link.isSingleOccurenceAttr = function (attr) {
  return attr === 'rel' || attr === 'type' || attr === 'media' || attr === 'title' || attr === 'title*';
};

Link.isTokenAttr = function (attr) {
  return attr === 'rel' || attr === 'type' || attr === 'anchor';
};

Link.escapeQuotes = function (value) {
  return value.replace(/"/g, '\\"');
};

Link.expandRelations = function (ref) {
  var rels = ref.rel.split(' ');
  return rels.map(function (rel) {
    var value = Object.assign({}, ref);
    value.rel = rel;
    return value;
  });
};
/**
 * Parses an extended value and attempts to decode it
 * @internal
 * @param {String} value
 * @return {Object}
 */


Link.parseExtendedValue = function (value) {
  var parts = /([^']+)?(?:'([^']+)')?(.+)/.exec(value);
  return {
    language: parts[2].toLowerCase(),
    encoding: Link.isCompatibleEncoding(parts[1]) ? null : parts[1].toLowerCase(),
    value: Link.isCompatibleEncoding(parts[1]) ? decodeURIComponent(parts[3]) : parts[3]
  };
};
/**
 * Format a given extended attribute and it's value
 * @param {String} attr
 * @param {Object} data
 * @return {String}
 */


Link.formatExtendedAttribute = function (attr, data) {
  var encoding = (data.encoding || 'utf-8').toUpperCase();
  var language = data.language || 'en';
  var encodedValue = '';

  if (Buffer.isBuffer(data.value) && Link.isCompatibleEncoding(encoding)) {
    encodedValue = data.value.toString(encoding);
  } else if (Buffer.isBuffer(data.value)) {
    encodedValue = data.value.toString('hex').replace(/[0-9a-f]{2}/gi, '%$1');
  } else {
    encodedValue = encodeURIComponent(data.value);
  }

  return attr + '=' + encoding + '\'' + language + '\'' + encodedValue;
};
/**
 * Format a given attribute and it's value
 * @param {String} attr
 * @param {String|Object} value
 * @return {String}
 */


Link.formatAttribute = function (attr, value) {
  if (Array.isArray(value)) {
    return value.map(item => {
      return Link.formatAttribute(attr, item);
    }).join('; ');
  }

  if (attr[attr.length - 1] === '*' || typeof value !== 'string') {
    return Link.formatExtendedAttribute(attr, value);
  }

  if (Link.isTokenAttr(attr)) {
    value = needsQuotes(value) ? '"' + Link.escapeQuotes(value) + '"' : Link.escapeQuotes(value);
  } else if (needsQuotes(value)) {
    value = encodeURIComponent(value); // We don't need to escape <SP> <,> <;> within quotes

    value = value.replace(/%20/g, ' ').replace(/%2C/g, ',').replace(/%3B/g, ';');
    value = '"' + value + '"';
  }

  return attr + '=' + value;
};

module.exports = Link;
},{"buffer":"node_modules/buffer/index.js"}],"node_modules/@rdfjs/data-model/lib/BlankNode.js":[function(require,module,exports) {
class BlankNode {
  constructor (id) {
    this.value = id || ('b' + (++BlankNode.nextId))
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

BlankNode.prototype.termType = 'BlankNode'

BlankNode.nextId = 0

module.exports = BlankNode

},{}],"node_modules/@rdfjs/data-model/lib/DefaultGraph.js":[function(require,module,exports) {
class DefaultGraph {
  equals (other) {
    return !!other && other.termType === this.termType
  }
}

DefaultGraph.prototype.termType = 'DefaultGraph'
DefaultGraph.prototype.value = ''

module.exports = DefaultGraph

},{}],"node_modules/@rdfjs/data-model/lib/fromTerm.js":[function(require,module,exports) {
function fromTerm (original) {
  if (!original) {
    return null
  }

  if (original.termType === 'BlankNode') {
    return this.blankNode(original.value)
  }

  if (original.termType === 'DefaultGraph') {
    return this.defaultGraph()
  }

  if (original.termType === 'Literal') {
    return this.literal(original.value, original.language || this.namedNode(original.datatype.value))
  }

  if (original.termType === 'NamedNode') {
    return this.namedNode(original.value)
  }

  if (original.termType === 'Quad') {
    const subject = this.fromTerm(original.subject)
    const predicate = this.fromTerm(original.predicate)
    const object = this.fromTerm(original.object)
    const graph = this.fromTerm(original.graph)

    return this.quad(subject, predicate, object, graph)
  }

  if (original.termType === 'Variable') {
    return this.variable(original.value)
  }

  throw new Error(`unknown termType ${original.termType}`)
}

module.exports = fromTerm

},{}],"node_modules/@rdfjs/data-model/lib/NamedNode.js":[function(require,module,exports) {
class NamedNode {
  constructor (iri) {
    this.value = iri
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

NamedNode.prototype.termType = 'NamedNode'

module.exports = NamedNode

},{}],"node_modules/@rdfjs/data-model/lib/Literal.js":[function(require,module,exports) {
const NamedNode = require('./NamedNode.js')

class Literal {
  constructor (value, language, datatype) {
    this.value = value
    this.datatype = Literal.stringDatatype
    this.language = ''

    if (language) {
      this.language = language
      this.datatype = Literal.langStringDatatype
    } else if (datatype) {
      this.datatype = datatype
    }
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value &&
      other.language === this.language && other.datatype.equals(this.datatype)
  }
}

Literal.prototype.termType = 'Literal'

Literal.langStringDatatype = new NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString')
Literal.stringDatatype = new NamedNode('http://www.w3.org/2001/XMLSchema#string')

module.exports = Literal

},{"./NamedNode.js":"node_modules/@rdfjs/data-model/lib/NamedNode.js"}],"node_modules/@rdfjs/data-model/lib/Quad.js":[function(require,module,exports) {
const DefaultGraph = require('./DefaultGraph.js')

class Quad {
  constructor (subject, predicate, object, graph) {
    this.subject = subject
    this.predicate = predicate
    this.object = object

    if (graph) {
      this.graph = graph
    } else {
      this.graph = new DefaultGraph()
    }
  }

  equals (other) {
    // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
    return !!other && (other.termType === 'Quad' || !other.termType) &&
      other.subject.equals(this.subject) && other.predicate.equals(this.predicate) &&
      other.object.equals(this.object) && other.graph.equals(this.graph)
  }
}

Quad.prototype.termType = 'Quad'
Quad.prototype.value = ''

module.exports = Quad

},{"./DefaultGraph.js":"node_modules/@rdfjs/data-model/lib/DefaultGraph.js"}],"node_modules/@rdfjs/data-model/lib/Variable.js":[function(require,module,exports) {
class Variable {
  constructor (name) {
    this.value = name
  }

  equals (other) {
    return !!other && other.termType === this.termType && other.value === this.value
  }
}

Variable.prototype.termType = 'Variable'

module.exports = Variable

},{}],"node_modules/@rdfjs/data-model/lib/DataFactory.js":[function(require,module,exports) {
const BlankNode = require('./BlankNode.js')
const DefaultGraph = require('./DefaultGraph.js')
const fromTermRaw = require('./fromTerm.js')
const Literal = require('./Literal.js')
const NamedNode = require('./NamedNode.js')
const Quad = require('./Quad.js')
const Variable = require('./Variable.js')

function namedNode (value) {
  return new NamedNode(value)
}

function blankNode (value) {
  return new BlankNode(value)
}

function literal (value, languageOrDatatype) {
  if (typeof languageOrDatatype === 'string') {
    if (languageOrDatatype.indexOf(':') === -1) {
      return new Literal(value, languageOrDatatype)
    }

    return new Literal(value, null, DataFactory.namedNode(languageOrDatatype))
  }

  return new Literal(value, null, languageOrDatatype)
}

function variable (value) {
  return new Variable(value)
}

function defaultGraph () {
  return DataFactory.defaultGraphInstance
}

function triple (subject, predicate, object) {
  return DataFactory.quad(subject, predicate, object)
}

function quad (subject, predicate, object, graph) {
  return new Quad(subject, predicate, object, graph || DataFactory.defaultGraphInstance)
}

function fromTerm (original) {
  return fromTermRaw.call(DataFactory, original)
}

function fromQuad (original) {
  return fromTermRaw.call(DataFactory, original)
}

const DataFactory = {
  namedNode,
  blankNode,
  literal,
  variable,
  defaultGraph,
  triple,
  quad,
  fromTerm,
  fromQuad,
  defaultGraphInstance: new DefaultGraph()
}

module.exports = DataFactory

},{"./BlankNode.js":"node_modules/@rdfjs/data-model/lib/BlankNode.js","./DefaultGraph.js":"node_modules/@rdfjs/data-model/lib/DefaultGraph.js","./fromTerm.js":"node_modules/@rdfjs/data-model/lib/fromTerm.js","./Literal.js":"node_modules/@rdfjs/data-model/lib/Literal.js","./NamedNode.js":"node_modules/@rdfjs/data-model/lib/NamedNode.js","./Quad.js":"node_modules/@rdfjs/data-model/lib/Quad.js","./Variable.js":"node_modules/@rdfjs/data-model/lib/Variable.js"}],"node_modules/@rdfjs/data-model/index.js":[function(require,module,exports) {
const DataFactory = require('./lib/DataFactory.js')

module.exports = DataFactory

},{"./lib/DataFactory.js":"node_modules/@rdfjs/data-model/lib/DataFactory.js"}],"node_modules/@rdfjs/dataset/DatasetCore.js":[function(require,module,exports) {
function isString (s) {
  return typeof s === 'string' || s instanceof String
}

const xsdString = 'http://www.w3.org/2001/XMLSchema#string'

function termToId (term) {
  if (typeof term === 'string') {
    return term
  }

  if (!term) {
    return ''
  }

  if (typeof term.id !== 'undefined' && term.termType !== 'Quad') {
    return term.id
  }

  let subject, predicate, object, graph

  // Term instantiated with another library
  switch (term.termType) {
    case 'NamedNode':
      return term.value

    case 'BlankNode':
      return `_:${term.value}`

    case 'Variable':
      return `?${term.value}`

    case 'DefaultGraph':
      return ''

    case 'Literal':
      if (term.language) {
        return `"${term.value}"@${term.language}`
      }

      return `"${term.value}"${term.datatype && term.datatype.value !== xsdString ? `^^${term.datatype.value}` : ''}`

    case 'Quad':
      // To identify RDF* quad components, we escape quotes by doubling them.
      // This avoids the overhead of backslash parsing of Turtle-like syntaxes.
      subject = escapeQuotes(termToId(term.subject))
      predicate = escapeQuotes(termToId(term.predicate))
      object = escapeQuotes(termToId(term.object))
      graph = term.graph.termType === 'DefaultGraph' ? '' : ` ${termToId(term.graph)}`

      return `<<${subject} ${predicate} ${object}${graph}>>`

    default:
      throw new Error(`Unexpected termType: ${term.termType}`)
  }
}

const escapedLiteral = /^"(.*".*)(?="[^"]*$)/

function escapeQuotes (id) {
  return id.replace(escapedLiteral, (_, quoted) => `"${quoted.replace(/"/g, '""')}`)
}

class DatasetCore {
  constructor (quads) {
    // The number of quads is initially zero
    this._size = 0
    // `_graphs` contains subject, predicate, and object indexes per graph
    this._graphs = Object.create(null)
    // `_ids` maps entities such as `http://xmlns.com/foaf/0.1/name` to numbers,
    // saving memory by using only numbers as keys in `_graphs`
    this._id = 0
    this._ids = Object.create(null)
    this._ids['><'] = 0 // dummy entry, so the first actual key is non-zero
    this._entities = Object.create(null) // inverse of `_ids`

    this._quads = new Map()

    // Add quads if passed
    if (quads) {
      for (const quad of quads) {
        this.add(quad)
      }
    }
  }

  get size () {
    // Return the quad count if if was cached
    let size = this._size

    if (size !== null) {
      return size
    }

    // Calculate the number of quads by counting to the deepest level
    size = 0
    const graphs = this._graphs
    let subjects, subject

    for (const graphKey in graphs) {
      for (const subjectKey in (subjects = graphs[graphKey].subjects)) {
        for (const predicateKey in (subject = subjects[subjectKey])) {
          size += Object.keys(subject[predicateKey]).length
        }
      }
    }

    this._size = size

    return this._size
  }

  add (quad) {
    // Convert terms to internal string representation
    let subject = termToId(quad.subject)
    let predicate = termToId(quad.predicate)
    let object = termToId(quad.object)
    const graph = termToId(quad.graph)

    // Find the graph that will contain the triple
    let graphItem = this._graphs[graph]
    // Create the graph if it doesn't exist yet
    if (!graphItem) {
      graphItem = this._graphs[graph] = { subjects: {}, predicates: {}, objects: {} }
      // Freezing a graph helps subsequent `add` performance,
      // and properties will never be modified anyway
      Object.freeze(graphItem)
    }

    // Since entities can often be long IRIs, we avoid storing them in every index.
    // Instead, we have a separate index that maps entities to numbers,
    // which are then used as keys in the other indexes.
    const ids = this._ids
    const entities = this._entities
    subject = ids[subject] || (ids[entities[++this._id] = subject] = this._id)
    predicate = ids[predicate] || (ids[entities[++this._id] = predicate] = this._id)
    object = ids[object] || (ids[entities[++this._id] = object] = this._id)

    this._addToIndex(graphItem.subjects, subject, predicate, object)
    this._addToIndex(graphItem.predicates, predicate, object, subject)
    this._addToIndex(graphItem.objects, object, subject, predicate)

    this._setQuad(subject, predicate, object, graph, quad)

    // The cached quad count is now invalid
    this._size = null

    return this
  }

  delete (quad) {
    // Convert terms to internal string representation
    let subject = termToId(quad.subject)
    let predicate = termToId(quad.predicate)
    let object = termToId(quad.object)
    const graph = termToId(quad.graph)

    // Find internal identifiers for all components
    // and verify the quad exists.
    const ids = this._ids
    const graphs = this._graphs
    let graphItem, subjects, predicates

    if (!(subject = ids[subject]) || !(predicate = ids[predicate]) ||
      !(object = ids[object]) || !(graphItem = graphs[graph]) ||
      !(subjects = graphItem.subjects[subject]) ||
      !(predicates = subjects[predicate]) ||
      !(object in predicates)
    ) {
      return this
    }

    // Remove it from all indexes
    this._removeFromIndex(graphItem.subjects, subject, predicate, object)
    this._removeFromIndex(graphItem.predicates, predicate, object, subject)
    this._removeFromIndex(graphItem.objects, object, subject, predicate)

    if (this._size !== null) {
      this._size--
    }

    this._deleteQuad(subject, predicate, object, graph)

    // Remove the graph if it is empty
    for (subject in graphItem.subjects) { // eslint-disable-line no-unreachable-loop
      return this
    }

    delete graphs[graph]

    return this
  }

  has (quad) {
    // Convert terms to internal string representation
    const subject = termToId(quad.subject)
    const predicate = termToId(quad.predicate)
    const object = termToId(quad.object)
    const graph = termToId(quad.graph)

    const graphItem = this._graphs[graph]

    if (!graphItem) {
      return false
    }

    const ids = this._ids
    let subjectId, predicateId, objectId

    // Translate IRIs to internal index keys.
    if (
      (isString(subject) && !(subjectId = ids[subject])) ||
      (isString(predicate) && !(predicateId = ids[predicate])) ||
      (isString(object) && !(objectId = ids[object]))
    ) {
      return false
    }

    return this._countInIndex(graphItem.objects, objectId, subjectId, predicateId) === 1
  }

  match (subject, predicate, object, graph) {
    return this._createDataset(this._match(subject, predicate, object, graph))
  }

  [Symbol.iterator] () {
    return this._match()[Symbol.iterator]()
  }

  // ## Private methods

  // ### `_addToIndex` adds a quad to a three-layered index.
  // Returns if the index has changed, if the entry did not already exist.
  _addToIndex (index0, key0, key1, key2) {
    // Create layers as necessary
    const index1 = index0[key0] || (index0[key0] = {})
    const index2 = index1[key1] || (index1[key1] = {})
    // Setting the key to _any_ value signals the presence of the quad
    const existed = key2 in index2

    if (!existed) {
      index2[key2] = null
    }

    return !existed
  }

  // ### `_removeFromIndex` removes a quad from a three-layered index
  _removeFromIndex (index0, key0, key1, key2) {
    // Remove the quad from the index
    const index1 = index0[key0]
    const index2 = index1[key1]
    delete index2[key2]

    // Remove intermediary index layers if they are empty
    for (const key in index2) { // eslint-disable-line no-unreachable-loop
      return
    }

    delete index1[key1]

    for (const key in index1) { // eslint-disable-line no-unreachable-loop
      return
    }

    delete index0[key0]
  }

  // ### `_findInIndex` finds a set of quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  // `name0`, `name1`, and `name2` are the names of the keys at each level,
  // used when reconstructing the resulting quad
  // (for instance: _subject_, _predicate_, and _object_).
  // Finally, `graph` will be the graph of the created quads.
  // If `callback` is given, each result is passed through it
  // and iteration halts when it returns truthy for any quad.
  // If instead `array` is given, each result is added to the array.
  _findInIndex (index0, key0, key1, key2, name0, name1, name2, graph, callback, array) {
    let tmp, index1, index2

    // If a key is specified, use only that part of index 0.
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0]
    }

    for (const value0 in index0) {
      index1 = index0[value0]

      if (index1) {
        // If a key is specified, use only that part of index 1.
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1]
        }

        for (const value1 in index1) {
          index2 = index1[value1]

          if (index2) {
            // If a key is specified, use only that part of index 2, if it exists.
            const values = key2 ? (key2 in index2 ? [key2] : []) : Object.keys(index2)
            // Create quads for all items found in index 2.
            for (let l = 0; l < values.length; l++) {
              const parts = {
                [name0]: value0,
                [name1]: value1,
                [name2]: values[l]
              }

              const quad = this._getQuad(parts.subject, parts.predicate, parts.object, graph)

              if (array) {
                array.push(quad)
              } else if (callback(quad)) {
                return true
              }
            }
          }
        }
      }
    }

    return array
  }

  // ### `_countInIndex` counts matching quads in a three-layered index.
  // The index base is `index0` and the keys at each level are `key0`, `key1`, and `key2`.
  // Any of these keys can be undefined, which is interpreted as a wildcard.
  _countInIndex (index0, key0, key1, key2) {
    let count = 0
    let tmp, index1, index2

    // If a key is specified, count only that part of index 0
    if (key0) {
      (tmp = index0, index0 = {})[key0] = tmp[key0]
    }

    for (const value0 in index0) {
      index1 = index0[value0]

      if (index1) {
        // If a key is specified, count only that part of index 1
        if (key1) {
          (tmp = index1, index1 = {})[key1] = tmp[key1]
        }

        for (const value1 in index1) {
          index2 = index1[value1]

          if (index2) {
            if (key2) {
              // If a key is specified, count the quad if it exists
              (key2 in index2) && count++
            } else {
              // Otherwise, count all quads
              count += Object.keys(index2).length
            }
          }
        }
      }
    }

    return count
  }

  // ### `_getGraphs` returns an array with the given graph,
  // or all graphs if the argument is null or undefined.
  _getGraphs (graph) {
    if (!isString(graph)) {
      return this._graphs
    }

    return {
      [graph]: this._graphs[graph]
    }
  }

  _match (subject, predicate, object, graph) {
    // Convert terms to internal string representation
    subject = subject && termToId(subject)
    predicate = predicate && termToId(predicate)
    object = object && termToId(object)
    graph = graph && termToId(graph)

    const quads = []
    const graphs = this._getGraphs(graph)
    const ids = this._ids
    let content, subjectId, predicateId, objectId

    // Translate IRIs to internal index keys.
    if (
      (isString(subject) && !(subjectId = ids[subject])) ||
      (isString(predicate) && !(predicateId = ids[predicate])) ||
      (isString(object) && !(objectId = ids[object]))
    ) {
      return quads
    }

    for (const graphId in graphs) {
      content = graphs[graphId]

      // Only if the specified graph contains triples, there can be results
      if (content) {
        // Choose the optimal index, based on what fields are present
        if (subjectId) {
          if (objectId) {
            // If subject and object are given, the object index will be the fastest
            this._findInIndex(content.objects, objectId, subjectId, predicateId, 'object', 'subject', 'predicate', graphId, null, quads)
          } else {
            // If only subject and possibly predicate are given, the subject index will be the fastest
            this._findInIndex(content.subjects, subjectId, predicateId, null, 'subject', 'predicate', 'object', graphId, null, quads)
          }
        } else if (predicateId) {
          // if only predicate and possibly object are given, the predicate index will be the fastest
          this._findInIndex(content.predicates, predicateId, objectId, null, 'predicate', 'object', 'subject', graphId, null, quads)
        } else if (objectId) {
          // If only object is given, the object index will be the fastest
          this._findInIndex(content.objects, objectId, null, null, 'object', 'subject', 'predicate', graphId, null, quads)
        } else {
          // If nothing is given, iterate subjects and predicates first
          this._findInIndex(content.subjects, null, null, null, 'subject', 'predicate', 'object', graphId, null, quads)
        }
      }
    }

    return quads
  }

  _getQuad (subjectId, predicateId, objectId, graphId) {
    return this._quads.get(this._toId(subjectId, predicateId, objectId, graphId))
  }

  _setQuad (subjectId, predicateId, objectId, graphId, quad) {
    this._quads.set(this._toId(subjectId, predicateId, objectId, graphId), quad)
  }

  _deleteQuad (subjectId, predicateId, objectId, graphId) {
    this._quads.delete(this._toId(subjectId, predicateId, objectId, graphId))
  }

  _createDataset (quads) {
    return new this.constructor(quads)
  }

  _toId (subjectId, predicateId, objectId, graphId) {
    return `${subjectId}:${predicateId}:${objectId}:${graphId}`
  }
}

module.exports = DatasetCore

},{}],"node_modules/@rdfjs/dataset/index.js":[function(require,module,exports) {
const rdf = require('@rdfjs/data-model')
const DatasetCore = require('./DatasetCore')

function dataset (quads) {
  return new DatasetCore(quads)
}

module.exports = Object.assign({ dataset }, rdf)

},{"@rdfjs/data-model":"node_modules/@rdfjs/data-model/index.js","./DatasetCore":"node_modules/@rdfjs/dataset/DatasetCore.js"}],"node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)?\/[^/]+(?:\?.*)?$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"node_modules/parcel-bundler/src/builtins/bundle-loader.js":[function(require,module,exports) {
var getBundleURL = require('./bundle-url').getBundleURL;

function loadBundlesLazy(bundles) {
  if (!Array.isArray(bundles)) {
    bundles = [bundles];
  }

  var id = bundles[bundles.length - 1];

  try {
    return Promise.resolve(require(id));
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      return new LazyPromise(function (resolve, reject) {
        loadBundles(bundles.slice(0, -1)).then(function () {
          return require(id);
        }).then(resolve, reject);
      });
    }

    throw err;
  }
}

function loadBundles(bundles) {
  return Promise.all(bundles.map(loadBundle));
}

var bundleLoaders = {};

function registerBundleLoader(type, loader) {
  bundleLoaders[type] = loader;
}

module.exports = exports = loadBundlesLazy;
exports.load = loadBundles;
exports.register = registerBundleLoader;
var bundles = {};

function loadBundle(bundle) {
  var id;

  if (Array.isArray(bundle)) {
    id = bundle[1];
    bundle = bundle[0];
  }

  if (bundles[bundle]) {
    return bundles[bundle];
  }

  var type = (bundle.substring(bundle.lastIndexOf('.') + 1, bundle.length) || bundle).toLowerCase();
  var bundleLoader = bundleLoaders[type];

  if (bundleLoader) {
    return bundles[bundle] = bundleLoader(getBundleURL() + bundle).then(function (resolved) {
      if (resolved) {
        module.bundle.register(id, resolved);
      }

      return resolved;
    }).catch(function (e) {
      delete bundles[bundle];
      throw e;
    });
  }
}

function LazyPromise(executor) {
  this.executor = executor;
  this.promise = null;
}

LazyPromise.prototype.then = function (onSuccess, onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.then(onSuccess, onError);
};

LazyPromise.prototype.catch = function (onError) {
  if (this.promise === null) this.promise = new Promise(this.executor);
  return this.promise.catch(onError);
};
},{"./bundle-url":"node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"node_modules/@inrupt/solid-client/dist/index.es.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addLiteral = addLiteral;
exports.addMockFallbackAclTo = addMockFallbackAclTo;
exports.addMockResourceAclTo = addMockResourceAclTo;
exports.addNamedNode = addNamedNode;
exports.addStringWithLocale = addStringWithLocale;
exports.addTerm = addTerm;
exports.asUrl = asUrl;
exports.buildThing = buildThing;
exports.changeLogAsMarkdown = changeLogAsMarkdown;
exports.createAcl = createAcl;
exports.createAclFromFallbackAcl = createAclFromFallbackAcl;
exports.createContainerAt = createContainerAt;
exports.createContainerInContainer = createContainerInContainer;
exports.createSolidDataset = createSolidDataset;
exports.createThing = createThing;
exports.deleteAclFor = deleteAclFor;
exports.deleteContainer = deleteContainer;
exports.deleteFile = deleteFile;
exports.deleteSolidDataset = deleteSolidDataset;
exports.fromRdfJsDataset = fromRdfJsDataset;
exports.getAgentAccess = getAgentAccess$2;
exports.getAgentAccessAll = getAgentAccessAll$2;
exports.getAgentDefaultAccess = getAgentDefaultAccess;
exports.getAgentDefaultAccessAll = getAgentDefaultAccessAll;
exports.getAgentResourceAccess = getAgentResourceAccess;
exports.getAgentResourceAccessAll = getAgentResourceAccessAll;
exports.getBoolean = getBoolean;
exports.getBooleanAll = getBooleanAll;
exports.getContainedResourceUrlAll = getContainedResourceUrlAll;
exports.getContentType = getContentType$1;
exports.getDate = getDate;
exports.getDateAll = getDateAll;
exports.getDatetime = getDatetime;
exports.getDatetimeAll = getDatetimeAll;
exports.getDecimal = getDecimal;
exports.getDecimalAll = getDecimalAll;
exports.getEffectiveAccess = getEffectiveAccess;
exports.getFallbackAcl = getFallbackAcl;
exports.getFile = getFile;
exports.getFileWithAcl = getFileWithAcl;
exports.getGroupAccess = getGroupAccess$2;
exports.getGroupAccessAll = getGroupAccessAll$2;
exports.getGroupDefaultAccess = getGroupDefaultAccess;
exports.getGroupDefaultAccessAll = getGroupDefaultAccessAll;
exports.getGroupResourceAccess = getGroupResourceAccess;
exports.getGroupResourceAccessAll = getGroupResourceAccessAll;
exports.getInteger = getInteger;
exports.getIntegerAll = getIntegerAll;
exports.getLinkedResourceUrlAll = getLinkedResourceUrlAll;
exports.getLiteral = getLiteral;
exports.getLiteralAll = getLiteralAll;
exports.getNamedNode = getNamedNode;
exports.getNamedNodeAll = getNamedNodeAll;
exports.getPodOwner = getPodOwner;
exports.getPropertyAll = getPropertyAll;
exports.getPublicAccess = getPublicAccess$2;
exports.getPublicDefaultAccess = getPublicDefaultAccess;
exports.getPublicResourceAccess = getPublicResourceAccess;
exports.getResourceAcl = getResourceAcl;
exports.getResourceInfo = getResourceInfo;
exports.getResourceInfoWithAcl = getResourceInfoWithAcl;
exports.getSolidDataset = getSolidDataset;
exports.getSolidDatasetWithAcl = getSolidDatasetWithAcl;
exports.getSourceUrl = getSourceUrl;
exports.getStringByLocaleAll = getStringByLocaleAll;
exports.getStringNoLocale = getStringNoLocale;
exports.getStringNoLocaleAll = getStringNoLocaleAll;
exports.getStringWithLocale = getStringWithLocale;
exports.getStringWithLocaleAll = getStringWithLocaleAll;
exports.getTerm = getTerm;
exports.getTermAll = getTermAll;
exports.getThing = getThing;
exports.getThingAll = getThingAll;
exports.getTime = getTime;
exports.getTimeAll = getTimeAll;
exports.getUrl = getUrl;
exports.getUrlAll = getUrlAll;
exports.hasAccessibleAcl = hasAccessibleAcl;
exports.hasAcl = hasAcl;
exports.hasFallbackAcl = hasFallbackAcl;
exports.hasResourceAcl = hasResourceAcl;
exports.hasResourceInfo = hasResourceInfo;
exports.hasServerResourceInfo = hasServerResourceInfo;
exports.isContainer = isContainer;
exports.isPodOwner = isPodOwner;
exports.isRawData = isRawData;
exports.isThing = isThing;
exports.isThingLocal = isThingLocal;
exports.mockContainerFrom = mockContainerFrom;
exports.mockFetchError = mockFetchError;
exports.mockFileFrom = mockFileFrom;
exports.mockSolidDatasetFrom = mockSolidDatasetFrom;
exports.mockThingFrom = mockThingFrom;
exports.overwriteFile = overwriteFile;
exports.removeAll = removeAll;
exports.removeLiteral = removeLiteral;
exports.removeNamedNode = removeNamedNode;
exports.removeStringWithLocale = removeStringWithLocale;
exports.removeThing = removeThing;
exports.responseToResourceInfo = responseToResourceInfo;
exports.responseToSolidDataset = responseToSolidDataset;
exports.saveAclFor = saveAclFor;
exports.saveFileInContainer = saveFileInContainer;
exports.saveSolidDatasetAt = saveSolidDatasetAt;
exports.saveSolidDatasetInContainer = saveSolidDatasetInContainer;
exports.setAgentDefaultAccess = setAgentDefaultAccess;
exports.setAgentResourceAccess = setAgentResourceAccess$1;
exports.setGroupDefaultAccess = setGroupDefaultAccess;
exports.setGroupResourceAccess = setGroupResourceAccess$1;
exports.setLiteral = setLiteral;
exports.setNamedNode = setNamedNode;
exports.setPublicDefaultAccess = setPublicDefaultAccess;
exports.setPublicResourceAccess = setPublicResourceAccess$1;
exports.setStringWithLocale = setStringWithLocale;
exports.setTerm = setTerm;
exports.setThing = setThing;
exports.solidDatasetAsMarkdown = solidDatasetAsMarkdown;
exports.thingAsMarkdown = thingAsMarkdown;
exports.toRdfJsDataset = toRdfJsDataset;
exports.setUrl = exports.setTime = exports.setStringNoLocale = exports.setIri = exports.setInteger = exports.setDecimal = exports.setDatetime = exports.setDate = exports.setBoolean = exports.removeUrl = exports.removeTime = exports.removeStringNoLocale = exports.removeIri = exports.removeInteger = exports.removeDecimal = exports.removeDatetime = exports.removeDate = exports.removeBoolean = exports.getSourceIri = exports.getIriAll = exports.getIri = exports.asIri = exports.addUrl = exports.addTime = exports.addStringNoLocale = exports.addIri = exports.addInteger = exports.addDecimal = exports.addDatetime = exports.addDate = exports.addBoolean = exports.acp_v3 = exports.acp_v2 = exports.acp_v1 = exports.access = exports.ThingExpectedError = exports.SolidClientError = exports.FetchError = void 0;

var _httpLinkHeader = _interopRequireDefault(require("http-link-header"));

var _dataModel = _interopRequireDefault(require("@rdfjs/data-model"));

var _dataset = _interopRequireDefault(require("@rdfjs/dataset"));

var crossFetch = _interopRequireWildcard(require("cross-fetch"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Verify whether a given SolidDataset includes metadata about where it was sent to.
 *
 * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.
 * @returns True if `dataset` includes metadata about the Resource it was sent to, false if not.
 * @since 0.2.0
 */
function hasResourceInfo(resource) {
  const potentialResourceInfo = resource;
  return typeof potentialResourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo === "object";
}
/**
 * Verify whether a given SolidDataset includes metadata about where it was retrieved from.
 *
 * @param dataset A [[SolidDataset]] that may have metadata attached about the Resource it was retrieved from.
 * @returns True if `dataset` includes metadata about the Resource it was retrieved from, false if not.
 * @since 0.6.0
 */


function hasServerResourceInfo(resource) {
  const potentialResourceInfo = resource;
  return typeof potentialResourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo === "object" && typeof potentialResourceInfo.internal_resourceInfo.linkedResources === "object";
}
/** @internal */


function hasChangelog(dataset) {
  const potentialChangeLog = dataset;
  return typeof potentialChangeLog.internal_changeLog === "object" && Array.isArray(potentialChangeLog.internal_changeLog.additions) && Array.isArray(potentialChangeLog.internal_changeLog.deletions);
}
/**
 * Errors thrown by solid-client extend this class, and can thereby be distinguished from errors
 * thrown in lower-level libraries.
 * @since 1.2.0
 */


class SolidClientError extends Error {}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @internal */


exports.SolidClientError = SolidClientError;

function internal_toIriString(iri) {
  return typeof iri === "string" ? iri : iri.value;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @ignore Internal fallback for when no fetcher is provided; not to be used downstream.
 */


const fetch = async (resource, init) => {
  /* istanbul ignore if: `require` is always defined in the unit test environment */
  if (typeof window === "object" && typeof require !== "function") {
    return await window.fetch(resource, init);
  }
  /* istanbul ignore if: `require` is always defined in the unit test environment */


  if (typeof require !== "function") {
    // When using Node.js with ES Modules, require is not defined:
    const crossFetchModule = await require("_bundle_loader")(require.resolve('cross-fetch'));
    const fetch = crossFetchModule.default;
    return fetch(resource, init);
  } // Implementation note: it's up to the client application to resolve these module names to the
  // respective npm packages. At least one commonly used tool (Webpack) is only able to do that if
  // the module names are literal strings.
  // Additionally, Webpack throws a warning in a way that halts compilation for at least Next.js
  // when using native Javascript dynamic imports (`import()`), whereas `require()` just logs a
  // warning. Since the use of package names instead of file names requires a bundles anyway, this
  // should not have any practical consequences. For more background, see:
  // https://github.com/webpack/webpack/issues/7713


  let fetch; // Unfortunately solid-client-authn-browser does not support a default session yet.
  // Once it does, we can auto-detect if it is available and use it as follows:
  // try {
  //   fetch = require("solid-client-authn-browser").fetch;
  // } catch (e) {
  // When enabling the above, make sure to add a similar try {...} catch block using `import`
  // statements in the elseif above.
  // eslint-disable-next-line prefer-const

  fetch = require("cross-fetch"); // }

  return await fetch(resource, init);
};
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @internal
 */


function internal_parseResourceInfo(response) {
  var _a, _b, _c;

  const contentTypeParts = (_b = (_a = response.headers.get("Content-Type")) === null || _a === void 0 ? void 0 : _a.split(";")) !== null && _b !== void 0 ? _b : []; // If the server offers a Turtle or JSON-LD serialisation on its own accord,
  // that tells us whether it is RDF data that the server can understand
  // (and hence can be updated with a PATCH request with SPARQL INSERT and DELETE statements),
  // in which case our SolidDataset-related functions should handle it.
  // For more context, see https://github.com/inrupt/solid-client-js/pull/214.

  const isSolidDataset = contentTypeParts.length > 0 && ["text/turtle", "application/ld+json"].includes(contentTypeParts[0]);
  const resourceInfo = {
    sourceIri: response.url,
    isRawData: !isSolidDataset,
    contentType: (_c = response.headers.get("Content-Type")) !== null && _c !== void 0 ? _c : undefined,
    linkedResources: {}
  };
  const linkHeader = response.headers.get("Link");

  if (linkHeader) {
    const parsedLinks = _httpLinkHeader.default.parse(linkHeader); // Set ACL link


    const aclLinks = parsedLinks.get("rel", "acl");

    if (aclLinks.length === 1) {
      resourceInfo.aclUrl = new URL(aclLinks[0].uri, resourceInfo.sourceIri).href;
    } // Parse all link headers and expose them in a standard way
    // (this can replace the parsing of the ACL link above):


    resourceInfo.linkedResources = parsedLinks.refs.reduce((rels, ref) => {
      var _a;

      var _b;

      (_a = rels[_b = ref.rel]) !== null && _a !== void 0 ? _a : rels[_b] = [];
      rels[ref.rel].push(new URL(ref.uri, resourceInfo.sourceIri).href);
      return rels;
    }, resourceInfo.linkedResources);
  }

  const wacAllowHeader = response.headers.get("WAC-Allow");

  if (wacAllowHeader) {
    resourceInfo.permissions = parseWacAllowHeader(wacAllowHeader);
  }

  return resourceInfo;
}
/**
 * Parse a WAC-Allow header into user and public access booleans.
 *
 * @param wacAllowHeader A WAC-Allow header in the format `user="read append write control",public="read"`
 * @see https://github.com/solid/solid-spec/blob/cb1373a369398d561b909009bd0e5a8c3fec953b/api-rest.md#wac-allow-headers
 */


function parseWacAllowHeader(wacAllowHeader) {
  function parsePermissionStatement(permissionStatement) {
    const permissions = permissionStatement.split(" ");
    const writePermission = permissions.includes("write");
    return writePermission ? {
      read: permissions.includes("read"),
      append: true,
      write: true,
      control: permissions.includes("control")
    } : {
      read: permissions.includes("read"),
      append: permissions.includes("append"),
      write: false,
      control: permissions.includes("control")
    };
  }

  function getStatementFor(header, scope) {
    const relevantEntries = header.split(",").map(rawEntry => rawEntry.split("=")).filter(parts => parts.length === 2 && parts[0].trim() === scope); // There should only be one statement with the given scope:

    if (relevantEntries.length !== 1) {
      return "";
    }

    const relevantStatement = relevantEntries[0][1].trim(); // The given statement should be wrapped in double quotes to be valid:

    if (relevantStatement.charAt(0) !== '"' || relevantStatement.charAt(relevantStatement.length - 1) !== '"') {
      return "";
    } // Return the statment without the wrapping quotes, e.g.: read append write control


    return relevantStatement.substring(1, relevantStatement.length - 1);
  }

  return {
    user: parsePermissionStatement(getStatementFor(wacAllowHeader, "user")),
    public: parsePermissionStatement(getStatementFor(wacAllowHeader, "public"))
  };
}
/** @hidden Used to instantiate a separate instance from input parameters */


function internal_cloneResource(resource) {
  let clonedResource;

  if (typeof resource.slice === "function") {
    // If given Resource is a File:
    clonedResource = Object.assign(resource.slice(), Object.assign({}, resource));
  } else {
    // If it is just a plain object containing metadata:
    clonedResource = Object.assign({}, resource);
  }

  return clonedResource;
}
/** @internal */


function internal_isUnsuccessfulResponse(response) {
  return !response.ok;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
// TODO: These should be replaced by auto-generated constants,
//       if we can ensure that unused constants will be excluded from bundles.

/** @hidden */


const acl = {
  Authorization: "http://www.w3.org/ns/auth/acl#Authorization",
  AuthenticatedAgent: "http://www.w3.org/ns/auth/acl#AuthenticatedAgent",
  accessTo: "http://www.w3.org/ns/auth/acl#accessTo",
  agent: "http://www.w3.org/ns/auth/acl#agent",
  agentGroup: "http://www.w3.org/ns/auth/acl#agentGroup",
  agentClass: "http://www.w3.org/ns/auth/acl#agentClass",
  default: "http://www.w3.org/ns/auth/acl#default",
  defaultForNew: "http://www.w3.org/ns/auth/acl#defaultForNew",
  mode: "http://www.w3.org/ns/auth/acl#mode",
  origin: "http://www.w3.org/ns/auth/acl#origin"
};
/** @hidden */

const rdf = {
  type: "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
};
/** @hidden */

const ldp = {
  BasicContainer: "http://www.w3.org/ns/ldp#BasicContainer",
  Container: "http://www.w3.org/ns/ldp#Container",
  Resource: "http://www.w3.org/ns/ldp#Resource",
  contains: "http://www.w3.org/ns/ldp#contains"
};
/** @hidden */

const foaf = {
  Agent: "http://xmlns.com/foaf/0.1/Agent"
};
/** @hidden */

const acp = {
  Policy: "http://www.w3.org/ns/solid/acp#Policy",
  AccessControl: "http://www.w3.org/ns/solid/acp#AccessControl",
  Read: "http://www.w3.org/ns/solid/acp#Read",
  Append: "http://www.w3.org/ns/solid/acp#Append",
  Write: "http://www.w3.org/ns/solid/acp#Write",
  Rule: "http://www.w3.org/ns/solid/acp#Rule",
  accessControl: "http://www.w3.org/ns/solid/acp#accessControl",
  apply: "http://www.w3.org/ns/solid/acp#apply",
  applyMembers: "http://www.w3.org/ns/solid/acp#applyMembers",
  allow: "http://www.w3.org/ns/solid/acp#allow",
  deny: "http://www.w3.org/ns/solid/acp#deny",
  allOf: "http://www.w3.org/ns/solid/acp#allOf",
  anyOf: "http://www.w3.org/ns/solid/acp#anyOf",
  noneOf: "http://www.w3.org/ns/solid/acp#noneOf",
  access: "http://www.w3.org/ns/solid/acp#access",
  accessMembers: "http://www.w3.org/ns/solid/acp#accessMembers",
  agent: "http://www.w3.org/ns/solid/acp#agent",
  group: "http://www.w3.org/ns/solid/acp#group",
  client: "http://www.w3.org/ns/solid/acp#client",
  PublicAgent: "http://www.w3.org/ns/solid/acp#PublicAgent",
  AuthenticatedAgent: "http://www.w3.org/ns/solid/acp#AuthenticatedAgent",
  CreatorAgent: "http://www.w3.org/ns/solid/acp#CreatorAgent"
};
/** @hidden */

const solid = {
  PublicOidcClient: "http://www.w3.org/ns/solid/terms#PublicOidcClient"
};
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @ignore For internal use only. */

const internal_defaultFetchOptions = {
  fetch: fetch
};
/**
 * Retrieve the information about a resource (e.g. access permissions) without
 * fetching the resource itself.
 *
 * @param url URL to fetch Resource metadata from.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).
 * @returns Promise resolving to the metadata describing the given Resource, or rejecting if fetching it failed.
 * @since 0.4.0
 */

async function getResourceInfo(url, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "HEAD"
  });
  return responseToResourceInfo(response);
}
/**
 * Parse Solid metadata from a Response obtained by fetching a Resource from a Solid Pod,
 *
 * @param response A Fetch API Response. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Response MDN}.
 * @returns Resource metadata readable by functions such as [[getSourceUrl]].
 * @hidden This interface is not exposed yet until we've tried it out in practice.
 */


function responseToResourceInfo(response) {
  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the metadata of the Resource at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  return {
    internal_resourceInfo: resourceInfo
  };
}
/**
 * @param resource Resource for which to check whether it is a Container.
 * @returns Whether `resource` is a Container.
 */


function isContainer(resource) {
  const containerUrl = hasResourceInfo(resource) ? getSourceUrl(resource) : internal_toIriString(resource);
  return containerUrl.endsWith("/");
}
/**
 * This function will tell you whether a given Resource contains raw data, or a SolidDataset.
 *
 * @param resource Resource for which to check whether it contains raw data.
 * @return Whether `resource` contains raw data.
 */


function isRawData(resource) {
  return resource.internal_resourceInfo.isRawData;
}
/**
 * @param resource Resource for which to determine the Content Type.
 * @returns The Content Type, if known, or null if not known.
 */


function getContentType$1(resource) {
  var _a;

  return (_a = resource.internal_resourceInfo.contentType) !== null && _a !== void 0 ? _a : null;
}

function getSourceUrl(resource) {
  if (hasResourceInfo(resource)) {
    return resource.internal_resourceInfo.sourceIri;
  }

  return null;
}
/** @hidden Alias of getSourceUrl for those who prefer to use IRI terminology. */


const getSourceIri = getSourceUrl;
/**
 * Given a Resource that exposes information about the owner of the Pod it is in, returns the WebID of that owner.
 *
 * Data about the owner of the Pod is exposed when the following conditions hold:
 * - The Pod server supports exposing the Pod owner
 * - The current user is allowed to see who the Pod owner is.
 *
 * If one or more of those conditions are false, this function will return `null`.
 *
 * @param resource A Resource that contains information about the owner of the Pod it is in.
 * @returns The WebID of the owner of the Pod the Resource is in, if provided, or `null` if not.
 * @since 0.6.0
 */

exports.getSourceIri = getSourceIri;

function getPodOwner(resource) {
  var _a;

  if (!hasServerResourceInfo(resource)) {
    return null;
  }

  const podOwners = (_a = getLinkedResourceUrlAll(resource)["http://www.w3.org/ns/solid/terms#podOwner"]) !== null && _a !== void 0 ? _a : [];
  return podOwners.length === 1 ? podOwners[0] : null;
}
/**
 * Given a WebID and a Resource that exposes information about the owner of the Pod it is in, returns whether the given WebID is the owner of the Pod.
 *
 * Data about the owner of the Pod is exposed when the following conditions hold:
 * - The Pod server supports exposing the Pod owner
 * - The current user is allowed to see who the Pod owner is.
 *
 * If one or more of those conditions are false, this function will return `null`.
 *
 * @param webId The WebID of which to check whether it is the Pod Owner's.
 * @param resource A Resource that contains information about the owner of the Pod it is in.
 * @returns Whether the given WebID is the Pod Owner's, if the Pod Owner is exposed, or `null` if it is not exposed.
 * @since 0.6.0
 */


function isPodOwner(webId, resource) {
  const podOwner = getPodOwner(resource);

  if (typeof podOwner !== "string") {
    return null;
  }

  return podOwner === webId;
}
/**
 * Get the URLs of Resources linked to the given Resource.
 *
 * Solid servers can link Resources to each other. For example, in servers
 * implementing Web Access Control, Resources can have an Access Control List
 * Resource linked to it via the `acl` relation.
 *
 * @param resource A Resource fetched from a Solid Pod.
 * @returns The URLs of Resources linked to the given Resource, indexed by the key that links them.
 * @since 1.7.0
 */


function getLinkedResourceUrlAll(resource) {
  return resource.internal_resourceInfo.linkedResources;
}
/**
 * Get what access the current user has to the given Resource.
 *
 * This function can tell you what access the current user has for the given
 * Resource, allowing you to e.g. determine that changes to it will be rejected
 * before attempting to do so.
 * Additionally, for servers adhering to the Web Access Control specification,
 * it will tell you what access unauthenticated users have to the given Resource.
 *
 * @param resource A Resource fetched from a Solid Pod.
 * @returns What access the current user and, if supported by the server, unauthenticated users have to the given Resource.
 * @since 1.7.0
 */


function getEffectiveAccess(resource) {
  var _a, _b, _c, _d, _e, _f, _g;

  if (typeof resource.internal_resourceInfo.permissions === "object") {
    return {
      user: {
        read: resource.internal_resourceInfo.permissions.user.read,
        append: resource.internal_resourceInfo.permissions.user.append,
        write: resource.internal_resourceInfo.permissions.user.write
      },
      public: {
        read: resource.internal_resourceInfo.permissions.public.read,
        append: resource.internal_resourceInfo.permissions.public.append,
        write: resource.internal_resourceInfo.permissions.public.write
      }
    };
  }

  const linkedResourceUrls = getLinkedResourceUrlAll(resource);
  return {
    user: {
      read: (_b = (_a = linkedResourceUrls[acp.allow]) === null || _a === void 0 ? void 0 : _a.includes(acp.Read)) !== null && _b !== void 0 ? _b : false,
      append: (_e = ((_c = linkedResourceUrls[acp.allow]) === null || _c === void 0 ? void 0 : _c.includes(acp.Append)) || ((_d = linkedResourceUrls[acp.allow]) === null || _d === void 0 ? void 0 : _d.includes(acp.Write))) !== null && _e !== void 0 ? _e : false,
      write: (_g = (_f = linkedResourceUrls[acp.allow]) === null || _f === void 0 ? void 0 : _f.includes(acp.Write)) !== null && _g !== void 0 ? _g : false
    }
  };
}
/**
 * Extends the regular JavaScript error object with access to the status code and status message.
 * @since 1.2.0
 */


class FetchError extends SolidClientError {
  constructor(message, errorResponse) {
    super(message);
    this.response = errorResponse;
  }

  get statusCode() {
    return this.response.status;
  }

  get statusText() {
    return this.response.statusText;
  }

}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


exports.FetchError = FetchError;
const defaultGetFileOptions = {
  fetch: fetch
};
const RESERVED_HEADERS = ["Slug", "If-None-Match", "Content-Type"];
/**
 * Some of the headers must be set by the library, rather than directly.
 */

function containsReserved(header) {
  return RESERVED_HEADERS.some(reserved => header[reserved] !== undefined);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieves a file from a URL and returns the file as a blob.
 *
 * For example:
 *
 * ```
 * const fileBlob = await getFile("https://pod.example.com/some/file", { fetch: fetch });
 * ```
 *
 * For additional examples, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#retrieve-a-file).
 *
 * @param url The URL of the file to return
 * @param options Fetching options: a custom fetcher and/or headers.
 * @returns The file as a blob.
 */


async function getFile(input, options = defaultGetFileOptions) {
  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const url = internal_toIriString(input);
  const response = await config.fetch(url, config.init);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the File failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  const data = await response.blob();
  const fileWithResourceInfo = Object.assign(data, {
    internal_resourceInfo: resourceInfo
  });
  return fileWithResourceInfo;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Deletes a file at a given URL.
 *
 * For example:
 *
 * ```
 * await deleteFile( "https://pod.example.com/some/file", { fetch: fetch });
 * ```
 *
 * For additional examples, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#delete-a-file).
 *
 * @param file The URL of the file to delete
 */


async function deleteFile(file, options = defaultGetFileOptions) {
  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const url = hasResourceInfo(file) ? internal_toIriString(getSourceIri(file)) : internal_toIriString(file);
  const response = await config.fetch(url, Object.assign(Object.assign({}, config.init), {
    method: "DELETE"
  }));

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the file at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves a file in an existing folder/Container associated with the given URL.
 *
 * For example:
 *
 * ```
 * const savedFile = await saveFileInContainer(
 *   "https://pod.example.com/some/existing/container/",
 *   new Blob(["This is a plain piece of text"], { type: "plain/text" }),
 *   { slug: "suggestedFileName.txt", contentType: "text/plain", fetch: fetch }
 * );
 * ```
 *
 * For additional example, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#save-a-file-into-an-existing-container).
 *
 * In the `options` parameter,
 *
 * - You can suggest a file name in the `slug` field.  However, the Solid
 *   Server may or may not use the suggested `slug` as the file name.
 *
 * - *Recommended:* You can specify the [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)
 *   of the file in the `contentType`.  If unspecified, the function uses the default type of
 *   `application/octet-stream`, indicating a binary data file.
 *
 * The function saves a file into an *existing* Container. If the
 * Container does not exist, either:
 * - Create the Container first using [[createContainerAt]], and then
 *   use the function, or
 * - Use [[overwriteFile]] to save the file. [[overwriteFile]] creates
 *   the Containers in the saved file path as needed.
 *
 * Users who only have `Append` but not `Write` access to a Container
 * can use [[saveFileInContainer]] to save new files to the Container.
 * That is, [[saveFileInContainer]] is useful in situations where users
 * can add new files to a Container but not change existing files in
 * the Container, such as users given access to send notifications to
 * another's Pod but not to view or delete existing notifications in that Pod.
 *
 * Users with `Write` access to the given folder/Container may prefer to
 * use [[overwriteFile]].
 *
 * @param folderUrl The URL of an existing folder where the new file is saved.
 * @param file The file to be written.
 * @param options Additional parameters for file creation (e.g. a slug).
 * @returns A Promise that resolves to the saved file, if available, or `null` if the current user does not have Read access to the newly-saved file. It rejects if saving fails.
 */


async function saveFileInContainer(folderUrl, file, options = defaultGetFileOptions) {
  const folderUrlString = internal_toIriString(folderUrl);
  const response = await writeFile(folderUrlString, file, "POST", options);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Saving the file in [${folderUrl}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly saved file.");
  }

  const fileIri = new URL(locationHeader, new URL(folderUrlString).origin).href;
  const blobClone = internal_cloneResource(file);
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: true,
      sourceIri: fileIri,
      contentType: getContentType(file, options.contentType)
    }
  };
  return Object.assign(blobClone, resourceInfo);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves a file at a given URL. If a file already exists at the URL,
 * the function overwrites the existing file.
 *
 * For example:
 *
 * ```
 * const savedFile = await overwriteFile(
 *   "https://pod.example.com/some/container/myFile.txt",
 *   new Blob(["This is a plain piece of text"], { type: "plain/text" }),
 *   { contentType: "text/plain", fetch: fetch }
 * );
 * ```
 *
 * For additional example, see
 * [Read/Write Files](https://docs.inrupt.com/developer-tools/javascript/client-libraries/tutorial/read-write-files/#write-a-file-to-a-specific-url).
 *
 * *Recommended:* In the `options` parameter, you can specify the
 * [media type](https://developer.mozilla.org/en-US/docs/Glossary/MIME_type)
 * of the file in the `contentType`.  If unspecified, the function uses the default type of
 * `application/octet-stream`, indicating a binary data file.
 *
 * When saving a file with [[overwriteFile]], the Solid server creates any
 * intermediary Containers as needed; i.e., the Containers do not
 * need to be created in advance. For example, when saving a file to the target URL of
 * https://example.pod/container/resource, if https://example.pod/container/ does not exist,
 * the container is created as part of the save.
 *
 * @param fileUrl The URL where the file is saved.
 * @param file The file to be written.
 * @param options Additional parameters for file creation (e.g., media type).
 */


async function overwriteFile(fileUrl, file, options = defaultGetFileOptions) {
  const fileUrlString = internal_toIriString(fileUrl);
  const response = await writeFile(fileUrlString, file, "PUT", options);

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Overwriting the file at [${fileUrlString}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const blobClone = internal_cloneResource(file);
  const resourceInfo = internal_parseResourceInfo(response);
  resourceInfo.sourceIri = fileUrlString;
  resourceInfo.isRawData = true;
  return Object.assign(blobClone, {
    internal_resourceInfo: resourceInfo
  });
}

function isHeadersArray(headers) {
  return Array.isArray(headers);
}
/**
 * The return type of this function is misleading: it should ONLY be used to check
 * whether an object has a forEach method that returns <key, value> pairs.
 *
 * @param headers A headers object that might have a forEach
 */


function hasHeadersObjectForEach(headers) {
  return typeof headers.forEach === "function";
}
/**
 * @hidden
 * This function feels unnecessarily complicated, but is required in order to
 * have Headers according to type definitions in both Node and browser environments.
 * This might require a fix upstream to be cleaned up.
 *
 * @param headersToFlatten A structure containing headers potentially in several formats
 */


function flattenHeaders(headersToFlatten) {
  if (typeof headersToFlatten === "undefined") {
    return {};
  }

  let flatHeaders = {};

  if (isHeadersArray(headersToFlatten)) {
    headersToFlatten.forEach(([key, value]) => {
      flatHeaders[key] = value;
    }); // Note that the following line must be a elsif, because string[][] has a forEach,
    // but it returns string[] instead of <key, value>
  } else if (hasHeadersObjectForEach(headersToFlatten)) {
    headersToFlatten.forEach((value, key) => {
      flatHeaders[key] = value;
    });
  } else {
    // If the headers are already a Record<string, string>,
    // they can directly be returned.
    flatHeaders = headersToFlatten;
  }

  return flatHeaders;
}
/**
 * Internal function that performs the actual write HTTP query, either POST
 * or PUT depending on the use case.
 *
 * @param fileUrl The URL where the file is saved
 * @param file The file to be written
 * @param method The HTTP method
 * @param options Additional parameters for file creation (e.g. a slug, or media type)
 */


async function writeFile(targetUrl, file, method, options) {
  var _a, _b;

  const config = Object.assign(Object.assign({}, defaultGetFileOptions), options);
  const headers = flattenHeaders((_b = (_a = config.init) === null || _a === void 0 ? void 0 : _a.headers) !== null && _b !== void 0 ? _b : {});

  if (containsReserved(headers)) {
    throw new Error(`No reserved header (${RESERVED_HEADERS.join(", ")}) should be set in the optional RequestInit.`);
  } // If a slug is in the parameters, set the request headers accordingly


  if (config.slug !== undefined) {
    headers["Slug"] = config.slug;
  }

  headers["Content-Type"] = getContentType(file, options.contentType);
  const targetUrlString = internal_toIriString(targetUrl);
  return await config.fetch(targetUrlString, Object.assign(Object.assign({}, config.init), {
    headers,
    method,
    body: file
  }));
}

function getContentType(file, contentTypeOverride) {
  if (typeof contentTypeOverride === "string") {
    return contentTypeOverride;
  }

  const fileType = typeof file === "object" && file !== null && typeof file.type === "string" && file.type.length > 0 ? file.type : undefined;
  return fileType !== null && fileType !== void 0 ? fileType : "application/octet-stream";
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


_dataset.default.dataset;
const localNodeSkolemPrefix = "https://inrupt.com/.well-known/sdk-local-node/";
/**
 * Runtime freezing might be too much overhead;
 * if so, this function allows us to replace it by a function
 * that merely marks its input as Readonly<> for static analysis.
 */

const freeze = Object.freeze;

function isLocalNodeIri(iri) {
  return iri.substring(0, localNodeSkolemPrefix.length) === localNodeSkolemPrefix;
}

function getLocalNodeName(localNodeIri) {
  return localNodeIri.substring(localNodeSkolemPrefix.length);
}

function getLocalNodeIri(localNodeName) {
  return `${localNodeSkolemPrefix}${localNodeName}`;
}

function isBlankNodeId(value) {
  return typeof value === "string" && value.substring(0, 2) === "_:";
}

function getBlankNodeValue(blankNodeId) {
  return blankNodeId.substring(2);
}

function getBlankNodeId(blankNode) {
  return `_:${blankNode.value}`;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * IRIs of the XML Schema data types we support
 * @internal
 */


const xmlSchemaTypes = {
  boolean: "http://www.w3.org/2001/XMLSchema#boolean",
  dateTime: "http://www.w3.org/2001/XMLSchema#dateTime",
  date: "http://www.w3.org/2001/XMLSchema#date",
  time: "http://www.w3.org/2001/XMLSchema#time",
  decimal: "http://www.w3.org/2001/XMLSchema#decimal",
  integer: "http://www.w3.org/2001/XMLSchema#integer",
  string: "http://www.w3.org/2001/XMLSchema#string",
  langString: "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"
};
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation
 */

function serializeBoolean(value) {
  return value ? "true" : "false";
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized boolean, or null if the given value is not a valid serialised boolean.
 * @see https://www.w3.org/TR/xmlschema-2/#boolean-lexical-representation
 */


function deserializeBoolean(value) {
  if (value === "true" || value === "1") {
    return true;
  } else if (value === "false" || value === "0") {
    return false;
  } else {
    return null;
  }
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value` in UTC.
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function serializeTime(value) {
  let millisecondString;
  let timezoneString;

  if (value.millisecond) {
    if (value.millisecond < 10) {
      millisecondString = "00" + value.millisecond;
    } else if (value.millisecond < 100) {
      millisecondString = "0" + value.millisecond;
    } else {
      millisecondString = value.millisecond;
    }
  }

  if (typeof value.timezoneHourOffset === "number") {
    const timezoneFormatted = Math.abs(value.timezoneHourOffset) < 10 ? "0" + Math.abs(value.timezoneHourOffset) : Math.abs(value.timezoneHourOffset);
    timezoneString = value.timezoneHourOffset >= 0 ? "+" + timezoneFormatted : "-" + timezoneFormatted;

    if (value.timezoneMinuteOffset) {
      timezoneString = timezoneString + ":" + (value.timezoneMinuteOffset < 10 ? "0" + value.timezoneMinuteOffset : value.timezoneMinuteOffset);
    } else {
      timezoneString = timezoneString + ":00";
    }
  }

  return (value.hour < 10 ? "0" + value.hour : value.hour) + ":" + (value.minute < 10 ? "0" + value.minute : value.minute) + ":" + (value.second < 10 ? "0" + value.second : value.second) + (value.millisecond ? "." + millisecondString : "") + (timezoneString ? timezoneString : "");
}
/**
 * @internal
 * @param literalString Value to deserialise.
 * @returns Deserialized time, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function deserializeTime(literalString) {
  // Time in the format described at
  // https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
  // \d\d:\d\d:\d\d - Two digits for the hour, minute and second, respectively, separated by a `:`.
  //                  Example: "13:37:42".
  // (\.\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.
  //            Example: ".1337".
  // (Z|(\+|-)\d\d:\d\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const timeRegEx = /\d\d:\d\d:\d\d(\.\d+)?(Z|(\+|-)\d\d:\d\d)?/;

  if (!timeRegEx.test(literalString)) {
    return null;
  }

  const [timeString, timezoneString] = splitTimeFromTimezone(literalString);
  const [hourString, minuteString, timeRest] = timeString.split(":");
  let utcHours = Number.parseInt(hourString, 10);
  let utcMinutes = Number.parseInt(minuteString, 10);
  const [secondString, optionalMillisecondString] = timeRest.split(".");
  const utcSeconds = Number.parseInt(secondString, 10);
  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : undefined;

  if (utcMinutes >= 60) {
    utcHours = utcHours + 1;
    utcMinutes = utcMinutes - 60;
  }

  const deserializedTime = {
    hour: utcHours,
    minute: utcMinutes,
    second: utcSeconds
  };

  if (typeof utcMilliseconds === "number") {
    deserializedTime.millisecond = utcMilliseconds;
  }

  if (typeof timezoneString === "string") {
    const [hourOffset, minuteOffset] = getTimezoneOffsets(timezoneString);

    if (typeof hourOffset !== "number" || hourOffset > 24 || typeof minuteOffset !== "number" || minuteOffset > 59) {
      return null;
    }

    deserializedTime.timezoneHourOffset = hourOffset;
    deserializedTime.timezoneMinuteOffset = minuteOffset;
  }

  return deserializedTime;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
 */


function serializeDatetime(value) {
  // Although the XML Schema DateTime is not _exactly_ an ISO 8601 string
  // (see https://www.w3.org/TR/xmlschema-2/#deviantformats),
  // the deviations only affect the parsing, not the serialisation.
  // Therefore, we can just use .toISOString():
  return value.toISOString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
 */


function deserializeDatetime(literalString) {
  // DateTime in the format described at
  // https://www.w3.org/TR/xmlschema-2/#dateTime-lexical-representation
  // (without constraints on the value).
  // -? - An optional leading `-`.
  // \d{4,}- - Four or more digits followed by a `-` representing the year. Example: "3000-".
  // \d\d-\d\d - Two digits representing the month and two representing the day of the month,
  //             separated by a `-`. Example: "11-03".
  // T - The letter T, separating the date from the time.
  // \d\d:\d\d:\d\d - Two digits for the hour, minute and second, respectively, separated by a `:`.
  //                  Example: "13:37:42".
  // (\.\d+)? - Optionally a `.` followed by one or more digits representing milliseconds.
  //            Example: ".1337".
  // (Z|(\+|-)\d\d:\d\d) - The letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const datetimeRegEx = /-?\d{4,}-\d\d-\d\dT\d\d:\d\d:\d\d(\.\d+)?(Z|(\+|-)\d\d:\d\d)?/;

  if (!datetimeRegEx.test(literalString)) {
    return null;
  }

  const [signedDateString, rest] = literalString.split("T"); // The date string can optionally be prefixed with `-`,
  // in which case the year is negative:

  const [yearMultiplier, dateString] = signedDateString.charAt(0) === "-" ? [-1, signedDateString.substring(1)] : [1, signedDateString];
  const [yearString, monthString, dayString] = dateString.split("-");
  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;
  const utcMonth = Number.parseInt(monthString, 10) - 1;
  const utcDate = Number.parseInt(dayString, 10);
  const [timeString, timezoneString] = splitTimeFromTimezone(rest);
  const [hourOffset, minuteOffset] = typeof timezoneString === "string" ? getTimezoneOffsets(timezoneString) : [0, 0];
  const [hourString, minuteString, timeRest] = timeString.split(":");
  const utcHours = Number.parseInt(hourString, 10) + hourOffset;
  const utcMinutes = Number.parseInt(minuteString, 10) + minuteOffset;
  const [secondString, optionalMillisecondString] = timeRest.split(".");
  const utcSeconds = Number.parseInt(secondString, 10);
  const utcMilliseconds = optionalMillisecondString ? Number.parseInt(optionalMillisecondString, 10) : 0;
  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, utcHours, utcMinutes, utcSeconds, utcMilliseconds)); // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation
  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.
  // See
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values

  if (utcFullYear >= 0 && utcFullYear < 100) {
    // Note that we base it on the calculated year, rather than the year that was actually read.
    // This is because the year might actually differ from the value listed in the serialisation,
    // i.e. when moving the timezone offset to UTC pushes it into a different year:
    date.setUTCFullYear(date.getUTCFullYear() - 1900);
  }

  return date;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
 */


function serializeDate(value) {
  const year = value.getFullYear();
  const month = value.getMonth();
  const day = value.getDate();
  const [_, timezone] = splitTimeFromTimezone(value.toISOString());
  return year + "-" + (month + 1) + "-" + day + timezone;
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized datetime, or null if the given value is not a valid serialised datetime.
 * @see https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
 */


function deserializeDate(literalString) {
  // Date in the format described at
  // https://www.w3.org/TR/xmlschema-2/#date-lexical-representation
  // (without constraints on the value).
  // -? - An optional leading `-`.
  // \d{4,}- - Four or more digits followed by a `-` representing the year. Example: "3000-".
  // \d\d-\d\d - Two digits representing the month and two representing the day of the month,
  //             separated by a `-`. Example: "11-03".
  // (Z|(\+|-)\d\d:\d\d) - Optionally, the letter Z indicating UTC, or a `+` or `-` followed by two digits for
  //                       the hour offset and two for the minute offset, separated by a `:`.
  //                       Example: "+13:37".
  const dateRegEx = /-?\d{4,}-\d\d-\d\d(Z|(\+|-)\d\d:\d\d)?/;

  if (!dateRegEx.test(literalString)) {
    return null;
  }

  const signedDateString = literalString; // The date string can optionally be prefixed with `-`,
  // in which case the year is negative:

  const [yearMultiplier, dateString] = signedDateString.charAt(0) === "-" ? [-1, signedDateString.substring(1)] : [1, signedDateString];
  const [yearString, monthString, dayAndTimezoneString] = dateString.split("-");
  const dayString = dayAndTimezoneString.length > 2 ? dayAndTimezoneString.substring(0, 2) : dayAndTimezoneString;
  const utcFullYear = Number.parseInt(yearString, 10) * yearMultiplier;
  const utcMonth = Number.parseInt(monthString, 10) - 1;
  const utcDate = Number.parseInt(dayString, 10);
  const hour = 12; // setting at 12:00 avoids all timezones

  const date = new Date(Date.UTC(utcFullYear, utcMonth, utcDate, hour)); // For the year, values from 0 to 99 map to the years 1900 to 1999. Since the serialisation
  // always writes out the years fully, we should correct this to actually map to the years 0 to 99.
  // See
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#Individual_date_and_time_component_values

  if (utcFullYear >= 0 && utcFullYear < 100) {
    date.setUTCFullYear(date.getUTCFullYear() - 1900);
  }

  return date;
}
/**
 * @param timeString An XML Schema time string.
 * @returns A tuple [timeString, timezoneString].
 * @see https://www.w3.org/TR/xmlschema-2/#time-lexical-repr
 */


function splitTimeFromTimezone(timeString) {
  if (timeString.endsWith("Z")) {
    return [timeString.substring(0, timeString.length - 1), "Z"];
  }

  const splitOnPlus = timeString.split("+");
  const splitOnMinus = timeString.split("-");

  if (splitOnPlus.length === 1 && splitOnMinus.length === 1) {
    return [splitOnPlus[0], undefined];
  }

  return splitOnPlus.length > splitOnMinus.length ? [splitOnPlus[0], "+" + splitOnPlus[1]] : [splitOnMinus[0], "-" + splitOnMinus[1]];
}
/**
 * @param timezoneString Lexical representation of a time zone in XML Schema.
 * @returns A tuple of the hour and minute offset of the time zone.
 * @see https://www.w3.org/TR/xmlschema-2/#dateTime-timezones
 */


function getTimezoneOffsets(timezoneString) {
  if (timezoneString === "Z") {
    return [0, 0];
  }

  const multiplier = timezoneString.charAt(0) === "+" ? 1 : -1;
  const [hourString, minuteString] = timezoneString.substring(1).split(":");
  const hours = Number.parseInt(hourString, 10);
  const minutes = Number.parseInt(minuteString, 10);
  return [hours * multiplier, minutes * multiplier];
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation
 */


function serializeDecimal(value) {
  return value.toString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized decimal, or null if the given value is not a valid serialised decimal.
 * @see https://www.w3.org/TR/xmlschema-2/#decimal-lexical-representation
 */


function deserializeDecimal(literalString) {
  const deserialized = Number.parseFloat(literalString);

  if (Number.isNaN(deserialized)) {
    return null;
  }

  return deserialized;
}
/**
 * @internal
 * @param value Value to serialise.
 * @returns String representation of `value`.
 */


function serializeInteger(value) {
  return value.toString();
}
/**
 * @internal
 * @param value Value to deserialise.
 * @returns Deserialized integer, or null if the given value is not a valid serialised integer.
 */


function deserializeInteger(literalString) {
  const deserialized = Number.parseInt(literalString, 10);

  if (Number.isNaN(deserialized)) {
    return null;
  }

  return deserialized;
}
/**
 * @internal
 * @param locale Locale to transform into a consistent format.
 */


function normalizeLocale(locale) {
  return locale.toLowerCase();
}
/**
 * @internal Library users shouldn't need to be exposed to raw NamedNodes.
 * @param value The value that might or might not be a Named Node.
 * @returns Whether `value` is a Named Node.
 */


function isNamedNode(value) {
  return isTerm(value) && value.termType === "NamedNode";
}
/**
 * @internal Library users shouldn't need to be exposed to raw Literals.
 * @param value The value that might or might not be a Literal.
 * @returns Whether `value` is a Literal.
 */


function isLiteral(value) {
  return isTerm(value) && value.termType === "Literal";
}
/**
 * @internal Library users shouldn't need to be exposed to raw Terms.
 * @param value The value that might or might not be a Term.
 * @returns Whether `value` is a Term.
 */


function isTerm(value) {
  return value !== null && typeof value === "object" && typeof value.termType === "string" && typeof value.value === "string" && typeof value.equals === "function";
}
/**
 * @internal Library users shouldn't need to be exposed to LocalNodes.
 * @param value The value that might or might not be a Node with no known IRI yet.
 * @returns Whether `value` is a Node with no known IRI yet.
 */


function isLocalNode(value) {
  return isNamedNode(value) && isLocalNodeIri(value.value);
}
/**
 * Ensure that a given value is a valid URL.
 *
 * @internal Library users shouldn't need to be exposed to raw URLs.
 * @param iri The value of which to verify that it is a valid URL.
 */


function internal_isValidUrl(iri) {
  const iriString = internal_toIriString(iri); // If the runtime environment supports URL, instantiate one.
  // If the given IRI is not a valid URL, it will throw an error.
  // See: https://developer.mozilla.org/en-US/docs/Web/API/URL

  /* istanbul ignore if [URL is available in our testing environment, so we cannot test the alternative] */

  if (typeof URL !== "function") {
    // If we can't validate the URL, do not throw an error:
    return true;
  }

  try {
    new URL(iriString);
  } catch (_a) {
    return false;
  }

  return true;
}
/**
 * @internal Utility method; library users should not need to interact with LocalNodes directly.
 * @param localNode The LocalNode to resolve to a NamedNode.
 * @param resourceIri The Resource in which the Node will be saved.
 */


function resolveIriForLocalNode(localNode, resourceIri) {
  return DataFactory.namedNode(resolveLocalIri(getLocalNodeName(localNode.value), resourceIri));
}
/**
 * @internal API for internal use only.
 * @param name The name identifying a Thing.
 * @param resourceIri The Resource in which the Thing can be found.
 */


function resolveLocalIri(name, resourceIri) {
  /* istanbul ignore if [The URL interface is available in the testing environment, so we cannot test this] */
  if (typeof URL !== "function") {
    throw new Error("The URL interface is not available, so an IRI cannot be determined.");
  }

  const thingIri = new URL(resourceIri);
  thingIri.hash = name;
  return thingIri.href;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const DataFactory = _dataModel.default;

function addRdfJsQuadToDataset(dataset, quad, quadParseOptions = {}) {
  var _a;

  const supportedGraphTypes = ["NamedNode", "DefaultGraph"];

  if (!supportedGraphTypes.includes(quad.graph.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.graph.termType}] as their Graph node.`);
  }

  const graphId = quad.graph.termType === "DefaultGraph" ? "default" : quad.graph.value;
  const graph = (_a = dataset.graphs[graphId]) !== null && _a !== void 0 ? _a : {};
  return freeze(Object.assign(Object.assign({}, dataset), {
    graphs: freeze(Object.assign(Object.assign({}, dataset.graphs), {
      [graphId]: addRdfJsQuadToGraph(graph, quad, quadParseOptions)
    }))
  }));
}

function addRdfJsQuadToGraph(graph, quad, quadParseOptions) {
  var _a;

  const supportedSubjectTypes = ["NamedNode", "BlankNode"];

  if (!supportedSubjectTypes.includes(quad.subject.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.subject.termType}] as their Subject node.`);
  }

  const subjectIri = quad.subject.termType === "BlankNode" ? `_:${quad.subject.value}` : quad.subject.value;
  const subject = (_a = graph[subjectIri]) !== null && _a !== void 0 ? _a : {
    type: "Subject",
    url: subjectIri,
    predicates: {}
  };
  return freeze(Object.assign(Object.assign({}, graph), {
    [subjectIri]: addRdfJsQuadToSubject(subject, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToSubject(subject, quad, quadParseOptions) {
  return freeze(Object.assign(Object.assign({}, subject), {
    predicates: addRdfJsQuadToPredicates(subject.predicates, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToPredicates(predicates, quad, quadParseOptions) {
  var _a;

  const supportedPredicateTypes = ["NamedNode"];

  if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
    throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
  }

  const predicateIri = quad.predicate.value;
  const objects = (_a = predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  return freeze(Object.assign(Object.assign({}, predicates), {
    [predicateIri]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)
  }));
}

function addRdfJsQuadToObjects(objects, quad, quadParseOptions) {
  var _a, _b, _c, _d, _e, _f, _g, _h;

  if (quad.object.termType === "NamedNode") {
    const namedNodes = freeze([...((_a = objects.namedNodes) !== null && _a !== void 0 ? _a : []), quad.object.value]);
    return freeze(Object.assign(Object.assign({}, objects), {
      namedNodes: namedNodes
    }));
  }

  if (quad.object.termType === "Literal") {
    if (quad.object.datatype.value === xmlSchemaTypes.langString) {
      const locale = quad.object.language.toLowerCase();
      const thisLocaleStrings = freeze([...((_c = (_b = objects.langStrings) === null || _b === void 0 ? void 0 : _b[locale]) !== null && _c !== void 0 ? _c : []), quad.object.value]);
      const langStrings = freeze(Object.assign(Object.assign({}, (_d = objects.langStrings) !== null && _d !== void 0 ? _d : {}), {
        [locale]: thisLocaleStrings
      }));
      return freeze(Object.assign(Object.assign({}, objects), {
        langStrings: langStrings
      }));
    } // If the Object is a non-langString Literal


    const thisTypeValues = freeze([...((_f = (_e = objects.literals) === null || _e === void 0 ? void 0 : _e[quad.object.datatype.value]) !== null && _f !== void 0 ? _f : []), quad.object.value]);
    const literals = freeze(Object.assign(Object.assign({}, (_g = objects.literals) !== null && _g !== void 0 ? _g : {}), {
      [quad.object.datatype.value]: thisTypeValues
    }));
    return freeze(Object.assign(Object.assign({}, objects), {
      literals: literals
    }));
  }

  if (quad.object.termType === "BlankNode") {
    const blankNodePredicates = getPredicatesForBlankNode(quad.object, quadParseOptions);
    const blankNodes = freeze([...((_h = objects.blankNodes) !== null && _h !== void 0 ? _h : []), blankNodePredicates]);
    return freeze(Object.assign(Object.assign({}, objects), {
      blankNodes: blankNodes
    }));
  }

  throw new Error(`Objects of type [${quad.object.termType}] are not supported.`);
}

function getPredicatesForBlankNode(node, quadParseOptions) {
  var _a, _b;

  const chainBlankNodes = (_a = quadParseOptions.chainBlankNodes) !== null && _a !== void 0 ? _a : [];

  if (chainBlankNodes.find(chainBlankNode => chainBlankNode.equals(node)) === undefined) {
    // If this Blank Node is not used to provide nested values for another Subject,
    // just return its identifier.
    // That identifier will also be listed among the Subjects in the Graph.
    return getBlankNodeId(node);
  }
  /* istanbul ignore next: If there are chain nodes, there will always be other Quads, so the `?? []` can't be reached: */


  const quads = (_b = quadParseOptions.otherQuads) !== null && _b !== void 0 ? _b : [];
  const quadsWithNodeAsSubject = quads.filter(quad => quad.subject.equals(node)); // First add the Quads with regular Objects

  const predicates = quadsWithNodeAsSubject.filter(quad => !isBlankNode(quad.object)).reduce((predicatesAcc, quad) => {
    var _a;

    const supportedPredicateTypes = ["NamedNode"];

    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
    }

    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      [quad.predicate.value]: addRdfJsQuadToObjects(objects, quad, quadParseOptions)
    }));
  }, {}); // And then also add the Quads that have another Blank Node as the Object
  // in addition to the Blank Node `node` as the Subject:

  const blankNodeObjectQuads = quadsWithNodeAsSubject.filter(quad => isBlankNode(quad.object));
  return blankNodeObjectQuads.reduce((predicatesAcc, quad) => {
    var _a, _b;

    const supportedPredicateTypes = ["NamedNode"];

    if (!supportedPredicateTypes.includes(quad.predicate.termType)) {
      throw new Error(`Cannot parse Quads with nodes of type [${quad.predicate.termType}] as their Predicate node.`);
    }
    /* istanbul ignore next: The `?? {}` doesn't get hit; presumably it's initialised above. */


    const objects = (_a = predicatesAcc[quad.predicate.value]) !== null && _a !== void 0 ? _a : {};
    /* istanbul ignore next: The `?? []` doesn't get hit; presumably it's initialised above. */

    const blankNodes = (_b = objects.blankNodes) !== null && _b !== void 0 ? _b : [];
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      // The BlankNode assertions are valid because we filtered on BlankNodes above:
      [quad.predicate.value]: Object.assign(Object.assign({}, objects), {
        blankNodes: [...blankNodes, getPredicatesForBlankNode(quad.object, quadParseOptions)]
      })
    }));
  }, predicates);
}
/**
 * Given an array of Quads, returns all Blank Nodes that are used in a single chain of Nodes.
 *
 * This allows you to obtain which Blank Nodes are involved in e.g. RDF lists.
 * This is useful because those can be represented as nested data that will have
 * a deterministic structure, whereas a representation of Blank Nodes that
 * create a cycle or are re-used will need ad-hoc, non-deterministic identifiers
 * to allow for representation without inifinite nesting.
 */


function getChainBlankNodes(quads) {
  // All Blank Nodes that occur in Subject position:
  const blankNodeSubjects = quads.map(quad => quad.subject).filter(isBlankNode); // All Blank Nodes that occur in Object position:

  const blankNodeObjects = quads.map(quad => quad.object).filter(isBlankNode); // Makes sure that all given Nodes are the same,
  // which will be used to verify that a set of Quads all have the same Subject:

  function everyNodeTheSame(nodes) {
    // This could potentially be made more performant by mapping every term
    // to their value and using native JS comparisons, assuming every node is
    // either a Blank or a Named Node.
    return nodes.every(otherNode => nodes.every(anotherNode => otherNode.equals(anotherNode)));
  } // Get all Blank Nodes that are part of a cycle in the graph:


  const cycleBlankNodes = [];
  blankNodeObjects.forEach(blankNodeObject => {
    cycleBlankNodes.push(...getCycleBlankNodes(blankNodeObject, quads));
  }); // Get Blank Nodes that are used to provide nested values for a single Subject,
  // which we'll represent as nested values as well
  // (this allows us to avoid generating a non-deterministic, ad-hoc identifier
  // for those Blank Nodes).
  // We'll do this by taking all Blank Nodes in the given Quads...

  const chainBlankNodes = blankNodeSubjects.concat(blankNodeObjects).filter(blankNode => {
    // ....removing those Blank Nodes that are part of a cycle...
    if (cycleBlankNodes.some(cycleBlankNode => cycleBlankNode.equals(blankNode))) {
      return false;
    } // ...and then returning only those Blank Nodes that only occur in the
    // Object position for a single Subject, i.e. that are part of a single
    // chain:


    const subjectsWithThisNodeAsObject = quads.filter(quad => quad.object.equals(blankNode)).map(quad => quad.subject);
    return subjectsWithThisNodeAsObject.length > 0 && everyNodeTheSame(subjectsWithThisNodeAsObject);
  });
  return chainBlankNodes;
}

function toRdfJsQuads(dataset, options = {}) {
  var _a;

  const quads = [];
  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : _dataModel.default;
  Object.keys(dataset.graphs).forEach(graphIri => {
    const graph = dataset.graphs[graphIri];
    const graphNode = graphIri === "default" ? dataFactory.defaultGraph() : dataFactory.namedNode(graphIri);
    Object.keys(graph).forEach(subjectIri => {
      const predicates = graph[subjectIri].predicates;
      const subjectNode = isBlankNodeId(subjectIri) ? dataFactory.blankNode(getBlankNodeValue(subjectIri)) : dataFactory.namedNode(subjectIri);
      quads.push(...subjectToRdfJsQuads(predicates, subjectNode, graphNode, options));
    });
  });
  return quads;
}

function subjectToRdfJsQuads(predicates, subjectNode, graphNode, options = {}) {
  var _a;

  const quads = [];
  const dataFactory = (_a = options.dataFactory) !== null && _a !== void 0 ? _a : _dataModel.default;
  Object.keys(predicates).forEach(predicateIri => {
    var _a, _b, _c, _d;

    const predicateNode = dataFactory.namedNode(predicateIri);
    const langStrings = (_a = predicates[predicateIri].langStrings) !== null && _a !== void 0 ? _a : {};
    const namedNodes = (_b = predicates[predicateIri].namedNodes) !== null && _b !== void 0 ? _b : [];
    const literals = (_c = predicates[predicateIri].literals) !== null && _c !== void 0 ? _c : {};
    const blankNodes = (_d = predicates[predicateIri].blankNodes) !== null && _d !== void 0 ? _d : [];
    const literalTypes = Object.keys(literals);
    literalTypes.forEach(typeIri => {
      const typeNode = dataFactory.namedNode(typeIri);
      const literalValues = literals[typeIri];
      literalValues.forEach(value => {
        const literalNode = dataFactory.literal(value, typeNode);
        quads.push(dataFactory.quad(subjectNode, predicateNode, literalNode, graphNode));
      });
    });
    const locales = Object.keys(langStrings);
    locales.forEach(locale => {
      const localeValues = langStrings[locale];
      localeValues.forEach(value => {
        const langStringNode = dataFactory.literal(value, locale);
        quads.push(dataFactory.quad(subjectNode, predicateNode, langStringNode, graphNode));
      });
    });
    namedNodes.forEach(namedNodeIri => {
      const node = dataFactory.namedNode(namedNodeIri);
      quads.push(dataFactory.quad(subjectNode, predicateNode, node, graphNode));
    });
    blankNodes.forEach(blankNodeIdOrPredicates => {
      if (isBlankNodeId(blankNodeIdOrPredicates)) {
        const blankNode = dataFactory.blankNode(getBlankNodeValue(blankNodeIdOrPredicates));
        quads.push(dataFactory.quad(subjectNode, predicateNode, blankNode, graphNode));
      } else {
        const node = dataFactory.blankNode();
        const blankNodeObjectQuad = dataFactory.quad(subjectNode, predicateNode, node, graphNode);
        const blankNodeSubjectQuads = subjectToRdfJsQuads(blankNodeIdOrPredicates, node, graphNode);
        quads.push(blankNodeObjectQuad);
        quads.push(...blankNodeSubjectQuads);
      }
    });
  });
  return quads;
}
/**
 * A recursive function that finds all Blank Nodes in an array of Quads that create a cycle in the graph.
 *
 * This function will traverse the graph starting from `currentNode`, keeping
 * track of all the Blank Nodes it encounters twice while doing so, and
 * returning those.
 */


function getCycleBlankNodes(currentNode, quads, traversedBlankNodes = []) {
  // If we've encountered `currentNode` before, all the Blank Nodes we've
  // encountered so far are part of a cycle. Return those.
  if (traversedBlankNodes.find(traversedBlankNode => traversedBlankNode.equals(currentNode)) !== undefined) {
    return traversedBlankNodes;
  } // Find all Blank Nodes that are connected to `currentNode`:


  const blankNodeObjects = quads.filter(quad => quad.subject.equals(currentNode) && isBlankNode(quad.object)).map(quad => quad.object); // If no Blank Nodes are connected to `currentNode`, we're done:

  if (blankNodeObjects.length === 0) {
    return traversedBlankNodes;
  } // Store that we've traversed `currentNode`, then move on to all the Blank
  // Nodes connected to it, which will then take up the role of `currentNode`:


  const nextTraversedNodes = [...traversedBlankNodes, currentNode];
  const cycleBlankNodeArrays = blankNodeObjects.map(nextNode => getCycleBlankNodes(nextNode, quads, nextTraversedNodes)); // Collect all the cycle Blank Nodes found in those traverals,
  // then return them:

  const allCycleBlankNodes = [];

  for (const cycleBlankNodes of cycleBlankNodeArrays) {
    allCycleBlankNodes.push(...cycleBlankNodes);
  }

  return allCycleBlankNodes;
}

function isBlankNode(term) {
  return term.termType === "BlankNode";
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const getTurtleParser = () => {
  const onQuadCallbacks = [];
  const onCompleteCallbacks = [];
  const onErrorCallbacks = [];
  return {
    onQuad: callback => {
      onQuadCallbacks.push(callback);
    },
    onError: callback => {
      onErrorCallbacks.push(callback);
    },
    onComplete: callback => {
      onCompleteCallbacks.push(callback);
    },
    parse: async (source, resourceInfo) => {
      const parser = await getParser(getSourceUrl(resourceInfo));
      parser.parse(source, (error, quad, _prefixes) => {
        if (error) {
          onErrorCallbacks.forEach(callback => callback(error));
        } else if (quad) {
          onQuadCallbacks.every(callback => callback(quad));
        } else {
          onCompleteCallbacks.every(callback => callback());
        }
      });
    }
  };
};

async function getParser(baseIri) {
  const n3 = await loadN3();
  return new n3.Parser({
    format: "text/turtle",
    baseIRI: baseIri
  });
}
/**
 * @param quads Triples that should be serialised to Turtle
 * @internal Utility method for internal use; not part of the public API.
 */


async function triplesToTurtle(quads) {
  const n3 = await loadN3();
  const format = "text/turtle";
  const writer = new n3.Writer({
    format: format
  }); // Remove any potentially lingering references to Named Graphs in Quads;
  // they'll be determined by the URL the Turtle will be sent to:

  const triples = quads.map(quad => DataFactory.quad(quad.subject, quad.predicate, quad.object, undefined));
  writer.addQuads(triples);
  const writePromise = new Promise((resolve, reject) => {
    writer.end((error, result) => {
      /* istanbul ignore if [n3.js doesn't actually pass an error nor a result, apparently: https://github.com/rdfjs/N3.js/blob/62682e48c02d8965b4d728cb5f2cbec6b5d1b1b8/src/N3Writer.js#L290] */
      if (error) {
        return reject(error);
      }

      resolve(result);
    });
  });
  const rawTurtle = await writePromise;
  return rawTurtle;
}

async function loadN3() {
  // When loaded via Webpack or another bundler that looks at the `modules` field in package.json,
  // N3 serves up ES modules with named exports.
  // However, when it is loaded in Node, it serves up a CommonJS module, which, when imported from
  // a Node ES module, is in the shape of a default export that is an object with all the named
  // exports as its properties.
  // This means that if we were to import the default module, our code would fail in Webpack,
  // whereas if we imported the named exports, our code would fail in Node.
  // As a workaround, we use a dynamic import. This way, we can use the same syntax in every
  // environment, where the differences between the environments are in whether the returned object
  // includes a `default` property that contains all exported functions, or whether those functions
  // are available on the returned object directly. We can then respond to those different
  // situations at runtime.
  // Unfortunately, that does mean that tree shaking will not work until N3 also provides ES modules
  // for Node, or adds a default export for Webpack. See
  // https://github.com/rdfjs/N3.js/issues/196
  const n3Module = await require("_bundle_loader")(require.resolve('n3'));
  /* istanbul ignore if: the package provides named exports in the unit test environment */

  if (typeof n3Module.default !== "undefined") {
    return n3Module.default;
  }

  return n3Module;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden For internal use only. */


function internal_getReadableValue(value) {
  var _a, _b, _c, _d, _e, _f, _g, _h;

  if (isNamedNode(value)) {
    return `<${value.value}> (URL)`;
  }

  if (isLiteral(value)) {
    /* istanbul ignore if: thingAsMarkdown always instantiates a NamedNode, so we can't hit this code path in tests. */
    if (!isNamedNode(value.datatype)) {
      return `[${value.value}] (RDF/JS Literal of unknown type)`;
    }

    let val;

    switch (value.datatype.value) {
      case xmlSchemaTypes.boolean:
        val = (_b = (_a = deserializeBoolean(value.value)) === null || _a === void 0 ? void 0 : _a.valueOf()) !== null && _b !== void 0 ? _b : `Invalid data: \`${value.value}\``;
        return val + " (boolean)";

      case xmlSchemaTypes.dateTime:
        val = (_d = (_c = deserializeDatetime(value.value)) === null || _c === void 0 ? void 0 : _c.toUTCString()) !== null && _d !== void 0 ? _d : `Invalid data: \`${value.value}\``;
        return val + " (datetime)";

      case xmlSchemaTypes.decimal:
        val = (_f = (_e = deserializeDecimal(value.value)) === null || _e === void 0 ? void 0 : _e.toString()) !== null && _f !== void 0 ? _f : `Invalid data: \`${value.value}\``;
        return val + " (decimal)";

      case xmlSchemaTypes.integer:
        val = (_h = (_g = deserializeInteger(value.value)) === null || _g === void 0 ? void 0 : _g.toString()) !== null && _h !== void 0 ? _h : `Invalid data: \`${value.value}\``;
        return val + " (integer)";

      case xmlSchemaTypes.langString:
        return `"${value.value}" (${value.language} string)`;

      case xmlSchemaTypes.string:
        return `"${value.value}" (string)`;

      default:
        return `[${value.value}] (RDF/JS Literal of type: \`${value.datatype.value}\`)`;
    }
  }
  /* istanbul ignore else: thingAsMarkdown doesn't generate other Nodes, so we can't hit this path in tests. */


  if (value.termType === "BlankNode") {
    return `[${value.value}] (RDF/JS BlankNode)`;
  }
  /* istanbul ignore next: thingAsMarkdown doesn't generate Quad Nodes, so we can't hit this path in tests. */


  if (value.termType === "Quad") {
    return `??? (nested RDF* Quad)`;
  }
  /* istanbul ignore else: The if statements are exhaustive; if not, TypeScript will complain. */

  /* istanbul ignore next: thingAsMarkdown doesn't generate Variable Nodes, so we can't hit this path in tests. */


  if (value.termType === "Variable") {
    return `?${value.value} (RDF/JS Variable)`;
  }
  /* istanbul ignore next: The if statements are exhaustive; if not, TypeScript will complain. */


  return value;
}
/**
 * @hidden
 */


function internal_throwIfNotThing(thing) {
  if (!isThing(thing)) {
    throw new ThingExpectedError(thing);
  }
}
/**
 * @hidden
 * @param solidDataset
 */


function internal_addAdditionsToChangeLog(solidDataset, additions) {
  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog :
  /* istanbul ignore next: This function always gets called after addDeletionsToChangeLog, so the ChangeLog always already exists in tests: */
  {
    additions: [],
    deletions: []
  };
  const [newAdditions, newDeletions] = additions.filter(addition => !containsBlankNode(addition)).reduce(([additionsAcc, deletionsAcc], addition) => {
    const existingDeletion = deletionsAcc.find(deletion => deletion.equals(addition));

    if (typeof existingDeletion !== "undefined") {
      return [additionsAcc, deletionsAcc.filter(deletion => !deletion.equals(addition))];
    }

    return [additionsAcc.concat(addition), deletionsAcc];
  }, [changeLog.additions, changeLog.deletions]);
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: newAdditions,
      deletions: newDeletions
    }
  }));
}
/**
 * @hidden
 * @param solidDataset
 */


function internal_addDeletionsToChangeLog(solidDataset, deletions) {
  const changeLog = hasChangelog(solidDataset) ? solidDataset.internal_changeLog : {
    additions: [],
    deletions: []
  };
  const [newAdditions, newDeletions] = deletions.filter(deletion => !containsBlankNode(deletion)).reduce(([additionsAcc, deletionsAcc], deletion) => {
    const existingAddition = additionsAcc.find(addition => addition.equals(deletion));

    if (typeof existingAddition !== "undefined") {
      return [additionsAcc.filter(addition => !addition.equals(deletion)), deletionsAcc];
    }

    return [additionsAcc, deletionsAcc.concat(deletion)];
  }, [changeLog.additions, changeLog.deletions]);
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: newAdditions,
      deletions: newDeletions
    }
  }));
}
/**
 * Enforces the presence of a Changelog for a given dataset. If a changelog is
 * already present, it is unchanged. Otherwise, an empty changelog is created.
 * @hidden
 * @param solidDataset
 */


function internal_withChangeLog(solidDataset) {
  const newSolidDataset = hasChangelog(solidDataset) ? solidDataset : freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: [],
      deletions: []
    }
  }));
  return newSolidDataset;
}
/**
 * We don't currently support reading and writing Blank Nodes, so this function can be used to skip those Quads.
 *
 * This is needed because we cannot reconcile Blank Nodes in additions and
 * deletions. Down the road, we should do a diff before saving a SolidDataset
 * against a saved copy of the originally-fetched one, based on our own data
 * structures, which should make it easier to reconcile.
 */


function containsBlankNode(quad) {
  return quad.subject.termType === "BlankNode" || quad.object.termType === "BlankNode";
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Returns the URLs of all Properties that the given [[Thing ]]has values for.b
 *
 * @param thing The [[Thing]] of which to get that Property URLs that have a value.
 * @returns The URLs of the Properties for which values are defined for the given Thing.
 * @hidden This is an advanced API that should not be needed for most Solid use cases. If you do find yourself needing this, please file a feature request sharing your use case.
 */


function getPropertyAll(thing) {
  return Object.keys(thing.predicates).filter(predicate => getTerm(thing, predicate) !== null);
}
/**
 * Returns the URL value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type URL, returns null.
 * If the Property has multiple URL values, returns one of its URL values.
 *
 * @param thing The [[Thing]] to read a URL value from.
 * @param property The Property whose URL value to return.
 * @returns A URL value for the given Property if present, or null if the Property is not present or the value is not of type URL.
 */


function getUrl(thing, property) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateUrl = internal_toIriString(property);
  const firstUrl = (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b[0]) !== null && _c !== void 0 ? _c : null;

  if (firstUrl === null) {
    return null;
  }

  return isLocalNodeIri(firstUrl) ? `#${getLocalNodeName(firstUrl)}` : firstUrl;
}
/** @hidden Alias of [[getUrl]] for those who prefer IRI terminology. */


const getIri = getUrl;
/**
 * Returns the URL values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type URL, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the URL values from.
 * @param property The Property whose URL values to return.
 * @returns An array of URL values for the given Property.
 */

exports.getIri = getIri;

function getUrlAll(thing, property) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateUrl = internal_toIriString(property);
  return (_c = (_b = (_a = thing.predicates[predicateUrl]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.map(iri => isLocalNodeIri(iri) ? `#${getLocalNodeName(iri)}` : iri)) !== null && _c !== void 0 ? _c : [];
}
/** @hidden Alias of [[getUrlAll]] for those who prefer IRI terminology. */


const getIriAll = getUrlAll;
/**
 * Returns the boolean value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type boolean, returns null.
 * If the Property has multiple boolean values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a boolean value from.
 * @param property The Property whose boolean value to return.
 * @returns A boolean value for the given Property if present, or null if the Property is not present or the value is not of type boolean.
 */

exports.getIriAll = getIriAll;

function getBoolean(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.boolean);

  if (literalString === null) {
    return null;
  }

  return deserializeBoolean(literalString);
}
/**
 * Returns the boolean values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type boolean, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the boolean values from.
 * @param property The Property whose boolean values to return.
 * @returns An array of boolean values for the given Property.
 */


function getBooleanAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.boolean);
  return literalStrings.map(deserializeBoolean).filter(possibleBoolean => possibleBoolean !== null);
}
/**
 * Returns the datetime value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type datetime, returns null.
 * If the Property has multiple datetime values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a datetime value from.
 * @param property The Property whose datetime value to return.
 * @returns A datetime value for the given Property if present, or null if the Property is not present or the value is not of type datetime.
 */


function getDatetime(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.dateTime);

  if (literalString === null) {
    return null;
  }

  return deserializeDatetime(literalString);
}
/**
 * Returns the datetime values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type datetime, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the datetime values from.
 * @param property The Property whose datetime values to return.
 * @returns An array of datetime values for the given Property.
 */


function getDatetimeAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.dateTime);
  return literalStrings.map(deserializeDatetime).filter(potentialDatetime => potentialDatetime !== null);
}
/**
 * Returns the date value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type date, returns null.
 * If the Property has multiple date values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a date value from.
 * @param property The Property whose date value to return.
 * @returns A date value for the given Property if present, or null if the Property is not present or the value is not of type date.
 * @since 1.10.0
 */


function getDate(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.date);

  if (literalString === null) {
    return null;
  }

  return deserializeDate(literalString);
}
/**
 * Returns the date values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type date, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the date values from.
 * @param property The Property whose date values to return.
 * @returns An array of date values for the given Property.
 * @since 1.10.0
 */


function getDateAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.date);
  return literalStrings.map(deserializeDate).filter(potentialDate => potentialDate !== null);
}
/**
 * Returns the time value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type time, returns null.
 * If the Property has multiple time values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a time value from.
 * @param property The Property whose time value to return.
 * @returns A time value for the given Property if present, or null if the Property is not present or the value is not of type time.
 * @since 1.10.0
 */


function getTime(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.time);

  if (literalString === null) {
    return null;
  }

  return deserializeTime(literalString);
}
/**
 * Returns the time values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type time, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the time values from.
 * @param property The Property whose time values to return.
 * @returns An array of time values for the given Property.
 * @since 1.10.0
 */


function getTimeAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.time);
  return literalStrings.map(deserializeTime).filter(potentialTime => potentialTime !== null);
}
/**
 * Returns the decimal value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type decimal, returns null.
 * If the Property has multiple decimal values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a decimal value from.
 * @param property The Property whose decimal value to return.
 * @returns A decimal value for the given Property if present, or null if the Property is not present or the value is not of type decimal.
 */


function getDecimal(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.decimal);

  if (literalString === null) {
    return null;
  }

  return deserializeDecimal(literalString);
}
/**
 * Returns the decimal values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type decimal, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the decimal values from.
 * @param property The Property whose decimal values to return.
 * @returns An array of decimal values for the given Property.
 */


function getDecimalAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.decimal);
  return literalStrings.map(literalString => deserializeDecimal(literalString)).filter(potentialDecimal => potentialDecimal !== null);
}
/**
 * Returns the integer value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type integer, returns null.
 * If the Property has multiple integer values, returns one of its values.
 *
 * @param thing The [[Thing]] to read an integer value from.
 * @param property The Property whose integer value to return.
 * @returns A integer value for the given Property if present, or null if the Property is not present or the value is not of type datetime.
 */


function getInteger(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.integer);

  if (literalString === null) {
    return null;
  }

  return deserializeInteger(literalString);
}
/**
 * Returns the integer values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type integer, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the integer values from.
 * @param property The Property whose integer values to return.
 * @returns An array of integer values for the given Property.
 */


function getIntegerAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.integer);
  return literalStrings.map(literalString => deserializeInteger(literalString)).filter(potentialInteger => potentialInteger !== null);
}
/**
 * Returns the localized string value of the specified Property from a [[Thing]].
 * If the Property is not present as a string in the specified locale, returns null.
 * If the Property has multiple string values for the specified locale, returns one of its values.
 *
 * @param thing The [[Thing]] to read a localised string value from.
 * @param property The Property whose localised string value to return.
 * @param locale The desired locale for the string value.
 * @returns A localised string value for the given Property if present in the specified `locale`, or null otherwise.
 */


function getStringWithLocale(thing, property, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingLocales = Object.keys(langStrings);
  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);
  return typeof matchingLocale === "string" ? langStrings[matchingLocale][0] : null;
}
/**
 * Returns the localized string values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not a string of the specified locale, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the localised string values from.
 * @param property The Property whose localised string values to return.
 * @param locale The desired locale for the string values.
 * @returns An array of localised string values for the given Property.
 */


function getStringWithLocaleAll(thing, property, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingLocales = Object.keys(langStrings);
  const matchingLocale = existingLocales.find(existingLocale => existingLocale.toLowerCase() === locale.toLowerCase() && Array.isArray(langStrings[existingLocale]) && langStrings[existingLocale].length > 0);
  return typeof matchingLocale === "string" ? [...langStrings[matchingLocale]] : [];
}
/**
 * Returns all localized string values mapped by the locales for the specified property from the
 * specified [[Thing]] (explicitly filters out non-language string literals).
 *
 * @param thing The [[Thing]] to read the localised string values from.
 * @param property The Property whose localised string values to return.
 * @returns A Map of objects, keyed on locale with the value an array of string values (for that locale).
 */


function getStringByLocaleAll(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const stringsByLocale = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  return new Map(Object.entries(stringsByLocale).map(([locale, values]) => [locale, [...values]]));
}
/**
 * Returns the string value of the specified Property from a [[Thing]].
 * If the Property is not present or its value is not of type string, returns null.
 * If the Property has multiple string values, returns one of its values.
 *
 * @param thing The [[Thing]] to read a string value from.
 * @param property The Property whose string value to return.
 * @returns A string value for the given Property if present, or null if the Property is not present or the value is not of type string.
 */


function getStringNoLocale(thing, property) {
  internal_throwIfNotThing(thing);
  const literalString = getLiteralOfType(thing, property, xmlSchemaTypes.string);
  return literalString;
}
/**
 * Returns the string values of the specified Property from a [[Thing]].
 * If the Property is not present, returns an empty array.
 * If the Property's value is not of type string, omits that value in the array.
 *
 * @param thing The [[Thing]] to read the string values from.
 * @param property The Property whose string values to return.
 * @returns An array of string values for the given Property.
 */


function getStringNoLocaleAll(thing, property) {
  internal_throwIfNotThing(thing);
  const literalStrings = getLiteralAllOfType(thing, property, xmlSchemaTypes.string);
  return literalStrings;
}
/**
 * @param thing The [[Thing]] to read a NamedNode value from.
 * @param property The given Property for which you want the NamedNode value.
 * @returns A NamedNode value for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#namednode-interface
 */


function getNamedNode(thing, property) {
  const iriString = getIri(thing, property);

  if (iriString === null) {
    return null;
  }

  return DataFactory.namedNode(iriString);
}
/**
 * @param thing The [[Thing]] to read the NamedNode values from.
 * @param property The given Property for which you want the NamedNode values.
 * @returns The NamedNode values for the given Property.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#namednode-interface
 */


function getNamedNodeAll(thing, property) {
  const iriStrings = getIriAll(thing, property);
  return iriStrings.map(iriString => DataFactory.namedNode(iriString));
}
/**
 * @param thing The [[Thing]] to read a Literal value from.
 * @param property The given Property for which you want the Literal value.
 * @returns A Literal value for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#literal-interface
 */


function getLiteral(thing, property) {
  var _a, _b, _c, _d;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const locales = Object.keys(langStrings);

  if (locales.length > 0) {
    const nonEmptyLocale = locales.find(locale => Array.isArray(langStrings[locale]) && langStrings[locale].length > 0);

    if (typeof nonEmptyLocale === "string") {
      return DataFactory.literal(langStrings[nonEmptyLocale][0], nonEmptyLocale);
    }
  }

  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};
  const dataTypes = Object.keys(otherLiterals);

  if (dataTypes.length > 0) {
    const nonEmptyDataType = dataTypes.find(dataType => Array.isArray(otherLiterals[dataType]) && otherLiterals[dataType].length > 0);

    if (typeof nonEmptyDataType === "string") {
      return DataFactory.literal(otherLiterals[nonEmptyDataType][0], DataFactory.namedNode(nonEmptyDataType));
    }
  }

  return null;
}
/**
 * @param thing The [[Thing]] to read the Literal values from.
 * @param property The given Property for which you want the Literal values.
 * @returns The Literal values for the given Property.
 * @ignore This should not be needed due to the other get*All() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/#literal-interface
 */


function getLiteralAll(thing, property) {
  var _a, _b, _c, _d;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  let literals = [];
  const langStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const locales = Object.keys(langStrings);

  for (const locale of locales) {
    const stringsInLocale = langStrings[locale];
    const localeLiterals = stringsInLocale.map(langString => DataFactory.literal(langString, locale));
    literals = literals.concat(localeLiterals);
  }

  const otherLiterals = (_d = (_c = thing.predicates[predicateIri]) === null || _c === void 0 ? void 0 : _c.literals) !== null && _d !== void 0 ? _d : {};
  const dataTypes = Object.keys(otherLiterals);

  for (const dataType of dataTypes) {
    const values = otherLiterals[dataType];
    const typeNode = DataFactory.namedNode(dataType);
    const dataTypeLiterals = values.map(value => DataFactory.literal(value, typeNode));
    literals = literals.concat(dataTypeLiterals);
  }

  return literals;
}
/**
 * @param thing The [[Thing]] to read a raw RDF/JS value from.
 * @param property The given Property for which you want the raw value.
 * @returns A Term for the given Property, if present, or null otherwise.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/
 * @since 0.3.0
 */


function getTerm(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);
  const namedNode = getNamedNode(thing, property);

  if (namedNode !== null) {
    return namedNode;
  }

  const literal = getLiteral(thing, property);

  if (literal !== null) {
    return literal;
  }

  const predicateIri = internal_toIriString(property);
  const blankNodes = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];

  if (blankNodes.length > 0) {
    const blankNodeValue = isBlankNodeId(blankNodes[0]) ? getBlankNodeValue(blankNodes[0]) : undefined;
    return DataFactory.blankNode(blankNodeValue);
  }

  return null;
}
/**
 * @param thing The [[Thing]] to read the raw RDF/JS values from.
 * @param property The given Property for which you want the raw values.
 * @returns The Terms for the given Property.
 * @ignore This should not be needed due to the other get*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @see https://rdf.js.org/data-model-spec/
 * @since 0.3.0
 */


function getTermAll(thing, property) {
  var _a, _b;

  internal_throwIfNotThing(thing);
  const namedNodes = getNamedNodeAll(thing, property);
  const literals = getLiteralAll(thing, property);
  const predicateIri = internal_toIriString(property);
  const blankNodeValues = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.blankNodes) !== null && _b !== void 0 ? _b : [];
  const blankNodes = blankNodeValues.map(rawBlankNode => {
    const blankNodeName = isBlankNodeId(rawBlankNode) ? getBlankNodeValue(rawBlankNode) : undefined;
    return DataFactory.blankNode(blankNodeName);
  });
  const terms = namedNodes.concat(literals).concat(blankNodes);
  return terms;
}
/**
 * @param thing The [Thing]] to read a Literal of the given type from.
 * @param property The given Property for which you want the Literal value.
 * @param literalType Set type of the Literal data.
 * @returns The stringified value for the given Property and type, if present, or null otherwise.
 */


function getLiteralOfType(thing, property, literalType) {
  var _a, _b, _c, _d;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  return (_d = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : null;
}
/**
 * @param thing The [Thing]] to read the Literals of the given type from.
 * @param property The given Property for which you want the Literal values.
 * @param literalType Set type of the Literal data.
 * @returns The stringified values for the given Property and type.
 */


function getLiteralAllOfType(thing, property, literalType) {
  var _a, _b, _c;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const literalsOfType = (_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.literals) === null || _b === void 0 ? void 0 : _b[literalType]) !== null && _c !== void 0 ? _c : [];
  return [...literalsOfType];
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Extract Quads with a given Subject from a [[SolidDataset]] into a [[Thing]].
 *
 * @param solidDataset The [[SolidDataset]] to extract the [[Thing]] from.
 * @param thingUrl The URL of the desired [[Thing]].
 * @param options Not yet implemented.
 */


function getThing(solidDataset, thingUrl, options = {}) {
  var _a;

  if (!internal_isValidUrl(thingUrl)) {
    throw new ValidThingUrlExpectedError(thingUrl);
  }

  const graph = typeof options.scope !== "undefined" ? internal_toIriString(options.scope) : "default";
  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};
  const thingIri = internal_toIriString(thingUrl);
  const resolvedThingIri = isLocalNodeIri(thingIri) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thingIri), getSourceUrl(solidDataset)) : thingIri;
  const thing = thingsByIri[resolvedThingIri];

  if (typeof thing === "undefined") {
    return null;
  }

  return thing;
}
/**
 * Get all [[Thing]]s about which a [[SolidDataset]] contains Quads.
 *
 * @param solidDataset The [[SolidDataset]] to extract the [[Thing]]s from.
 * @param options Not yet implemented.
 */


function getThingAll(solidDataset, options = {}) {
  var _a;

  const graph = typeof options.scope !== "undefined" ? internal_toIriString(options.scope) : "default";
  const thingsByIri = (_a = solidDataset.graphs[graph]) !== null && _a !== void 0 ? _a : {};
  return Object.values(thingsByIri);
}
/**
 * Insert a [[Thing]] into a [[SolidDataset]], replacing previous instances of that Thing.
 *
 * @param solidDataset The SolidDataset to insert a Thing into.
 * @param thing The Thing to insert into the given SolidDataset.
 * @returns A new SolidDataset equal to the given SolidDataset, but with the given Thing.
 */


function setThing(solidDataset, thing) {
  var _a;

  const thingIri = isThingLocal(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing.url), getSourceUrl(solidDataset)) : thing.url;
  const defaultGraph = solidDataset.graphs.default;
  const updatedDefaultGraph = freeze(Object.assign(Object.assign({}, defaultGraph), {
    [thingIri]: freeze(Object.assign(Object.assign({}, thing), {
      url: thingIri
    }))
  }));
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: updatedDefaultGraph
  }));
  const subjectNode = DataFactory.namedNode(thingIri);
  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;
  const deletions = typeof deletedThingPredicates !== "undefined" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];
  const additions = subjectToRdfJsQuads(thing.predicates, subjectNode, DataFactory.defaultGraph());
  return internal_addAdditionsToChangeLog(internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  })), deletions), additions);
}
/**
 * Remove a Thing from a SolidDataset.
 *
 * @param solidDataset The SolidDataset to remove a Thing from.
 * @param thing The Thing to remove from `solidDataset`.
 * @returns A new [[SolidDataset]] equal to the input SolidDataset, excluding the given Thing.
 */


function removeThing(solidDataset, thing) {
  var _a;

  let thingIri;

  if (isNamedNode(thing)) {
    thingIri = thing.value;
  } else if (typeof thing === "string") {
    thingIri = isLocalNodeIri(thing) && hasServerResourceInfo(solidDataset) ? resolveLocalIri(getLocalNodeName(thing), getSourceUrl(solidDataset)) : thing;
  } else if (isThingLocal(thing)) {
    thingIri = thing.url;
  } else {
    thingIri = asIri(thing);
  }

  const defaultGraph = solidDataset.graphs.default;
  const updatedDefaultGraph = Object.assign({}, defaultGraph);
  delete updatedDefaultGraph[thingIri];
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: freeze(updatedDefaultGraph)
  }));
  const subjectNode = DataFactory.namedNode(thingIri);
  const deletedThingPredicates = (_a = solidDataset.graphs.default[thingIri]) === null || _a === void 0 ? void 0 : _a.predicates;
  const deletions = typeof deletedThingPredicates !== "undefined" ? subjectToRdfJsQuads(deletedThingPredicates, subjectNode, DataFactory.defaultGraph()) : [];
  return internal_addDeletionsToChangeLog(freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  })), deletions);
}

function createThing(options = {}) {
  var _a;

  if (typeof options.url !== "undefined") {
    const url = options.url;

    if (!internal_isValidUrl(url)) {
      throw new ValidThingUrlExpectedError(url);
    }

    const thing = freeze({
      type: "Subject",
      predicates: freeze({}),
      url: url
    });
    return thing;
  }

  const name = (_a = options.name) !== null && _a !== void 0 ? _a : generateName();
  const localNodeIri = getLocalNodeIri(name);
  const thing = freeze({
    type: "Subject",
    predicates: freeze({}),
    url: localNodeIri
  });
  return thing;
}
/**
 * @param input An value that might be a [[Thing]].
 * @returns Whether `input` is a Thing.
 * @since 0.2.0
 */


function isThing(input) {
  return typeof input === "object" && input !== null && typeof input.type === "string" && input.type === "Subject";
}

function asUrl(thing, baseUrl) {
  if (isThingLocal(thing)) {
    if (typeof baseUrl === "undefined") {
      throw new Error("The URL of a Thing that has not been persisted cannot be determined without a base URL.");
    }

    return resolveLocalIri(getLocalNodeName(thing.url), baseUrl);
  }

  return thing.url;
}
/** @hidden Alias of [[asUrl]] for those who prefer IRI terminology. */


const asIri = asUrl;
/**
 * Gets a human-readable representation of the given Thing to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param thing The Thing to get a human-readable representation of.
 * @since 0.3.0
 */

exports.asIri = asIri;

function thingAsMarkdown(thing) {
  let thingAsMarkdown = "";

  if (isThingLocal(thing)) {
    thingAsMarkdown += `## Thing (no URL yet — identifier: \`#${getLocalNodeName(thing.url)}\`)\n`;
  } else {
    thingAsMarkdown += `## Thing: ${thing.url}\n`;
  }

  const predicateIris = Object.keys(thing.predicates);

  if (predicateIris.length === 0) {
    thingAsMarkdown += "\n<empty>\n";
  } else {
    for (const predicate of predicateIris) {
      thingAsMarkdown += `\nProperty: ${predicate}\n`;
      const values = getTermAll(thing, predicate);
      values.forEach(value => {
        thingAsMarkdown += `- ${internal_getReadableValue(value)}\n`;
      });
    }
  }

  return thingAsMarkdown;
}
/**
 * @param thing The [[Thing]] of which a URL might or might not be known.
 * @return `true` if `thing` has no known URL yet.
 * @since 1.7.0
 */


function isThingLocal(thing) {
  return isLocalNodeIri(thing.url);
}
/**
 * This error is thrown when a function expected to receive a [[Thing]] but received something else.
 * @since 1.2.0
 */


class ThingExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const message = `Expected a Thing, but received: [${receivedValue}].`;
    super(message);
    this.receivedValue = receivedValue;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL to identify a property but received something else.
 */


exports.ThingExpectedError = ThingExpectedError;

class ValidPropertyUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL to identify a property, but received: [${value}].`;
    super(message);
    this.receivedProperty = value;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL value but received something else.
 */


class ValidValueUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL value, but received: [${value}].`;
    super(message);
    this.receivedValue = value;
  }

}
/**
 * This error is thrown when a function expected to receive a valid URL to identify a [[Thing]] but received something else.
 */


class ValidThingUrlExpectedError extends SolidClientError {
  constructor(receivedValue) {
    const value = isNamedNode(receivedValue) ? receivedValue.value : receivedValue;
    const message = `Expected a valid URL to identify a Thing, but received: [${value}].`;
    super(message);
    this.receivedValue = value;
  }

}
/**
 * Generate a string that can be used as the unique identifier for a Thing
 *
 * This function works by starting with a date string (so that Things can be
 * sorted chronologically), followed by a random number generated by taking a
 * random number between 0 and 1, and cutting off the `0.`.
 *
 * @internal
 * @returns An string that's likely to be unique
 */


const generateName = () => {
  return Date.now().toString() + Math.random().toString().substring("0.".length);
};
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * This function normalizes IRIs as managed by the server to ease accurate comparison.
 * @param iri
 * @hidden
 */


function normalizeServerSideIri(iri) {
  const iriObj = new URL(iri);
  iriObj.hash = "";
  return iriObj.href;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Initialise a new [[SolidDataset]] in memory.
 *
 * @returns An empty [[SolidDataset]].
 */


function createSolidDataset() {
  return freeze({
    type: "Dataset",
    graphs: {
      default: {}
    }
  });
}
/**
 * @hidden This interface is not exposed yet until we've tried it out in practice.
 */


async function responseToSolidDataset(response, parseOptions = {}) {
  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the SolidDataset at [${response.url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = responseToResourceInfo(response);
  const parsers = Object.assign({
    "text/turtle": getTurtleParser()
  }, parseOptions.parsers);
  const contentType = getContentType$1(resourceInfo);

  if (contentType === null) {
    throw new Error(`Could not determine the content type of the Resource at [${getSourceUrl(resourceInfo)}].`);
  }

  const mimeType = contentType.split(";")[0];
  const parser = parsers[mimeType];

  if (typeof parser === "undefined") {
    throw new Error(`The Resource at [${getSourceUrl(resourceInfo)}] has a MIME type of [${mimeType}], but the only parsers available are for the following MIME types: [${Object.keys(parsers).join(", ")}].`);
  }

  const data = await response.text();
  const parsingPromise = new Promise((resolve, reject) => {
    let solidDataset = freeze({
      graphs: freeze({
        default: freeze({})
      }),
      type: "Dataset"
    }); // While Quads without Blank Nodes can be added to the SolidDataset as we
    // encounter them, to parse Quads with Blank Nodes, we'll have to wait until
    // we've seen all the Quads, so that we can reconcile equal Blank Nodes.

    const quadsWithBlankNodes = [];
    const allQuads = [];
    parser.onError(error => {
      reject(new Error(`Encountered an error parsing the Resource at [${getSourceUrl(resourceInfo)}] with content type [${contentType}]: ${error}`));
    });
    parser.onQuad(quad => {
      allQuads.push(quad);

      if (quad.subject.termType === "BlankNode" || quad.object.termType === "BlankNode") {
        // Quads with Blank Nodes will be parsed when all Quads are known,
        // so that equal Blank Nodes can be reconciled:
        quadsWithBlankNodes.push(quad);
      } else {
        solidDataset = addRdfJsQuadToDataset(solidDataset, quad);
      }
    });
    parser.onComplete(() => {
      // Some Blank Nodes only serve to use a set of Quads as the Object for a
      // single Subject. Those Quads will be added to the SolidDataset when
      // their Subject's Blank Node is encountered in the Object position.
      const chainBlankNodes = getChainBlankNodes(quadsWithBlankNodes);
      const quadsWithoutChainBlankNodeSubjects = quadsWithBlankNodes.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));
      solidDataset = quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {
        otherQuads: allQuads,
        chainBlankNodes: chainBlankNodes
      }), solidDataset);
      const solidDatasetWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));
      resolve(solidDatasetWithResourceInfo);
    });
    parser.parse(data, resourceInfo);
  });
  return await parsingPromise;
}
/**
 * Fetch a SolidDataset from the given URL. Currently requires the SolidDataset to be available as [Turtle](https://www.w3.org/TR/turtle/).
 *
 * @param url URL to fetch a [[SolidDataset]] from.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Promise resolving to a [[SolidDataset]] containing the data at the given Resource, or rejecting if fetching it failed.
 */


async function getSolidDataset(url, options = internal_defaultFetchOptions) {
  var _a;

  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const parserContentTypes = Object.keys((_a = options.parsers) !== null && _a !== void 0 ? _a : {});
  const acceptedContentTypes = parserContentTypes.length > 0 ? parserContentTypes.join(", ") : "text/turtle";
  const response = await config.fetch(url, {
    headers: {
      Accept: acceptedContentTypes
    }
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Fetching the Resource at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const solidDataset = await responseToSolidDataset(response, options);
  return solidDataset;
}
/**
 * Create a SPARQL UPDATE Patch request from a [[SolidDataset]] with a changelog.
 * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.
 * @returns an HTTP PATCH request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a SPARQL UPDATE.
 * @hidden
 */


async function prepareSolidDatasetUpdate(solidDataset) {
  const deleteStatement = solidDataset.internal_changeLog.deletions.length > 0 ? `DELETE DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.deletions.map(getNamedNodesForLocalNodes))).trim()}};` : "";
  const insertStatement = solidDataset.internal_changeLog.additions.length > 0 ? `INSERT DATA {${(await triplesToTurtle(solidDataset.internal_changeLog.additions.map(getNamedNodesForLocalNodes))).trim()}};` : "";
  return {
    method: "PATCH",
    body: `${deleteStatement} ${insertStatement}`,
    headers: {
      "Content-Type": "application/sparql-update"
    }
  };
}
/**
 * Create a Put request to write a locally created [[SolidDataset]] to a Pod.
 * @param solidDataset the [[SolidDataset]] that has been locally updated, and that should be persisted.
 * @returns an HTTP PUT request configuration object, aligned with the [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters), containing a serialization of the [[SolidDataset]].
 * @hidden
 */


async function prepareSolidDatasetCreation(solidDataset) {
  return {
    method: "PUT",
    body: await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes)),
    headers: {
      "Content-Type": "text/turtle",
      "If-None-Match": "*",
      Link: `<${ldp.Resource}>; rel="type"`
    }
  };
}
/**
 * Given a SolidDataset, store it in a Solid Pod (overwriting the existing data at the given URL).
 *
 * A SolidDataset keeps track of the data changes compared to the data in the Pod; i.e.,
 * the changelog tracks both the old value and new values of the property being modified. This
 * function applies the changes to the current SolidDataset. If the old value specified in the
 * changelog does not correspond to the value currently in the Pod, this function will throw an
 * error.
 * The SolidDataset returned by this function will contain the data sent to the Pod, and a ChangeLog
 * up-to-date with the saved data. Note that if the data on the server was modified in between the
 * first fetch and saving it, the updated data will not be reflected in the returned SolidDataset.
 * To make sure you have the latest data, call [[getSolidDataset]] again after saving the data.
 *
 * The Solid server will create any intermediary Containers that do not exist yet, so they do not
 * need to be created in advance. For example, if the target URL is
 * https://example.pod/container/resource and https://example.pod/container/ does not exist yet,
 * it will exist after this function resolves successfully.
 *
 * @param url URL to save `solidDataset` to.
 * @param solidDataset The [[SolidDataset]] to save.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Promise resolving to a [[SolidDataset]] containing the stored data, or rejecting if saving it failed.
 */


async function saveSolidDatasetAt(url, solidDataset, options = internal_defaultFetchOptions) {
  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const datasetWithChangelog = internal_withChangeLog(solidDataset);
  const requestInit = isUpdate(datasetWithChangelog, url) ? await prepareSolidDatasetUpdate(datasetWithChangelog) : await prepareSolidDatasetCreation(datasetWithChangelog);
  const response = await config.fetch(url, requestInit);

  if (internal_isUnsuccessfulResponse(response)) {
    const diagnostics = isUpdate(datasetWithChangelog, url) ? "The changes that were sent to the Pod are listed below.\n\n" + changeLogAsMarkdown(datasetWithChangelog) : "The SolidDataset that was sent to the Pod is listed below.\n\n" + solidDatasetAsMarkdown(datasetWithChangelog);
    throw new FetchError(`Storing the Resource at [${url}] failed: [${response.status}] [${response.statusText}].\n\n` + diagnostics, response);
  }

  const resourceInfo = Object.assign(Object.assign({}, internal_parseResourceInfo(response)), {
    isRawData: false
  });
  const storedDataset = freeze(Object.assign(Object.assign({}, solidDataset), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  const storedDatasetWithResolvedIris = resolveLocalIrisInSolidDataset(storedDataset);
  return storedDatasetWithResolvedIris;
}
/**
 * Deletes the SolidDataset at a given URL.
 *
 * @param file The (URL of the) SolidDataset to delete
 * @since 0.6.0
 */


async function deleteSolidDataset(solidDataset, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const url = hasResourceInfo(solidDataset) ? internal_toIriString(getSourceUrl(solidDataset)) : internal_toIriString(solidDataset);
  const response = await config.fetch(url, {
    method: "DELETE"
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the SolidDataset at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * Create an empty Container at the given URL.
 *
 * Throws an error if creating the Container failed, e.g. because the current user does not have
 * permissions to, or because the Container already exists.
 *
 * Note that a Solid server will automatically create the necessary Containers when storing a
 * Resource; i.e. there is no need to call this function if it is immediately followed by
 * [[saveSolidDatasetAt]] or [[overwriteFile]].
 *
 * @param url URL of the empty Container that is to be created.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 0.2.0
 */


async function createContainerAt(url, options = internal_defaultFetchOptions) {
  url = internal_toIriString(url);
  url = url.endsWith("/") ? url : url + "/";
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "PUT",
    headers: {
      Accept: "text/turtle",
      "Content-Type": "text/turtle",
      "If-None-Match": "*",
      // This header should not be required to create a Container,
      // but ESS currently expects it:
      Link: `<${ldp.BasicContainer}>; rel="type"`
    }
  });

  if (internal_isUnsuccessfulResponse(response)) {
    if (response.status === 409 && response.statusText === "Conflict" && (await response.text()).trim() === internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465) {
      return createContainerWithNssWorkaroundAt(url, options);
    }

    throw new FetchError(`Creating the empty Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const resourceInfo = internal_parseResourceInfo(response);
  const containerDataset = freeze(Object.assign(Object.assign({}, createSolidDataset()), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  return containerDataset;
}
/**
 * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container
 * creation. When we make the (valid, according to the Solid protocol) request to create a
 * Container, NSS responds with the following exact error message. Thus, when we encounter exactly
 * this message, we use an NSS-specific workaround ([[createContainerWithNssWorkaroundAt]]). Both
 * this constant and that workaround should be removed once the NSS issue has been fixed and
 * no versions of NSS with the issue are in common use/supported anymore.
 *
 * @see https://github.com/solid/node-solid-server/issues/1465
 * @internal
 */


const internal_NSS_CREATE_CONTAINER_SPEC_NONCOMPLIANCE_DETECTION_ERROR_MESSAGE_TO_WORKAROUND_THEIR_ISSUE_1465 = "Can't write file: PUT not supported on containers, use POST instead";
/**
 * Unfortunately Node Solid Server does not confirm to the Solid spec when it comes to Container
 * creation. As a workaround, we create a dummy file _inside_ the desired Container (which should
 * create the desired Container on the fly), and then delete it again.
 *
 * @see https://github.com/solid/node-solid-server/issues/1465
 */

const createContainerWithNssWorkaroundAt = async (url, options) => {
  url = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  let existingContainer;

  try {
    existingContainer = await getResourceInfo(url, options);
  } catch (e) {
    // To create the Container, we'd want it to not exist yet. In other words, we'd expect to get
    // a 404 error here in the happy path - so do nothing if that's the case.
    if (!(e instanceof FetchError) || e.statusCode !== 404) {
      // (But if we get an error other than a 404, just throw that error like we usually would.)
      throw e;
    }
  }

  if (typeof existingContainer !== "undefined") {
    throw new Error(`The Container at [${url}] already exists, and therefore cannot be created again.`);
  }

  const dummyUrl = url + ".dummy";
  const createResponse = await config.fetch(dummyUrl, {
    method: "PUT",
    headers: {
      Accept: "text/turtle",
      "Content-Type": "text/turtle"
    }
  });

  if (internal_isUnsuccessfulResponse(createResponse)) {
    throw new FetchError(`Creating the empty Container at [${url}] failed: [${createResponse.status}] [${createResponse.statusText}].`, createResponse);
  }

  await config.fetch(dummyUrl, {
    method: "DELETE"
  });
  const containerInfoResponse = await config.fetch(url, {
    method: "HEAD"
  });
  const resourceInfo = internal_parseResourceInfo(containerInfoResponse);
  const containerDataset = freeze(Object.assign(Object.assign({}, createSolidDataset()), {
    internal_changeLog: {
      additions: [],
      deletions: []
    },
    internal_resourceInfo: resourceInfo
  }));
  return containerDataset;
};

function isSourceIriEqualTo(dataset, iri) {
  return normalizeServerSideIri(dataset.internal_resourceInfo.sourceIri) === normalizeServerSideIri(iri);
}

function isUpdate(solidDataset, url) {
  return hasChangelog(solidDataset) && hasResourceInfo(solidDataset) && typeof solidDataset.internal_resourceInfo.sourceIri === "string" && isSourceIriEqualTo(solidDataset, url);
}
/**
 * Given a SolidDataset, store it in a Solid Pod in a new Resource inside a Container.
 *
 * The Container at the given URL should already exist; if it does not, you can initialise it first
 * using [[createContainerAt]], or directly save the SolidDataset at the desired location using
 * [[saveSolidDatasetAt]].
 *
 * This function is primarily useful if the current user does not have access to change existing files in
 * a Container, but is allowed to add new files; in other words, they have Append, but not Write
 * access to a Container. This is useful in situations where someone wants to allow others to,
 * for example, send notifications to their Pod, but not to view or delete existing notifications.
 * You can pass a suggestion for the new Resource's name, but the server may decide to give it
 * another name — for example, if a Resource with that name already exists inside the given
 * Container.
 * If the user does have access to write directly to a given location, [[saveSolidDatasetAt]]
 * will do the job just fine, and does not require the parent Container to exist in advance.
 *
 * @param containerUrl URL of the Container in which to create a new Resource.
 * @param solidDataset The [[SolidDataset]] to save to a new Resource in the given Container.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Promise resolving to a [[SolidDataset]] containing the saved data. The Promise rejects if the save failed.
 */


async function saveSolidDatasetInContainer(containerUrl, solidDataset, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  containerUrl = internal_toIriString(containerUrl);
  const rawTurtle = await triplesToTurtle(toRdfJsQuads(solidDataset).map(getNamedNodesForLocalNodes));
  const headers = {
    "Content-Type": "text/turtle",
    Link: `<${ldp.Resource}>; rel="type"`
  };

  if (options.slugSuggestion) {
    headers.slug = options.slugSuggestion;
  }

  const response = await config.fetch(containerUrl, {
    method: "POST",
    body: rawTurtle,
    headers: headers
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Storing the Resource in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].\n\n` + "The SolidDataset that was sent to the Pod is listed below.\n\n" + solidDatasetAsMarkdown(solidDataset), response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly saved SolidDataset.");
  }

  const resourceIri = new URL(locationHeader, response.url).href;
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: false,
      sourceIri: resourceIri
    }
  };
  const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, solidDataset), resourceInfo));
  const resourceWithResolvedIris = resolveLocalIrisInSolidDataset(resourceWithResourceInfo);
  return resourceWithResolvedIris;
}
/**
 * Create an empty Container inside the Container at the given URL.
 *
 * Throws an error if creating the Container failed, e.g. because the current user does not have
 * permissions to.
 *
 * The Container in which to create the new Container should itself already exist.
 *
 * This function is primarily useful if the current user does not have access to change existing files in
 * a Container, but is allowed to add new files; in other words, they have Append, but not Write
 * access to a Container. This is useful in situations where someone wants to allow others to,
 * for example, send notifications to their Pod, but not to view or delete existing notifications.
 * You can pass a suggestion for the new Resource's name, but the server may decide to give it
 * another name — for example, if a Resource with that name already exists inside the given
 * Container.
 * If the user does have access to write directly to a given location, [[createContainerAt]]
 * will do the job just fine, and does not require the parent Container to exist in advance.
 *
 * @param containerUrl URL of the Container in which the empty Container is to be created.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 0.2.0
 */


async function createContainerInContainer(containerUrl, options = internal_defaultFetchOptions) {
  containerUrl = internal_toIriString(containerUrl);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const headers = {
    "Content-Type": "text/turtle",
    Link: `<${ldp.BasicContainer}>; rel="type"`
  };

  if (options.slugSuggestion) {
    headers.slug = options.slugSuggestion;
  }

  const response = await config.fetch(containerUrl, {
    method: "POST",
    headers: headers
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Creating an empty Container in the Container at [${containerUrl}] failed: [${response.status}] [${response.statusText}].`, response);
  }

  const locationHeader = response.headers.get("Location");

  if (locationHeader === null) {
    throw new Error("Could not determine the location of the newly created Container.");
  }

  const resourceIri = new URL(locationHeader, response.url).href;
  const resourceInfo = {
    internal_resourceInfo: {
      isRawData: false,
      sourceIri: resourceIri
    }
  };
  const resourceWithResourceInfo = freeze(Object.assign(Object.assign({}, createSolidDataset()), resourceInfo));
  return resourceWithResourceInfo;
}
/**
 * Deletes the Container at a given URL.
 *
 * @param file The (URL of the) Container to delete
 * @since 0.6.0
 */


async function deleteContainer(container, options = internal_defaultFetchOptions) {
  const url = hasResourceInfo(container) ? internal_toIriString(getSourceUrl(container)) : internal_toIriString(container);

  if (!isContainer(container)) {
    throw new Error(`You're trying to delete the Container at [${url}], but Container URLs should end in a \`/\`. Are you sure this is a Container?`);
  }

  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(url, {
    method: "DELETE"
  });

  if (internal_isUnsuccessfulResponse(response)) {
    throw new FetchError(`Deleting the Container at [${url}] failed: [${response.status}] [${response.statusText}].`, response);
  }
}
/**
 * Given a [[SolidDataset]] representing a Container (see [[isContainer]]), fetch the URLs of all
 * contained resources.
 * If the solidDataset given is not a container, or is missing resourceInfo, throw an error.
 *
 * @param solidDataset The container from which to fetch all contained Resource URLs.
 * @returns A list of URLs, each of which points to a contained Resource of the given SolidDataset.
 * @since 1.3.0
 */


function getContainedResourceUrlAll(solidDataset) {
  const container = getThing(solidDataset, getSourceUrl(solidDataset)); // See https://www.w3.org/TR/2015/REC-ldp-20150226/#h-ldpc-http_post:
  // > a containment triple MUST be added to the state of the LDPC whose subject is the LDPC URI,
  // > whose predicate is ldp:contains and whose object is the URI for the newly created document

  return container !== null ? getIriAll(container, ldp.contains) : [];
}
/**
 * Gets a human-readable representation of the given SolidDataset to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param solidDataset The [[SolidDataset]] to get a human-readable representation of.
 * @since 0.3.0
 */


function solidDatasetAsMarkdown(solidDataset) {
  let readableSolidDataset = "";

  if (hasResourceInfo(solidDataset)) {
    readableSolidDataset += `# SolidDataset: ${getSourceUrl(solidDataset)}\n`;
  } else {
    readableSolidDataset += `# SolidDataset (no URL yet)\n`;
  }

  const things = getThingAll(solidDataset);

  if (things.length === 0) {
    readableSolidDataset += "\n<empty>\n";
  } else {
    things.forEach(thing => {
      readableSolidDataset += "\n" + thingAsMarkdown(thing);

      if (hasChangelog(solidDataset)) {
        readableSolidDataset += "\n" + getReadableChangeLogSummary(solidDataset, thing) + "\n";
      }
    });
  }

  return readableSolidDataset;
}
/**
 * Gets a human-readable representation of the local changes to a Resource to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param solidDataset The Resource of which to get a human-readable representation of the changes applied to it locally.
 * @since 0.3.0
 */


function changeLogAsMarkdown(solidDataset) {
  if (!hasResourceInfo(solidDataset)) {
    return "This is a newly initialized SolidDataset, so there is no source to compare it to.";
  }

  if (!hasChangelog(solidDataset) || solidDataset.internal_changeLog.additions.length === 0 && solidDataset.internal_changeLog.deletions.length === 0) {
    return `## Changes compared to ${getSourceUrl(solidDataset)}\n\n` + `This SolidDataset has not been modified since it was fetched from ${getSourceUrl(solidDataset)}.\n`;
  }

  let readableChangeLog = `## Changes compared to ${getSourceUrl(solidDataset)}\n`;
  const changeLogsByThingAndProperty = sortChangeLogByThingAndProperty(solidDataset);
  Object.keys(changeLogsByThingAndProperty).forEach(thingUrl => {
    readableChangeLog += `\n### Thing: ${thingUrl}\n`;
    const changeLogByProperty = changeLogsByThingAndProperty[thingUrl];
    Object.keys(changeLogByProperty).forEach(propertyUrl => {
      readableChangeLog += `\nProperty: ${propertyUrl}\n`;
      const deleted = changeLogByProperty[propertyUrl].deleted;
      const added = changeLogByProperty[propertyUrl].added;

      if (deleted.length > 0) {
        readableChangeLog += "- Removed:\n";
        deleted.forEach(deletedValue => readableChangeLog += `  - ${internal_getReadableValue(deletedValue)}\n`);
      }

      if (added.length > 0) {
        readableChangeLog += "- Added:\n";
        added.forEach(addedValue => readableChangeLog += `  - ${internal_getReadableValue(addedValue)}\n`);
      }
    });
  });
  return readableChangeLog;
}

function sortChangeLogByThingAndProperty(solidDataset) {
  const changeLogsByThingAndProperty = {};
  solidDataset.internal_changeLog.deletions.forEach(deletion => {
    var _a, _b;

    var _c;

    const subjectNode = isLocalNode(deletion.subject) ?
    /* istanbul ignore next: Unsaved deletions should be removed from the additions list instead, so this code path shouldn't be hit: */
    resolveIriForLocalNode(deletion.subject, getSourceUrl(solidDataset)) : deletion.subject;

    if (!isNamedNode(subjectNode) || !isNamedNode(deletion.predicate)) {
      return;
    }

    const thingUrl = internal_toIriString(subjectNode);
    const propertyUrl = internal_toIriString(deletion.predicate);
    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};
    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {
      added: [],
      deleted: []
    };
    changeLogsByThingAndProperty[thingUrl][propertyUrl].deleted.push(deletion.object);
  });
  solidDataset.internal_changeLog.additions.forEach(addition => {
    var _a, _b;

    var _c;

    const subjectNode = isLocalNode(addition.subject) ?
    /* istanbul ignore next: setThing already resolves local Subjects when adding them, so this code path should never be hit. */
    resolveIriForLocalNode(addition.subject, getSourceUrl(solidDataset)) : addition.subject;

    if (!isNamedNode(subjectNode) || !isNamedNode(addition.predicate)) {
      return;
    }

    const thingUrl = internal_toIriString(subjectNode);
    const propertyUrl = internal_toIriString(addition.predicate);
    (_a = changeLogsByThingAndProperty[thingUrl]) !== null && _a !== void 0 ? _a : changeLogsByThingAndProperty[thingUrl] = {};
    (_b = (_c = changeLogsByThingAndProperty[thingUrl])[propertyUrl]) !== null && _b !== void 0 ? _b : _c[propertyUrl] = {
      added: [],
      deleted: []
    };
    changeLogsByThingAndProperty[thingUrl][propertyUrl].added.push(addition.object);
  });
  return changeLogsByThingAndProperty;
}

function getReadableChangeLogSummary(solidDataset, thing) {
  const subject = DataFactory.namedNode(thing.url);
  const nrOfAdditions = solidDataset.internal_changeLog.additions.reduce((count, addition) => addition.subject.equals(subject) ? count + 1 : count, 0);
  const nrOfDeletions = solidDataset.internal_changeLog.deletions.reduce((count, deletion) => deletion.subject.equals(subject) ? count + 1 : count, 0);
  const additionString = nrOfAdditions === 1 ? "1 new value added" : nrOfAdditions + " new values added";
  const deletionString = nrOfDeletions === 1 ? "1 value removed" : nrOfDeletions + " values removed";
  return `(${additionString} / ${deletionString})`;
}

function getNamedNodesForLocalNodes(quad) {
  const subject = isNamedNode(quad.subject) ? getNamedNodeFromLocalNode(quad.subject) :
  /* istanbul ignore next: We don't allow non-NamedNodes as the Subject, so this code path should never be hit: */
  quad.subject;
  const object = isNamedNode(quad.object) ? getNamedNodeFromLocalNode(quad.object) : quad.object;
  return DataFactory.quad(subject, quad.predicate, object, quad.graph);
}

function getNamedNodeFromLocalNode(node) {
  if (isLocalNodeIri(node.value)) {
    return DataFactory.namedNode("#" + getLocalNodeName(node.value));
  }

  return node;
}

function resolveLocalIrisInSolidDataset(solidDataset) {
  const resourceIri = getSourceUrl(solidDataset);
  const defaultGraph = solidDataset.graphs.default;
  const thingIris = Object.keys(defaultGraph);
  const updatedDefaultGraph = thingIris.reduce((graphAcc, thingIri) => {
    const resolvedThing = resolveLocalIrisInThing(graphAcc[thingIri], resourceIri);
    const resolvedThingIri = isLocalNodeIri(thingIri) ? `${resourceIri}#${getLocalNodeName(thingIri)}` : thingIri;
    const updatedGraph = Object.assign({}, graphAcc);
    delete updatedGraph[thingIri];
    updatedGraph[resolvedThingIri] = resolvedThing;
    return freeze(updatedGraph);
  }, defaultGraph);
  const updatedGraphs = freeze(Object.assign(Object.assign({}, solidDataset.graphs), {
    default: updatedDefaultGraph
  }));
  return freeze(Object.assign(Object.assign({}, solidDataset), {
    graphs: updatedGraphs
  }));
}

function resolveLocalIrisInThing(thing, baseIri) {
  const predicateIris = Object.keys(thing.predicates);
  const updatedPredicates = predicateIris.reduce((predicatesAcc, predicateIri) => {
    var _a;

    const namedNodes = (_a = predicatesAcc[predicateIri].namedNodes) !== null && _a !== void 0 ? _a : [];

    if (namedNodes.every(namedNode => !isLocalNodeIri(namedNode))) {
      // This Predicate has no local node Objects, so return it unmodified:
      return predicatesAcc;
    }

    const updatedNamedNodes = freeze(namedNodes.map(namedNode => isLocalNodeIri(namedNode) ? `${baseIri}#${getLocalNodeName(namedNode)}` : namedNode));
    const updatedPredicate = freeze(Object.assign(Object.assign({}, predicatesAcc[predicateIri]), {
      namedNodes: updatedNamedNodes
    }));
    return freeze(Object.assign(Object.assign({}, predicatesAcc), {
      [predicateIri]: updatedPredicate
    }));
  }, thing.predicates);
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates,
    url: isLocalNodeIri(thing.url) ? `${baseIri}#${getLocalNodeName(thing.url)}` : thing.url
  }));
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const {
  Response
} = crossFetch;
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new [[SolidDataset]] with metadata as though the
 * SolidDataset has been retrieved from the given URL. The mock SolidDataset can be used in
 * unit tests that require persisted SolidDatasets; e.g., unit tests that call [[getSourceUrl]].
 *
 * @param url The URL from which the returned SolidDataset appears to be retrieved.
 * @returns A mock SolidDataset that appears to be retrieved from the `url`.
 * @since 0.2.0
 */

function mockSolidDatasetFrom(url) {
  const solidDataset = createSolidDataset();
  const solidDatasetWithResourceInfo = Object.assign(Object.assign({}, solidDataset), {
    internal_resourceInfo: {
      sourceIri: internal_toIriString(url),
      isRawData: false,
      contentType: "text/turtle",
      linkedResources: {}
    }
  });
  return solidDatasetWithResourceInfo;
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new Container [[SolidDataset]] with metadata as though the
 * Container has been retrieved from the given URL. The mock SolidDataset can be used in
 * unit tests that require persisted Containers; e.g., unit tests that call [[isContainer]].
 *
 * @param url The URL from which the returned Container appears to be retrieved. The `url` must end in a slash.
 * @returns A mock SolidDataset that appears to be retrieved from the `url`.
 * @since 0.2.0
 */


function mockContainerFrom(url) {
  const sourceIri = internal_toIriString(url);

  if (!sourceIri.endsWith("/")) {
    throw new Error("A Container's URL should end in a slash. Please update your tests.");
  }

  return mockSolidDatasetFrom(sourceIri);
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new File with metadata as though the
 * File has been retrieved from the given URL. The mock File can be used in
 * unit tests that require persisted Files; e.g. unit tests that call [[getSourceUrl]].
 *
 * @param url The URL from which the returned File appears to be retrieved.
 * @returns A mock File that appears to be retrieved from the `url`.
 * @since 0.2.0
 */


function mockFileFrom(url, options) {
  const file = new Blob();
  const fileWithResourceInfo = Object.assign(file, {
    internal_resourceInfo: {
      sourceIri: internal_toIriString(url),
      isRawData: true,
      contentType: options === null || options === void 0 ? void 0 : options.contentType,
      linkedResources: {}
    }
  });
  return fileWithResourceInfo;
}
/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests**.
 * ```
 *
 * This function initialises a new Error object with metadata as though the
 * it was the result of getting a 404 when trying to fetch the Resource at the
 * given URL. The mock Error can be used in unit tests that require functions
 * that fetch Resources (like [[getSolidDataset]]) to fail.
 *
 * @param url The URL of the Resource that could not be fetched according to the error.
 * @param statusCode Optional status code (defaults to 404) that caused the error.
 * @returns A mock Error that represents not having been able to fetch the Resource at `url` due to a 404 Response.
 * @since 1.1.0
 */


function mockFetchError(fetchedUrl, statusCode = 404) {
  const failedResponse = new Response(undefined, {
    status: statusCode
  });
  return new FetchError(`Fetching the Resource at [${fetchedUrl}] failed: [${failedResponse.status}] [${failedResponse.statusText}].`, failedResponse);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create a new Thing with a URL added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setUrl]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a URL value to.
 * @param property Property for which to add the given URL value.
 * @param url URL to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


const addUrl = (thing, property, url) => {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  if (!isThing(url) && !internal_isValidUrl(url)) {
    throw new ValidValueUrlExpectedError(url);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingNamedNodes = (_b = existingPredicate.namedNodes) !== null && _b !== void 0 ? _b : [];
  let iriToAdd;

  if (isNamedNode(url)) {
    iriToAdd = url.value;
  } else if (typeof url === "string") {
    iriToAdd = url;
  } else if (isThingLocal(url)) {
    iriToAdd = url.url;
  } else {
    iriToAdd = asIri(url);
  }

  const updatedNamedNodes = freeze(existingNamedNodes.concat(internal_toIriString(iriToAdd)));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    namedNodes: updatedNamedNodes
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
};
/** @hidden Alias for [[addUrl]] for those who prefer IRI terminology. */


exports.addUrl = addUrl;
const addIri = addUrl;
/**
 * Create a new Thing with a boolean added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setBoolean]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a boolean value to.
 * @param property Property for which to add the given boolean value.
 * @param value Boolean to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */

exports.addIri = addIri;

const addBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeBoolean(value), xmlSchemaTypes.boolean);
};
/**
 * Create a new Thing with a datetime added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a datetime value to.
 * @param property Property for which to add the given datetime value.
 * @param value Datetime to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addBoolean = addBoolean;

const addDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDatetime(value), xmlSchemaTypes.dateTime);
};
/**
 * Create a new Thing with a date added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDate]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a date value to.
 * @param property Property for which to add the given date value.
 * @param value Date to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 1.10.0
 */


exports.addDatetime = addDatetime;

const addDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDate(value), xmlSchemaTypes.date);
};
/**
 * Create a new Thing with a time added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a datetime value to.
 * @param property Property for which to add the given datetime value.
 * @param value time to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 1.10.0
 */


exports.addDate = addDate;

const addTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeTime(value), xmlSchemaTypes.time);
};
/**
 * Create a new Thing with a decimal added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setDecimal]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a decimal value to.
 * @param property Property for which to add the given decimal value.
 * @param value Decimal to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addTime = addTime;

const addDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeDecimal(value), xmlSchemaTypes.decimal);
};
/**
 * Create a new Thing with an integer added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setInteger]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add an integer value to.
 * @param property Property for which to add the given integer value.
 * @param value Integer to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addDecimal = addDecimal;

const addInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, serializeInteger(value), xmlSchemaTypes.integer);
};
/**
 * Create a new Thing with a localised string added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setStringWithLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add a localised string value to.
 * @param property Property for which to add the given string value.
 * @param value String to add to `thing` for the given `property`.
 * @param locale Locale of the added string.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addInteger = addInteger;

function addStringWithLocale(thing, property, value, locale) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const normalizedLocale = normalizeLocale(locale);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLangStrings = (_b = existingPredicate.langStrings) !== null && _b !== void 0 ? _b : {};
  const existingStringsInLocale = (_c = existingLangStrings[normalizedLocale]) !== null && _c !== void 0 ? _c : [];
  const updatedStringsInLocale = freeze(existingStringsInLocale.concat(value));
  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {
    [normalizedLocale]: updatedStringsInLocale
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    langStrings: updatedLangStrings
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Create a new Thing with an unlocalised string added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setStringNoLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to add an unlocalised string value to.
 * @param property Property for which to add the given string value.
 * @param value String to add to `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


const addStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addLiteralOfType(thing, property, value, xmlSchemaTypes.string);
};
/**
 * Create a new Thing with a Named Node added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setNamedNode]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Named Node to.
 * @param property Property for which to add a value.
 * @param value The Named Node to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


exports.addStringNoLocale = addStringNoLocale;

function addNamedNode(thing, property, value) {
  return addUrl(thing, property, value.value);
}
/**
 * Create a new Thing with a Literal added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setLiteral]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Literal to.
 * @param property Property for which to add a value.
 * @param value The Literal to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 */


function addLiteral(thing, property, value) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const typeIri = value.datatype.value;

  if (typeIri === xmlSchemaTypes.langString) {
    return addStringWithLocale(thing, property, value.value, value.language);
  }

  return addLiteralOfType(thing, property, value.value, value.datatype.value);
}
/**
 * Creates a new Thing with a Term added for a Property.
 *
 * This preserves existing values for the given Property. To replace them, see [[setTerm]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other add*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to add a Term to.
 * @param property Property for which to add a value.
 * @param value The Term to add.
 * @returns A new Thing equal to the input Thing with the given value added for the given Property.
 * @since 0.3.0
 */


function addTerm(thing, property, value) {
  var _a, _b;

  if (value.termType === "NamedNode") {
    return addNamedNode(thing, property, value);
  }

  if (value.termType === "Literal") {
    return addLiteral(thing, property, value);
  }

  if (value.termType === "BlankNode") {
    internal_throwIfNotThing(thing);

    if (!internal_isValidUrl(property)) {
      throw new ValidPropertyUrlExpectedError(property);
    }

    const predicateIri = internal_toIriString(property);
    const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
    const existingBlankNodes = (_b = existingPredicate.blankNodes) !== null && _b !== void 0 ? _b : [];
    const updatedBlankNodes = freeze(existingBlankNodes.concat(getBlankNodeId(value)));
    const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
      blankNodes: updatedBlankNodes
    }));
    const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
      [predicateIri]: updatedPredicate
    }));
    const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
      predicates: updatedPredicates
    }));
    return updatedThing;
  }

  throw new Error(`Term type [${value.termType}] is not supported by @inrupt/solid-client.`);
}

function addLiteralOfType(thing, property, value, type) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicate = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicate.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];
  const updatedValuesOfType = freeze(existingValuesOfType.concat(value));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [type]: updatedValuesOfType
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicate), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function removeAll(thing, property) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const newPredicates = Object.assign({}, thing.predicates);
  delete newPredicates[predicateIri];
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: freeze(newPredicates)
  }));
}
/**
 * Create a new Thing with the given URL removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a URL value from.
 * @param property Property for which to remove the given URL value.
 * @param value URL to remove from `thing` for the given `Property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


const removeUrl = (thing, property, value) => {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);

  if (!isThing(value) && !internal_isValidUrl(value)) {
    throw new ValidValueUrlExpectedError(value);
  }

  const iriToRemove = isNamedNode(value) ? value.value : typeof value === "string" ? value : asIri(value);
  const updatedNamedNodes = freeze((_c = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.namedNodes) === null || _b === void 0 ? void 0 : _b.filter(namedNode => namedNode.toLowerCase() !== iriToRemove.toLowerCase())) !== null && _c !== void 0 ? _c : []);
  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {
    namedNodes: updatedNamedNodes
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
};
/** @hidden Alias of [[removeUrl]] for those who prefer IRI terminology. */


exports.removeUrl = removeUrl;
const removeIri = removeUrl;
/**
 * Create a new Thing with the given boolean removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a boolean value from.
 * @param property Property for which to remove the given boolean value.
 * @param value Boolean to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */

exports.removeIri = removeIri;

const removeBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.boolean, foundBoolean => deserializeBoolean(foundBoolean) === value);
};
/**
 * Create a new Thing with the given datetime removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a datetime value from.
 * @param property Property for which to remove the given datetime value.
 * @param value Datetime to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeBoolean = removeBoolean;

const removeDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.dateTime, foundDatetime => {
    var _a;

    return ((_a = deserializeDatetime(foundDatetime)) === null || _a === void 0 ? void 0 : _a.getTime()) === value.getTime();
  });
};
/**
 * Create a new Thing with the given date removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a date value from.
 * @param property Property for which to remove the given date value.
 * @param value Date to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 * @since 1.10.0
 */


exports.removeDatetime = removeDatetime;

const removeDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.date, function (foundDate) {
    const deserializedDate = deserializeDate(foundDate);

    if (deserializedDate) {
      return deserializedDate.getFullYear() === value.getFullYear() && deserializedDate.getMonth() === value.getMonth() && deserializedDate.getDate() === value.getDate();
    } else {
      return false;
    }
  });
};
/**
 * Create a new Thing with the given datetime removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a datetime value from.
 * @param property Property for which to remove the given datetime value.
 * @param value Time to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 * @since 1.10.0
 */


exports.removeDate = removeDate;

const removeTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.time, function (foundTime) {
    const deserializedTime = deserializeTime(foundTime);

    if (deserializedTime) {
      return deserializedTime.hour === value.hour && deserializedTime.minute === value.minute && deserializedTime.second === value.second && deserializedTime.millisecond === value.millisecond && deserializedTime.timezoneHourOffset === value.timezoneHourOffset && deserializedTime.timezoneMinuteOffset === value.timezoneMinuteOffset;
    } else {
      return false;
    }
  });
};
/**
 * Create a new Thing with the given decimal removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a decimal value from.
 * @param property Property for which to remove the given decimal value.
 * @param value Decimal to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeTime = removeTime;

const removeDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.decimal, foundDecimal => deserializeDecimal(foundDecimal) === value);
};
/**
 * Create a new Thing with the given integer removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove an integer value from.
 * @param property Property for which to remove the given integer value.
 * @param value Integer to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeDecimal = removeDecimal;

const removeInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.integer, foundInteger => deserializeInteger(foundInteger) === value);
};
/**
 * Create a new Thing with the given localised string removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove a localised string value from.
 * @param property Property for which to remove the given localised string value.
 * @param value String to remove from `thing` for the given `property`.
 * @param locale Locale of the string to remove.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeInteger = removeInteger;

function removeStringWithLocale(thing, property, value, locale) {
  var _a, _b;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingLangStrings = (_b = (_a = thing.predicates[predicateIri]) === null || _a === void 0 ? void 0 : _a.langStrings) !== null && _b !== void 0 ? _b : {};
  const matchingLocale = Object.keys(existingLangStrings).find(existingLocale => normalizeLocale(existingLocale) === normalizeLocale(locale) && Array.isArray(existingLangStrings[existingLocale]) && existingLangStrings[existingLocale].length > 0);

  if (typeof matchingLocale !== "string") {
    // Nothing to remove.
    return thing;
  }

  const existingStringsInLocale = existingLangStrings[matchingLocale];
  const updatedStringsInLocale = freeze(existingStringsInLocale.filter(existingString => existingString !== value));
  const updatedLangStrings = freeze(Object.assign(Object.assign({}, existingLangStrings), {
    [matchingLocale]: updatedStringsInLocale
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, thing.predicates[predicateIri]), {
    langStrings: updatedLangStrings
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  return freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
}
/**
 * Create a new Thing with the given unlocalised string removed for the given Property.
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to remove an unlocalised string value from.
 * @param property Property for which to remove the given string value.
 * @param value String to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


const removeStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return removeLiteralMatching(thing, property, xmlSchemaTypes.string, foundString => foundString === value);
};
/**
 * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing Thing to remove a NamedNode value from.
 * @param property Property for which to remove the given NamedNode value.
 * @param value NamedNode to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


exports.removeStringNoLocale = removeStringNoLocale;

function removeNamedNode(thing, property, value) {
  return removeUrl(thing, property, value.value);
}
/**
 * @ignore This should not be needed due to the other remove*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing Thing to remove a Literal value from.
 * @param property Property for which to remove the given Literal value.
 * @param value Literal to remove from `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with the given value removed for the given Property.
 */


function removeLiteral(thing, property, value) {
  var _a, _b, _c;

  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const typeIri = value.datatype.value;

  if (typeIri === xmlSchemaTypes.langString) {
    return removeStringWithLocale(thing, property, value.value, value.language);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[typeIri]) !== null && _c !== void 0 ? _c : [];
  const updatedValues = freeze(existingValuesOfType.filter(existingValue => existingValue !== value.value));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [typeIri]: updatedValues
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * @param thing Thing to remove a Literal value from.
 * @param property Property for which to remove the given Literal value.
 * @param type Data type that the Literal should be stored as.
 * @param matcher Function that returns true if the given value is an equivalent serialisation of the value to remove. For example, when removing a `false` boolean, the matcher should return true for both "0" and "false".
 */


function removeLiteralMatching(thing, property, type, matcher) {
  var _a, _b, _c;

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  const predicateIri = internal_toIriString(property);
  const existingPredicateValues = (_a = thing.predicates[predicateIri]) !== null && _a !== void 0 ? _a : {};
  const existingLiterals = (_b = existingPredicateValues.literals) !== null && _b !== void 0 ? _b : {};
  const existingValuesOfType = (_c = existingLiterals[type]) !== null && _c !== void 0 ? _c : [];
  const updatedValues = freeze(existingValuesOfType.filter(existingValue => !matcher(existingValue)));
  const updatedLiterals = freeze(Object.assign(Object.assign({}, existingLiterals), {
    [type]: updatedValues
  }));
  const updatedPredicate = freeze(Object.assign(Object.assign({}, existingPredicateValues), {
    literals: updatedLiterals
  }));
  const updatedPredicates = freeze(Object.assign(Object.assign({}, thing.predicates), {
    [predicateIri]: updatedPredicate
  }));
  const updatedThing = freeze(Object.assign(Object.assign({}, thing), {
    predicates: updatedPredicates
  }));
  return updatedThing;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create a new Thing with existing values replaced by the given URL for the given Property.
 *
 * To preserve existing values, see [[addUrl]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a URL value on.
 * @param property Property for which to set the given URL value.
 * @param url URL to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


const setUrl = (thing, property, url) => {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  if (!isThing(url) && !internal_isValidUrl(url)) {
    throw new ValidValueUrlExpectedError(url);
  }

  return addUrl(removeAll(thing, property), property, url);
};
/** @hidden Alias of [[setUrl]] for those who prefer IRI terminology. */


exports.setUrl = setUrl;
const setIri = setUrl;
/**
 * Create a new Thing with existing values replaced by the given boolean for the given Property.
 *
 * To preserve existing values, see [[addBoolean]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a boolean value on.
 * @param property Property for which to set the given boolean value.
 * @param value Boolean to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */

exports.setIri = setIri;

const setBoolean = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addBoolean(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given datetime for the given Property.
 *
 * To preserve existing values, see [[addDatetime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an datetime value on.
 * @param property Property for which to set the given datetime value.
 * @param value Datetime to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setBoolean = setBoolean;

const setDatetime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDatetime(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given date for the given Property.
 *
 * To preserve existing values, see [[addDate]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an date value on.
 * @param property Property for which to set the given date value.
 * @param value Date to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 1.10.0
 */


exports.setDatetime = setDatetime;

const setDate = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDate(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given time for the given Property.
 *
 * To preserve existing values, see [[addTime]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an time value on.
 * @param property Property for which to set the given time value.
 * @param value time to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 1.10.0
 */


exports.setDate = setDate;

const setTime = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addTime(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given decimal for the given Property.
 *
 * To preserve existing values, see [[addDecimal]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a decimal value on.
 * @param property Property for which to set the given decimal value.
 * @param value Decimal to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setTime = setTime;

const setDecimal = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addDecimal(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given integer for the given Property.
 *
 * To preserve existing values, see [[addInteger]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an integer value on.
 * @param property Property for which to set the given integer value.
 * @param value Integer to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setDecimal = setDecimal;

const setInteger = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addInteger(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given localised string for the given Property.
 *
 * To preserve existing values, see [[addStringWithLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set a localised string value on.
 * @param property Property for which to set the given localised string value.
 * @param value Localised string to set on `thing` for the given `property`.
 * @param locale Locale of the added string.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setInteger = setInteger;

function setStringWithLocale(thing, property, value, locale) {
  internal_throwIfNotThing(thing);
  return addStringWithLocale(removeAll(thing, property), property, value, locale);
}
/**
 * Create a new Thing with existing values replaced by the given unlocalised string for the given Property.
 *
 * To preserve existing values, see [[addStringNoLocale]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @param thing Thing to set an unlocalised string value on.
 * @param property Property for which to set the given unlocalised string value.
 * @param value Unlocalised string to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


const setStringNoLocale = (thing, property, value) => {
  internal_throwIfNotThing(thing);
  return addStringNoLocale(removeAll(thing, property), property, value);
};
/**
 * Create a new Thing with existing values replaced by the given Named Node for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addNamedNode]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a NamedNode on.
 * @param property Property for which to set the value.
 * @param value The NamedNode to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


exports.setStringNoLocale = setStringNoLocale;

function setNamedNode(thing, property, value) {
  internal_throwIfNotThing(thing);
  return addNamedNode(removeAll(thing, property), property, value);
}
/**
 * Create a new Thing with existing values replaced by the given Literal for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addLiteral]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a Literal on.
 * @param property Property for which to set the value.
 * @param value The Literal to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 */


function setLiteral(thing, property, value) {
  internal_throwIfNotThing(thing);
  return addLiteral(removeAll(thing, property), property, value);
}
/**
 * Creates a new Thing with existing values replaced by the given Term for the given Property.
 *
 * This replaces existing values for the given Property. To preserve them, see [[addTerm]].
 *
 * The original `thing` is not modified; this function returns a cloned Thing with updated values.
 *
 * @ignore This should not be needed due to the other set*() functions. If you do find yourself needing it, please file a feature request for your use case.
 * @param thing The [[Thing]] to set a Term on.
 * @param property Property for which to set the value.
 * @param value The raw RDF/JS value to set on `thing` for the given `property`.
 * @returns A new Thing equal to the input Thing with existing values replaced by the given value for the given Property.
 * @since 0.3.0
 */


function setTerm(thing, property, value) {
  internal_throwIfNotThing(thing);

  if (!internal_isValidUrl(property)) {
    throw new ValidPropertyUrlExpectedError(property);
  }

  return addTerm(removeAll(thing, property), property, value);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Create or modify a [[Thing]], setting multiple properties in a single expresssion.
 *
 * For example, you can create a new Thing and initialise several properties as follows:
 *
 *     const me = buildThing()
 *       .addUrl(rdf.type, schema.Person)
 *       .addStringNoLocale(schema.givenName, "Vincent")
 *       .build();
 *
 * Take note of the final call to `.build()` to obtain the actual Thing.
 *
 * @param init Optionally pass an existing [[Thing]] to modify the properties of. If left empty, `buildThing` will initialise a new Thing.
 * @returns a [[ThingBuilder]], a Fluent API that allows you to set multiple properties in a single expression.
 * @since 1.9.0
 */


function buildThing(init = createThing()) {
  const thing = isThing(init) ? init : createThing(init);
  return {
    build: () => thing,
    addUrl: getAdder(thing, addUrl),
    addIri: getAdder(thing, addIri),
    addBoolean: getAdder(thing, addBoolean),
    addDatetime: getAdder(thing, addDatetime),
    addDate: getAdder(thing, addDate),
    addTime: getAdder(thing, addTime),
    addDecimal: getAdder(thing, addDecimal),
    addInteger: getAdder(thing, addInteger),
    addStringNoLocale: getAdder(thing, addStringNoLocale),
    addStringWithLocale: (property, value, locale) => buildThing(addStringWithLocale(thing, property, value, locale)),
    addNamedNode: getAdder(thing, addNamedNode),
    addLiteral: getAdder(thing, addLiteral),
    addTerm: getAdder(thing, addTerm),
    setUrl: getSetter(thing, setUrl),
    setIri: getSetter(thing, setIri),
    setBoolean: getSetter(thing, setBoolean),
    setDatetime: getSetter(thing, setDatetime),
    setDate: getSetter(thing, setDate),
    setTime: getSetter(thing, setTime),
    setDecimal: getSetter(thing, setDecimal),
    setInteger: getSetter(thing, setInteger),
    setStringNoLocale: getSetter(thing, setStringNoLocale),
    setStringWithLocale: (property, value, locale) => buildThing(setStringWithLocale(thing, property, value, locale)),
    setNamedNode: getSetter(thing, setNamedNode),
    setLiteral: getSetter(thing, setLiteral),
    setTerm: getSetter(thing, setTerm),
    removeAll: property => buildThing(removeAll(thing, property)),
    removeUrl: getRemover(thing, removeUrl),
    removeIri: getRemover(thing, removeIri),
    removeBoolean: getRemover(thing, removeBoolean),
    removeDatetime: getRemover(thing, removeDatetime),
    removeDate: getRemover(thing, removeDate),
    removeTime: getRemover(thing, removeTime),
    removeDecimal: getRemover(thing, removeDecimal),
    removeInteger: getRemover(thing, removeInteger),
    removeStringNoLocale: getRemover(thing, removeStringNoLocale),
    removeStringWithLocale: (property, value, locale) => buildThing(removeStringWithLocale(thing, property, value, locale)),
    removeNamedNode: getRemover(thing, removeNamedNode),
    removeLiteral: getRemover(thing, removeLiteral)
  };
}

function getAdder(thing, adder) {
  return (property, value) => {
    return buildThing(adder(thing, property, value));
  };
}

function getSetter(thing, setter) {
  return (property, value) => {
    return buildThing(setter(thing, property, value));
  };
}

function getRemover(thing, remover) {
  return (property, value) => {
    return buildThing(remover(thing, property, value));
  };
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Function for use in unit tests to mock a [[Thing]] with a given URL.
 *
 * Warning: do not use this function in actual production code.
 * This function initialises a new empty Thing and sets its URL to a given URL.
 * This is useful to mock a Thing in tests of code that call e.g.
 * [[asUrl]].
 *
 * @param url The URL that the mocked Thing pretends identifies it.
 * @returns A new Thing, pretending to be identified by the given URL.
 * @since 0.2.0
 */


function mockThingFrom(url) {
  const iri = internal_toIriString(url);
  const thing = {
    type: "Subject",
    predicates: {},
    url: iri
  };
  return thing;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * This (currently internal) function fetches the ACL indicated in the [[WithServerResourceInfo]]
 * attached to a resource.
 *
 * @internal
 * @param resourceInfo The Resource info with the ACL URL
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters).
 */


async function internal_fetchAcl(resourceInfo, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(resourceInfo)) {
    return {
      resourceAcl: null,
      fallbackAcl: null
    };
  }

  const resourceAcl = await internal_fetchResourceAcl(resourceInfo, options);
  const acl = resourceAcl === null ? {
    resourceAcl: null,
    fallbackAcl: await internal_fetchFallbackAcl(resourceInfo, options)
  } : {
    resourceAcl: resourceAcl,
    fallbackAcl: null
  };
  return acl;
}
/** @internal */


async function internal_fetchResourceAcl(dataset, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(dataset)) {
    return null;
  }

  try {
    const aclSolidDataset = await getSolidDataset(dataset.internal_resourceInfo.aclUrl, options);
    return freeze(Object.assign(Object.assign({}, aclSolidDataset), {
      internal_accessTo: getSourceUrl(dataset)
    }));
  } catch (e) {
    // Since a Solid server adds a `Link` header to an ACL even if that ACL does not exist,
    // failure to fetch the ACL is expected to happen - we just return `null` and let callers deal
    // with it.
    return null;
  }
}
/** @internal */


async function internal_fetchFallbackAcl(resource, options = internal_defaultFetchOptions) {
  const resourceUrl = new URL(getSourceUrl(resource));
  const resourcePath = resourceUrl.pathname; // Note: we're currently assuming that the Origin is the root of the Pod. However, it is not yet
  //       set in stone that that will always be the case. We might need to check the Container's
  //       metadata at some point in time to check whether it is actually the root of the Pod.
  //       See: https://github.com/solid/specification/issues/153#issuecomment-624630022

  if (resourcePath === "/") {
    // We're already at the root, so there's no Container we can retrieve:
    return null;
  }

  const containerPath = internal_getContainerPath(resourcePath);
  const containerIri = new URL(containerPath, resourceUrl.origin).href;
  const containerInfo = await getResourceInfo(containerIri, options);

  if (!hasAccessibleAcl(containerInfo)) {
    // If the current user does not have access to this Container's ACL,
    // we cannot determine whether its ACL is the one that applies. Thus, return null:
    return null;
  }

  const containerAcl = await internal_fetchResourceAcl(containerInfo, options);

  if (containerAcl === null) {
    return internal_fetchFallbackAcl(containerInfo, options);
  }

  return containerAcl;
}
/**
 * Given the path to a Resource, get the URL of the Container one level up in the hierarchy.
 * @param resourcePath The path of the Resource of which we need to determine the Container's path.
 * @hidden For internal use only.
 */


function internal_getContainerPath(resourcePath) {
  const resourcePathWithoutTrailingSlash = resourcePath.substring(resourcePath.length - 1) === "/" ? resourcePath.substring(0, resourcePath.length - 1) : resourcePath;
  const containerPath = resourcePath.substring(0, resourcePathWithoutTrailingSlash.lastIndexOf("/")) + "/";
  return containerPath;
}
/** @internal */


function internal_getAclRules(aclDataset) {
  const things = getThingAll(aclDataset);
  return things.filter(isAclRule);
}

function isAclRule(thing) {
  return getIriAll(thing, rdf.type).includes(acl.Authorization);
}
/** @internal */


function internal_getResourceAclRulesForResource(aclRules, resource) {
  return aclRules.filter(rule => appliesToResource(rule, resource));
}

function appliesToResource(aclRule, resource) {
  return getIriAll(aclRule, acl.accessTo).includes(resource);
}
/** @internal */


function internal_getDefaultAclRulesForResource(aclRules, resource) {
  return aclRules.filter(rule => isDefaultForResource(rule, resource));
}

function isDefaultForResource(aclRule, resource) {
  return getIriAll(aclRule, acl.default).includes(resource) || getIriAll(aclRule, acl.defaultForNew).includes(resource);
}
/** @internal */


function internal_getAccess(rule) {
  const ruleAccessModes = getIriAll(rule, acl.mode);
  const writeAccess = ruleAccessModes.includes(internal_accessModeIriStrings.write);
  return writeAccess ? {
    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),
    append: true,
    write: true,
    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)
  } : {
    read: ruleAccessModes.includes(internal_accessModeIriStrings.read),
    append: ruleAccessModes.includes(internal_accessModeIriStrings.append),
    write: false,
    control: ruleAccessModes.includes(internal_accessModeIriStrings.control)
  };
}
/** @internal */


function internal_combineAccessModes(modes) {
  return modes.reduce((accumulator, current) => {
    const writeAccess = accumulator.write || current.write;
    return writeAccess ? {
      read: accumulator.read || current.read,
      append: true,
      write: true,
      control: accumulator.control || current.control
    } : {
      read: accumulator.read || current.read,
      append: accumulator.append || current.append,
      write: false,
      control: accumulator.control || current.control
    };
  }, {
    read: false,
    append: false,
    write: false,
    control: false
  });
}
/** @internal */


function internal_removeEmptyAclRules(aclDataset) {
  const aclRules = internal_getAclRules(aclDataset);
  const aclRulesToRemove = aclRules.filter(isEmptyAclRule); // Is this too clever? It iterates over aclRulesToRemove, one by one removing them from aclDataset.

  const updatedAclDataset = aclRulesToRemove.reduce(removeThing, aclDataset);
  return updatedAclDataset;
}

function isEmptyAclRule(aclRule) {
  // If there are Quads in there unrelated to Access Control,
  // this is not an empty ACL rule that can be deleted:
  if (subjectToRdfJsQuads(aclRule.predicates, DataFactory.namedNode(aclRule.url), DataFactory.defaultGraph()).some(quad => !isAclQuad(quad))) {
    return false;
  } // If the rule does not apply to any Resource, it is no longer working:


  if (getIri(aclRule, acl.accessTo) === null && getIri(aclRule, acl.default) === null && getIri(aclRule, acl.defaultForNew) === null) {
    return true;
  } // If the rule does not specify Access Modes, it is no longer working:


  if (getIri(aclRule, acl.mode) === null) {
    return true;
  } // If the rule does not specify whom it applies to, it is no longer working:


  if (getIri(aclRule, acl.agent) === null && getIri(aclRule, acl.agentGroup) === null && getIri(aclRule, acl.agentClass) === null) {
    return true;
  }

  return false;
}

function isAclQuad(quad) {
  const predicate = quad.predicate;
  const object = quad.object;

  if (predicate.equals(DataFactory.namedNode(rdf.type)) && object.equals(DataFactory.namedNode(acl.Authorization))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.accessTo)) || predicate.equals(DataFactory.namedNode(acl.default)) || predicate.equals(DataFactory.namedNode(acl.defaultForNew))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.mode)) && Object.values(internal_accessModeIriStrings).some(mode => object.equals(DataFactory.namedNode(mode)))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.agent)) || predicate.equals(DataFactory.namedNode(acl.agentGroup)) || predicate.equals(DataFactory.namedNode(acl.agentClass))) {
    return true;
  }

  if (predicate.equals(DataFactory.namedNode(acl.origin))) {
    return true;
  }

  return false;
}
/**
 * IRIs of potential Access Modes
 * @internal
 */


const internal_accessModeIriStrings = {
  read: "http://www.w3.org/ns/auth/acl#Read",
  append: "http://www.w3.org/ns/auth/acl#Append",
  write: "http://www.w3.org/ns/auth/acl#Write",
  control: "http://www.w3.org/ns/auth/acl#Control"
};
/** @internal
 * This function finds, among a set of ACL rules, the ones granting access to a given entity (the target)
 * and identifying it with a specific property (`acl:agent` or `acl:agentGroup`).
 * @param aclRules The set of rules to filter
 * @param targetIri The IRI of the target
 * @param targetType The property linking the rule to the target
 */

function internal_getAclRulesForIri(aclRules, targetIri, targetType) {
  return aclRules.filter(rule => getIriAll(rule, targetType).includes(targetIri));
}
/** @internal
 * This function transforms a given set of rules into a map associating the IRIs
 * of the entities to which permissions are granted by these rules, and the permissions
 * granted to them. Additionally, it filters these entities based on the predicate
 * that refers to them in the rule.
 */


function internal_getAccessByIri(aclRules, targetType) {
  const targetIriAccess = {};
  aclRules.forEach(rule => {
    const ruleTargetIri = getIriAll(rule, targetType);
    const access = internal_getAccess(rule); // A rule might apply to multiple agents. If multiple rules apply to the same agent, the Access
    // Modes granted by those rules should be combined:

    ruleTargetIri.forEach(targetIri => {
      targetIriAccess[targetIri] = typeof targetIriAccess[targetIri] === "undefined" ? access : internal_combineAccessModes([targetIriAccess[targetIri], access]);
    });
  });
  return targetIriAccess;
}
/**
 * Initialises a new ACL Rule that grants some access - but does not yet specify to whom.
 *
 * @hidden This is an internal utility function that should not be used directly by downstreams.
 * @param access Access mode that this Rule will grant
 */


function internal_initialiseAclRule(access) {
  let newRule = createThing();
  newRule = setIri(newRule, rdf.type, acl.Authorization);

  if (access.read) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.read);
  }

  if (access.append && !access.write) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.append);
  }

  if (access.write) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.write);
  }

  if (access.control) {
    newRule = addIri(newRule, acl.mode, internal_accessModeIriStrings.control);
  }

  return newRule;
}
/**
 * Creates a new ACL Rule with the same ACL values as the input ACL Rule, but having a different IRI.
 *
 * Note that non-ACL values will not be copied over.
 *
 * @hidden This is an internal utility function that should not be used directly by downstreams.
 * @param sourceRule ACL rule to duplicate.
 */


function internal_duplicateAclRule(sourceRule) {
  let targetRule = createThing();
  targetRule = setIri(targetRule, rdf.type, acl.Authorization);

  function copyIris(inputRule, outputRule, predicate) {
    return getIriAll(inputRule, predicate).reduce((outputRule, iriTarget) => addIri(outputRule, predicate, iriTarget), outputRule);
  }

  targetRule = copyIris(sourceRule, targetRule, acl.accessTo);
  targetRule = copyIris(sourceRule, targetRule, acl.default);
  targetRule = copyIris(sourceRule, targetRule, acl.defaultForNew);
  targetRule = copyIris(sourceRule, targetRule, acl.agent);
  targetRule = copyIris(sourceRule, targetRule, acl.agentGroup);
  targetRule = copyIris(sourceRule, targetRule, acl.agentClass);
  targetRule = copyIris(sourceRule, targetRule, acl.origin);
  targetRule = copyIris(sourceRule, targetRule, acl.mode);
  return targetRule;
}

function internal_setAcl(resource, acl) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acl: acl
  });
}

const supportedActorPredicates = [acl.agent, acl.agentClass, acl.agentGroup, acl.origin];
/**
 * Given an ACL Rule, returns two new ACL Rules that cover all the input Rule's use cases,
 * except for giving the given Actor access to the given Resource.
 *
 * @param rule The ACL Rule that should no longer apply for a given Actor to a given Resource.
 * @param actor The Actor that should be removed from the Rule for the given Resource.
 * @param resourceIri The Resource to which the Rule should no longer apply for the given Actor.
 * @returns A tuple with the original ACL Rule without the given Actor, and a new ACL Rule for the given Actor for the remaining Resources, respectively.
 */

function internal_removeActorFromRule(rule, actor, actorPredicate, resourceIri, ruleType) {
  // If the existing Rule does not apply to the given Actor, we don't need to split up.
  // Without this check, we'd be creating a new rule for the given Actor (ruleForOtherTargets)
  // that would give it access it does not currently have:
  if (!getIriAll(rule, actorPredicate).includes(actor)) {
    const emptyRule = internal_initialiseAclRule({
      read: false,
      append: false,
      write: false,
      control: false
    });
    return [rule, emptyRule];
  } // The existing rule will keep applying to Actors other than the given one:


  const ruleWithoutActor = removeIri(rule, actorPredicate, actor); // The actor might have been given other access in the existing rule, so duplicate it...

  let ruleForOtherTargets = internal_duplicateAclRule(rule); // ...but remove access to the original Resource...

  ruleForOtherTargets = removeIri(ruleForOtherTargets, ruleType === "resource" ? acl.accessTo : acl.default, resourceIri); // Prevents the legacy predicate 'acl:defaultForNew' to lead to privilege escalation

  if (ruleType === "default") {
    ruleForOtherTargets = removeIri(ruleForOtherTargets, acl.defaultForNew, resourceIri);
  } // ...and only apply the new Rule to the given Actor (because the existing Rule covers the others):


  ruleForOtherTargets = setIri(ruleForOtherTargets, actorPredicate, actor);
  supportedActorPredicates.filter(predicate => predicate !== actorPredicate).forEach(predicate => {
    ruleForOtherTargets = removeAll(ruleForOtherTargets, predicate);
  });
  return [ruleWithoutActor, ruleForOtherTargets];
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Actor's access.
 *
 * If rules for Actor's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Actors through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Actors for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param actor The Actor to grant specific Access Modes.
 * @param access The Access Modes to grant to the Actor for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function internal_setActorAccess$1(aclDataset, access, actorPredicate, accessType, actor) {
  // First make sure that none of the pre-existing rules in the given ACL SolidDataset
  // give the Agent access to the Resource:
  let filteredAcl = aclDataset;
  getThingAll(aclDataset).forEach(aclRule => {
    // Obtain both the Rule that no longer includes the given Actor,
    // and a new Rule that includes all ACL Quads
    // that do not pertain to the given Actor-Resource combination.
    // Note that usually, the latter will no longer include any meaningful statements;
    // we'll clean them up afterwards.
    const [filteredRule, remainingRule] = internal_removeActorFromRule(aclRule, actor, actorPredicate, aclDataset.internal_accessTo, accessType);
    filteredAcl = setThing(filteredAcl, filteredRule);
    filteredAcl = setThing(filteredAcl, remainingRule);
  }); // Create a new Rule that only grants the given Actor the given Access Modes:

  let newRule = internal_initialiseAclRule(access);
  newRule = setIri(newRule, accessType === "resource" ? acl.accessTo : acl.default, aclDataset.internal_accessTo);
  newRule = setIri(newRule, actorPredicate, actor);
  const updatedAcl = setThing(filteredAcl, newRule); // Remove any remaining Rules that do not contain any meaningful statements:

  return internal_removeEmptyAclRules(updatedAcl);
}

function internal_setResourceAcl(resource, acl) {
  const newAcl = {
    resourceAcl: acl,
    fallbackAcl: null
  };
  return internal_setAcl(resource, newAcl);
}

function internal_getResourceAcl(resource) {
  return resource.internal_acl.resourceAcl;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verify whether a given SolidDataset was fetched together with its Access Control List.
 *
 * @param dataset A [[SolidDataset]] that may have its ACLs attached.
 * @returns True if `dataset` was fetched together with its ACLs.
 */


function hasAcl(dataset) {
  const potentialAcl = dataset;
  return typeof potentialAcl.internal_acl === "object";
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verifies whether the given Resource has a resource ACL (Access Control List) attached.
 *
 * The [[hasResourceAcl]] function checks that:
 * - a given Resource has a resource ACL attached, and
 * - the user calling [[hasResourceAcl]] has Control access to the Resource.
 *
 * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].
 *
 * @param resource A Resource that might have an ACL attached.
 * @returns `true` if the Resource has a resource ACL attached that is accessible by the user.
 */


function hasResourceAcl(resource) {
  return resource.internal_acl.resourceAcl !== null && getSourceUrl(resource) === resource.internal_acl.resourceAcl.internal_accessTo && resource.internal_resourceInfo.aclUrl === getSourceUrl(resource.internal_acl.resourceAcl);
}
/**
 * Experimental: fetch a SolidDataset and its associated Access Control List.
 *
 * This is an experimental function that fetches both a Resource, the linked ACL Resource (if
 * available), and the ACL that applies to it if the linked ACL Resource is not available. This can
 * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to
 * provide this info in a single request. Therefore, and because this function is still
 * experimental, prefer [[getSolidDataset]] instead.
 *
 * If the Resource does not advertise the ACL Resource (because the authenticated user does not have
 * access to it), the `acl` property in the returned value will be null. `acl.resourceAcl` will be
 * undefined if the Resource's linked ACL Resource could not be fetched (because it does not exist),
 * and `acl.fallbackAcl` will be null if the applicable Container's ACL is not accessible to the
 * authenticated user.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and the ACLs that apply to it, if available to the authenticated user.
 */


async function getSolidDatasetWithAcl(url, options = internal_defaultFetchOptions) {
  const solidDataset = await getSolidDataset(url, options);
  const acl = await internal_fetchAcl(solidDataset, options);
  return internal_setAcl(solidDataset, acl);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieves a file, its resource ACL (Access Control List) if available,
 * and its fallback ACL from a URL and returns them as a blob.
 *
 * If the user calling the function does not have access to the file's resource ACL,
 * [[hasAccessibleAcl]] on the returned blob returns false.
 * If the user has access to the file's resource ACL but the resource ACL does not exist,
 * [[getResourceAcl]] on the returned blob returns null.
 * If the fallback ACL is inaccessible by the user,
 * [[getFallbackAcl]] on the returned blob returns null.
 *
 * ```{tip}
 * To retrieve the ACLs, the function results in multiple HTTP requests rather than a single
 * request as mandated by the Solid spec. As such, prefer [[getFile]] instead if you do not need the ACL.
 * ```
 *
 * @param url The URL of the fetched file
 * @param options Fetching options: a custom fetcher and/or headers.
 * @returns A file and its ACLs, if available to the authenticated user, as a blob.
 * @since 0.2.0
 */


async function getFileWithAcl(input, options = internal_defaultFetchOptions) {
  const file = await getFile(input, options);
  const acl = await internal_fetchAcl(file, options);
  return internal_setAcl(file, acl);
}
/**
 * Experimental: fetch a Resource's metadata and its associated Access Control List.
 *
 * This is an experimental function that fetches both a Resource's metadata, the linked ACL Resource (if
 * available), and the ACL that applies to it if the linked ACL Resource is not available (if accessible). This can
 * result in many HTTP requests being executed, in lieu of the Solid spec mandating servers to
 * provide this info in a single request.
 *
 * If the Resource's linked ACL Resource could not be fetched (because it does not exist, or because
 * the authenticated user does not have access to it), `acl.resourceAcl` will be `null`. If the
 * applicable Container's ACL is not accessible to the authenticated user, `acl.fallbackAcl` will be
 * `null`.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A Resource's metadata and the ACLs that apply to the Resource, if available to the authenticated user.
 */


async function getResourceInfoWithAcl(url, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfo(url, options);
  const acl = await internal_fetchAcl(resourceInfo, options);
  return internal_setAcl(resourceInfo, acl);
}

function getResourceAcl(resource) {
  if (!hasResourceAcl(resource)) {
    return null;
  }

  return resource.internal_acl.resourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Verifies whether the given Resource has a fallback ACL (Access Control List) attached.
 *
 * A fallback ACL for a Resource is inherited from the Resource's parent Container
 * (or another of its ancestor Containers) and applies if the Resource does
 * not have its own resource ACL.
 *
 * The [[hasFallbackAcl]] function checks that:
 * - a given Resource has a fallback ACL attached, and
 * - the user calling [[hasFallbackAcl]] has Control access to the Container
 * from which the Resource inherits its ACL.
 *
 * To retrieve a Resource with its ACLs, see [[getSolidDatasetWithAcl]].
 *
 * @param resource A [[SolidDataset]] that might have a fallback ACL attached.
 *
 * @returns `true` if the Resource has a fallback ACL attached that is accessible to the user.
 */


function hasFallbackAcl(resource) {
  return resource.internal_acl.fallbackAcl !== null;
}

function getFallbackAcl(dataset) {
  if (!hasFallbackAcl(dataset)) {
    return null;
  }

  return dataset.internal_acl.fallbackAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Creates an empty resource ACL (Access Control List) for a given Resource.
 *
 * @param targetResource A Resource that does not have its own ACL yet (see [[hasResourceAcl]]).
 * @returns An empty resource ACL for the given Resource.
 */


function createAcl(targetResource) {
  const emptyResourceAcl = freeze(Object.assign(Object.assign({}, createSolidDataset()), {
    internal_accessTo: getSourceUrl(targetResource),
    internal_resourceInfo: {
      sourceIri: targetResource.internal_resourceInfo.aclUrl,
      isRawData: false,
      linkedResources: {}
    }
  }));
  return emptyResourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Creates a resource ACL (Access Control List), initialised from the fallback ACL
 * inherited from the given Resource's Container (or another of its ancestor Containers).
 * That is, the new ACL has the same rules/entries as the fallback ACL that currently
 * applies to the Resource.
 *
 * @param resource A Resource without its own resource ACL (see [[hasResourceAcl]]) but with an accessible fallback ACL (see [[hasFallbackAcl]]).
 * @returns A resource ACL initialised with the rules/entries from the Resource's fallback ACL.
 */


function createAclFromFallbackAcl(resource) {
  const emptyResourceAcl = createAcl(resource);
  const fallbackAclRules = internal_getAclRules(resource.internal_acl.fallbackAcl);
  const defaultAclRules = internal_getDefaultAclRulesForResource(fallbackAclRules, resource.internal_acl.fallbackAcl.internal_accessTo);
  const newAclRules = defaultAclRules.map(rule => {
    rule = removeAll(rule, acl.default);
    rule = removeAll(rule, acl.defaultForNew);
    rule = setIri(rule, acl.accessTo, getSourceUrl(resource));
    rule = setIri(rule, acl.default, getSourceUrl(resource));
    return rule;
  }); // Iterate over every ACL Rule we want to import, inserting them into `emptyResourceAcl` one by one:

  const initialisedResourceAcl = newAclRules.reduce(setThing, emptyResourceAcl);
  return initialisedResourceAcl;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Saves the resource ACL for a Resource.
 *
 * @param resource The Resource to which the given resource ACL applies.
 * @param resourceAcl An [[AclDataset]] whose ACL Rules will apply to `resource`.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 */


async function saveAclFor(resource, resourceAcl, options = internal_defaultFetchOptions) {
  if (!hasAccessibleAcl(resource)) {
    throw new Error(`Could not determine the location of the ACL for the Resource at [${getSourceUrl(resource)}]; possibly the current user does not have Control access to that Resource. Try calling \`hasAccessibleAcl()\` before calling \`saveAclFor()\`.`);
  }

  const savedDataset = await saveSolidDatasetAt(resource.internal_resourceInfo.aclUrl, resourceAcl, options);
  const savedAclDataset = Object.assign(Object.assign({}, savedDataset), {
    internal_accessTo: getSourceUrl(resource)
  });
  return savedAclDataset;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the resource ACL (Access Control List) from a Resource.
 *
 * Once the resource ACL is removed from the Resource, the Resource relies on the
 * fallback ACL inherited from the Resource's parent Container (or another of its ancestor Containers).
 *
 * @param resource The Resource for which you want to delete the ACL.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 */


async function deleteAclFor(resource, options = internal_defaultFetchOptions) {
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const response = await config.fetch(resource.internal_resourceInfo.aclUrl, {
    method: "DELETE"
  });

  if (!response.ok) {
    throw new Error(`Deleting the ACL of the Resource at [${getSourceUrl(resource)}] failed: [${response.status}] [${response.statusText}].`);
  }

  const storedResource = Object.assign(internal_cloneResource(resource), {
    acl: {
      resourceAcl: null
    }
  });
  return storedResource;
}
/**
 * Given a [[SolidDataset]], verify whether its Access Control List is accessible to the current user.
 *
 * This should generally only be true for SolidDatasets fetched by
 * [[getSolidDatasetWithAcl]].
 *
 * Please note that the Web Access Control specification is not yet finalised, and hence, this
 * function is still experimental and can change in a non-major release.
 *
 * @param dataset A [[SolidDataset]].
 * @returns Whether the given `dataset` has a an ACL that is accessible to the current user.
 */


function hasAccessibleAcl(dataset) {
  return typeof dataset.internal_resourceInfo.aclUrl === "string";
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns an Agent's explicitly-granted Access Modes for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Agent through other
 * ACL rules, e.g., public or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to the Agent for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).
 */


function getAgentAccess$2(resourceInfo, agent) {
  if (hasResourceAcl(resourceInfo)) {
    return getAgentResourceAccess(resourceInfo.internal_acl.resourceAcl, agent);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getAgentDefaultAccess(resourceInfo.internal_acl.fallbackAcl, agent);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Returns all explicitly-granted Access Modes per Agent for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to Agents through other
 * ACL rules, e.g., public or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which Agents may have been granted access.
 * @returns Access Modes per Agent that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control access to a given Resource or its Container).
 */


function getAgentAccessAll$2(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    const resourceAcl = getResourceAcl(resourceInfo);
    return getAgentResourceAccessAll(resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    const fallbackAcl = getFallbackAcl(resourceInfo);
    return getAgentDefaultAccessAll(fallbackAcl);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes explicitly granted to an Agent for the Resource
 * associated with an ACL (Access ControlList).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to the Agent for the child Resources if the associated Resource is a Container (see [[getAgentDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains ACL rules.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to an Agent for the Resource associated with an ACL SolidDataset.
 */


function getAgentResourceAccess(aclDataset, agent) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);
  const agentAccessModes = agentResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(agentAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the explicitly granted Access Modes per Agent for the Resource associated
 * with an ACL (Access Control List).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.
 *
 * @param aclDataset The SolidDataset that contains ACL rules.
 * @returns Access Modes per Agent that have been explicitly granted for the Resource associated with an ACL SolidDataset.
 */


function getAgentResourceAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRules(resourceRules);
  return getAccessByAgent(agentResourceRules);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Agent.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Agent's access.
 *
 * If rules for Agent's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Agents through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to Agents for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param agent The Agent to grant specific Access Modes.
 * @param access The Access Modes to grant to the Agent for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function setAgentResourceAccess$1(aclDataset, agent, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agent, "resource", agent);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns an Agent's Access Modes explicitly granted for the children of the
 * Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g. public or group-specific permissions.
 * - Access Modes granted to the Agent for the Container Resource itself (see [[getAgentResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules for a certain Container.
 * @param agent WebID of the Agent for which to retrieve what access it has to the Container's children.
 * @returns Access Modes that have been explicitly granted to an Agent for the children of the Container associated with the given ACL.
 */


function getAgentDefaultAccess(aclDataset, agent) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRulesForAgent(resourceRules, agent);
  const agentAccessModes = agentResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(agentAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes, per Agent, that have been explicitly granted for the children
 * of the Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 *
 * - Access Modes granted indirectly to the Agents through other ACL rules, e.g. public or group-specific permissions.
 * - Access Modes granted to the Agents for the Container Resource itself (see [[getAgentResourceAccessAll]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @returns Access Modes, per Agent, that have been explicitly granted for the children of the Container associated with the given ACL.
 */


function getAgentDefaultAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const agentResourceRules = getAgentAclRules(resourceRules);
  return getAccessByAgent(agentResourceRules);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set an Agent's Access Modes for the Container's children.
 * Specifically, the function returns a new default ACL initialised with the given ACL and
 * new rules for the Agent's access.
 *
 * If rules already exist for the Agent in the given ACL, in the returned ACL, they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted indirectly to the Agent through other ACL rules, e.g., public or group-specific permissions.
 * - Access Modes granted to the Agent for the Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param agent The Agent to grant specific Access Modes.
 * @param access The Access Modes to grant to the Agent.
 * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `agent`.
 */


function setAgentDefaultAccess(aclDataset, agent, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agent, "default", agent);
}

function getAgentAclRulesForAgent(aclRules, agent) {
  return internal_getAclRulesForIri(aclRules, agent, acl.agent);
}

function getAgentAclRules(aclRules) {
  return aclRules.filter(isAgentAclRule);
}

function isAgentAclRule(aclRule) {
  return getIri(aclRule, acl.agent) !== null;
}

function getAccessByAgent(aclRules) {
  return internal_getAccessByIri(aclRules, acl.agent);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Returns a Group's explicity-granted Access Modes for a given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Group through other
 * ACL rules, e.g., public permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Group may have been granted access.
 * @param group URL of the Group for which to retrieve what access it has to the Resource.
 * @returns Access Modes that have been explicitly granted to the `group` for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getGroupAccess$2(resourceInfo, group) {
  if (hasResourceAcl(resourceInfo)) {
    return getGroupResourceAccess(resourceInfo.internal_acl.resourceAcl, group);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getGroupDefaultAccess(resourceInfo.internal_acl.fallbackAcl, group);
  }

  return null;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns all explicitly-granted Access Modes per Group for the given Resource.
 *
 * The function does not return Access Modes granted indirectly to the Group through other
 * ACL rules, e.g., public permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Group may have been granted access.
 * @returns Access Modes per Group that have been explicitly granted for the given Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getGroupAccessAll$2(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    const resourceAcl = getResourceAcl(resourceInfo);
    return getGroupResourceAccessAll(resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    const fallbackAcl = getFallbackAcl(resourceInfo);
    return getGroupDefaultAccessAll(fallbackAcl);
  }

  return null;
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes explicitly granted to a Group for the Resource
 * associated with an ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.
 * - Access Modes granted to the Group for the child Resources if the associated Resource is a Container
 *   (see [[getGroupDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param group URL of the Group for which to retrieve what access it has to the Resource.
 * @returns Access Modes explicitly granted to a Group for the Resource associated with an ACL.
 */


function getGroupResourceAccess(aclDataset, group) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const groupResourceRules = getGroupAclRuleForGroup(resourceRules, group);
  const groupAccessModes = groupResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(groupAccessModes);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the explicitly granted Access Modes per Group for the Resource associated
 * with an ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public permissions.
 * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @returns Access Modes per Group that have been explicitly granted for the Resource associated with an ACL.
 */


function getGroupResourceAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  return getAccessByGroup(resourceRules);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns a Group's Access Modes explicitly granted for the children of the
 * Container associated with an ACL (Access ControlList).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g. public permissions.
 * - Access Modes granted to the Group for the Container Resource itself (see [[getGroupResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains ACL rules for a certain Container.
 * @param group URL of the Group for which to retrieve what access it has to the child Resources of the given Container.
 * @returns Access Modes that have been explicitly granted to the Group for the children of the Container associated with the given ACL.
 */


function getGroupDefaultAccess(aclDataset, group) {
  const allRules = internal_getAclRules(aclDataset);
  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const groupDefaultRules = getGroupAclRuleForGroup(defaultRules, group);
  const groupAccessModes = groupDefaultRules.map(internal_getAccess);
  return internal_combineAccessModes(groupAccessModes);
}
/**
 * ```{note} This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes, per Group, that have been explicitly granted for the children
 * of the Container associated with the given ACL (Access Control List).
 *
 * The function does not return:
 * - Access Modes granted indirectly to the Groups through other ACL rules, e.g. public permissions.
 * - Access Modes granted to the Groups for the Container Resource itself (see [[getGroupResourceAccessAll]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.
 * @returns Access Modes per Group that have been explicitly granted for the children of the Container associated with the given ACL SolidDataset.
 */


function getGroupDefaultAccessAll(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const defaultRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  return getAccessByGroup(defaultRules);
}

function getGroupAclRuleForGroup(rules, group) {
  return internal_getAclRulesForIri(rules, group, acl.agentGroup);
}

function getAccessByGroup(aclRules) {
  return internal_getAccessByIri(aclRules, acl.agentGroup);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the given Group.
 * Specifically, the function returns a new resource ACL initialised with the given ACL and
 * new rules for the Group's access.
 *
 * If rules for Groups's access already exist in the given ACL, in the returned ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 *
 * - Access Modes granted indirectly to Groups through other ACL rules, e.g., public or Agent-specific permissions.
 * - Access Modes granted to Groups for the child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param group The Group to grant specific Access Modes.
 * @param access The Access Modes to grant to the Group for the Resource.
 * @returns A new resource ACL initialised with the given `aclDataset` and `access` for the `group`.
 * @since 1.4.0
 */


function setGroupResourceAccess$1(aclDataset, group, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agentGroup, "resource", group);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set a Group's Access Modes for the Container's children.
 * Specifically, the function returns a new default ACL initialised with the given ACL and
 * new rules for the Group's access.
 *
 * If rules already exist for the Group in the given ACL, in the returned ACL, they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted indirectly to the Group through other ACL rules, e.g., public or Agent-specific permissions.
 * - Access Modes granted to the Group for the Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access-Control List rules.
 * @param group The Group to grant specific Access Modes.
 * @param access The Access Modes to grant to the Group.
 * @returns A new default ACL initialised with the given `aclDataset` and `access` for the `group`.
 * @since 1.4.0
 */


function setGroupDefaultAccess(aclDataset, group, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agentGroup, "default", group);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for a Resource.
 *
 * This function does not return Access Modes granted to specific Agents
 * through other ACL (Access Control List) rules, e.g., agent- or group-specific permissions.
 *
 * @param resourceInfo Information about the Resource to which the given Agent may have been granted access.
 * @returns Access Modes granted to the public in general for the Resource, or `null` if it could not be determined (e.g. because the current user does not have Control Access to a given Resource or its Container).
 */


function getPublicAccess$2(resourceInfo) {
  if (hasResourceAcl(resourceInfo)) {
    return getPublicResourceAccess(resourceInfo.internal_acl.resourceAcl);
  }

  if (hasFallbackAcl(resourceInfo)) {
    return getPublicDefaultAccess(resourceInfo.internal_acl.fallbackAcl);
  }

  return null;
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for the Resource
 * associated with an ACL (Access Control List).
 *
 * This function does not return:
 * - Access Modes granted to specific Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to child Resources if the associated Resource is a Container (see [[getPublicDefaultAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @returns Access Modes granted to the public in general for the Resource associated with the `aclDataset`.
 */


function getPublicResourceAccess(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getResourceAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);
  const publicAccessModes = publicResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(publicAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Returns the Access Modes granted to the public in general for the child Resources
 * of the Container associated with an ACL (Access Control List).
 *
 * This function does not return:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to the Container Resource itself (see [[getPublicResourceAccess]] instead).
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules for a certain Container.
 * @returns Access Modes granted to the public in general for the children of the Container associated with the given `aclDataset`.
 */


function getPublicDefaultAccess(aclDataset) {
  const allRules = internal_getAclRules(aclDataset);
  const resourceRules = internal_getDefaultAclRulesForResource(allRules, aclDataset.internal_accessTo);
  const publicResourceRules = getClassAclRulesForClass(resourceRules, foaf.Agent);
  const publicAccessModes = publicResourceRules.map(internal_getAccess);
  return internal_combineAccessModes(publicAccessModes);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the resource ACL (Access Control List) to set the Access Modes for the public.
 * Specifically, the function returns a new resource ACL (Access Control List) initialised
 * with the given resource ACL and new rules for the given public access.
 *
 * If rules for public access already exist in the given ACL, in the *returned* ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to child Resources if the associated Resource is a Container.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param access The Access Modes to grant to the public.
 * @returns A new resource ACL initialised with the given `aclDataset` and public `access`.
 */


function setPublicResourceAccess$1(aclDataset, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agentClass, "resource", foaf.Agent);
}
/**
 * ```{note}
 * This function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Modifies the default ACL (Access Control List) to set the public's default Access Modes
 * to child resources. Specifically, the function returns a new default ACL initialised
 * with the given default ACL and new rules for the given public access.
 *
 * If rules for public access already exist in the given ACL, in the *returned* ACL,
 * they are replaced by the new rules.
 *
 * This function does not modify:
 * - Access Modes granted to Agents through other ACL rules, e.g., agent- or group-specific permissions.
 * - Access Modes to Container Resource itself.
 * - The original ACL.
 *
 * @param aclDataset The SolidDataset that contains Access Control List rules.
 * @param access The Access Modes to grant to the public.
 * @returns A new default ACL initialised with the given `aclDataset` and public `access`.
 */


function setPublicDefaultAccess(aclDataset, access) {
  return internal_setActorAccess$1(aclDataset, access, acl.agentClass, "default", foaf.Agent);
}

function getClassAclRulesForClass(aclRules, agentClass) {
  return aclRules.filter(rule => appliesToClass(rule, agentClass));
}

function appliesToClass(aclRule, agentClass) {
  return getIriAll(aclRule, acl.agentClass).includes(agentClass);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function setMockAclUrl(resource, aclUrl) {
  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {
    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {
      aclUrl: aclUrl
    })
  });
  return resourceWithAclUrl;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{warning}
 * Do not use this function in production code. For use in **unit tests** that
 * require a [[SolidDataset]] with a resource ACL (Access Control List).
 * ```
 *
 * Initialises a new empty ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getResourceAcl]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 0.2.0
 */


function addMockResourceAclTo(resource) {
  var _a;

  const aclUrl = (_a = resource.internal_resourceInfo.aclUrl) !== null && _a !== void 0 ? _a : "https://your.pod/mock-acl.ttl";
  const resourceWithAclUrl = Object.assign(internal_cloneResource(resource), {
    internal_resourceInfo: Object.assign(Object.assign({}, resource.internal_resourceInfo), {
      aclUrl: aclUrl
    })
  });
  const aclDataset = createAcl(resourceWithAclUrl);
  const resourceWithResourceAcl = internal_setAcl(resourceWithAclUrl, {
    resourceAcl: aclDataset,
    fallbackAcl: null
  });
  return resourceWithResourceAcl;
}
/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[SolidDataset]] with a fallback ACL (Access Control List).
 * ```
 *
 * Initialises a new empty fallback ACL and attaches it to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getFallbackAcl]].
 *
 * @param resource The Resource to mock up with new fallback ACL.
 * @returns The input Resource with an empty fallback ACL attached.
 * @since 0.2.0
 */


function addMockFallbackAclTo(resource) {
  const containerUrl = internal_getContainerPath(getSourceIri(resource));
  const aclUrl = containerUrl + ".acl";
  const mockContainer = setMockAclUrl(mockContainerFrom(containerUrl), aclUrl);
  const aclDataset = createAcl(mockContainer);
  const resourceWithFallbackAcl = internal_setAcl(internal_cloneResource(resource), {
    resourceAcl: null,
    fallbackAcl: aclDataset
  });
  return resourceWithFallbackAcl;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const rdfJsDataset = _dataset.default.dataset;
/**
 * Convert an RDF/JS Dataset into a [[SolidDataset]]
 *
 * Parse an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore},
 * into a [[SolidDataset]]. Note that, when saving the returned SolidDataset to
 * a Solid Pod, only Quads in the Default Graph will be stored.
 *
 * @param rdfJsDataset The source RDF/JS Dataset.
 * @returns A [[SolidDataset]] containing the same data as the given RDF/JS Dataset.
 * @since 1.9.0
 */

function fromRdfJsDataset(rdfJsDataset) {
  const dataset = {
    graphs: {
      default: {}
    },
    type: "Dataset"
  };
  const quads = Array.from(rdfJsDataset);
  const chainBlankNodes = getChainBlankNodes(quads); // Quads with chain Blank Nodes as their Subject will be parsed when those
  // Blank Nodes are referred to in an Object. See `addRdfJsQuadToObjects`.

  const quadsWithoutChainBlankNodeSubjects = quads.filter(quad => chainBlankNodes.every(chainBlankNode => !chainBlankNode.equals(quad.subject)));
  return quadsWithoutChainBlankNodeSubjects.reduce((datasetAcc, quad) => addRdfJsQuadToDataset(datasetAcc, quad, {
    otherQuads: quads,
    chainBlankNodes: chainBlankNodes
  }), dataset);
}
/**
 * Convert a [[SolidDataset]] into an RDF/JS Dataset
 *
 * Export a [[SolidDataset]] into an RDF/JS
 * {@link https://rdf.js.org/dataset-spec/#datasetcore-interface DatasetCore}.
 *
 * @param set A [[SolidDataset]] to export into an RDF/JS Dataset.
 * @param options Optional parameter that allows you to pass in your own RDF/JS DataFactory or DatasetCoreFactory.
 * @returns An RDF/JS Dataset containing the data from the given SolidDataset.
 * @since 1.9.0
 */


function toRdfJsDataset(set, options = {}) {
  var _a, _b;

  const datasetFactory = (_b = (_a = options.datasetFactory) === null || _a === void 0 ? void 0 : _a.dataset) !== null && _b !== void 0 ? _b : rdfJsDataset;
  return datasetFactory(toRdfJsQuads(set, options));
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/** @hidden */


function internal_getAcr(resource) {
  if (!hasAccessibleAcr(resource)) {
    throw new Error(`An Access Control Resource for [${getSourceUrl(resource)}] is not available. This could be because the current user is not allowed to see it, or because their Pod Server does not support Access Control Resources.`);
  }

  return resource.internal_acp.acr;
}
/** @hidden */


function internal_setAcr(resource, acr) {
  return Object.assign(internal_cloneResource(resource), {
    internal_acp: Object.assign(Object.assign({}, resource.internal_acp), {
      acr: acr
    })
  });
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new [[Control]].
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_createControl(options) {
  let control = createThing(options);
  control = setIri(control, rdf.type, acp.AccessControl);
  return control;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Find an [[Control]] with a given URL in a given Resource with an Access Control Resource.
 *
 * @returns The requested Access Control, or `null` if it could not be found.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_getControl(withAccessControlResource, url, options) {
  const acr = internal_getAcr(withAccessControlResource);
  const foundThing = getThing(acr, url, options);

  if (foundThing === null || !getIriAll(foundThing, rdf.type).includes(acp.AccessControl)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[Control]]s in the Access Control Resource of a given Resource.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_getControlAll(withAccessControlResource, options) {
  const acr = internal_getAcr(withAccessControlResource);
  const foundThings = getThingAll(acr, options);
  return foundThings.filter(foundThing => getIriAll(foundThing, rdf.type).includes(acp.AccessControl));
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert an [[Control]] into the [[AccessControlResource]] of a Resource, replacing previous
 * instances of that Access Control.
 *
 * @param withAccessControlResource A Resource with the Access Control Resource into which to insert an Access Control.
 * @param control The Control to insert into the Access Control Resource.
 * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, but with the given Access Control.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */


function internal_setControl(withAccessControlResource, control) {
  const acr = internal_getAcr(withAccessControlResource);
  const updatedAcr = setThing(acr, control);
  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an [[Control]] such that that Policy applies to the Resource to which
 * the [[Control]] is linked.
 *
 * @param accessControl The [[Control]] to which the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_addPolicyUrl(accessControl, policyUrl) {
  return addIri(accessControl, acp.apply, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all Policies that apply to the Resource to which the given [[Control]] is linked, and
 * which can be removed by anyone with Write access to the Access Control Resource that contains the
 * [[Control]].
 *
 * @param accessControl The [[Control]] of which to get the Policies.
 * @returns The Policies that are listed in this [[Control]] as applying to the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_getPolicyUrlAll(accessControl) {
  return getIriAll(accessControl, acp.apply);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove a given Policy that applies to the Resource to which the given [[Control]] is linked,
 * and which can be removed by anyone with Write access to the Access Control Resource that contains
 * the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Policies.
 * @param policyUrl URL of the Policy that should no longer apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given Policy removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removePolicyUrl(accessControl, policyUrl) {
  return removeIri(accessControl, acp.apply, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove all Policies that apply to the Resource to which the given [[Control]] is linked, and
 * which can be removed by anyone with Write access to the Access Control Resource that contains the
 * [[Control]].
 *
 * @param accessControl The [[Control]] of which to remove the Policies.
 * @returns A new [[Control]] equal to the given [[Control]], but with all Policies removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removePolicyUrlAll(accessControl) {
  return removeAll(accessControl, acp.apply);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an [[Control]] such that that Policy applies to the children of the
 * Resource to which the [[Control]] is linked.
 *
 * @param accessControl The [[Control]] to which the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the children of the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given policy added to it as a Member Policy.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_addMemberPolicyUrl(accessControl, policyUrl) {
  return addIri(accessControl, acp.applyMembers, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all Policies that apply to the children of the Resource to which the given [[Control]] is
 * linked, and which can be removed by anyone with Write access to the Access Control Resource that
 * contains the [[Control]].
 *
 * @param accessControl The [[Control]] of which to get the Policies.
 * @returns The Policies that are listed in this [[Control]] as applying to the children of the Resource it is linked to, and as removable by anyone with Write access to the Access Control Resource.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_getMemberPolicyUrlAll(accessControl) {
  return getIriAll(accessControl, acp.applyMembers);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove a given Policy that applies to the children of the Resource to which the given Access
 * Control is linked, and which can be removed by anyone with Write access to the Access Control
 * Resource that contains the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Member Policy.
 * @param policyUrl URL of the Member Policy that should no longer apply to the Resource to which the [[Control]] is linked.
 * @returns A new [[Control]] equal to the given [[Control]], but with the given Member Policy removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removeMemberPolicyUrl(accessControl, policyUrl) {
  return removeIri(accessControl, acp.applyMembers, policyUrl);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove all Policies that apply to the children of the Resource to which the given Access Control
 * is linked, and which can be removed by anyone with Write access to the Access Control Resource
 * that contains the Access Control.
 *
 * @param accessControl The [[Control]] of which to remove the Member Policies.
 * @returns A new [[Control]] equal to the given [[Control]], but with all Member Policies removed from it.
 * @hidden Developers don't need to care about working with Controls - they can just add Policies to the Resource directly.
 * @deprecated
 */


function internal_removeMemberPolicyUrlAll(accessControl) {
  return removeAll(accessControl, acp.applyMembers);
}

function internal_getInitialisedControl(resourceWithAcr) {
  const allControls = internal_getControlAll(resourceWithAcr);
  return allControls.length === 0 ? internal_createControl() : allControls[0];
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a Resource, check whether it is governed by Access Policies.
 * (Specifically, a Resource that is governed by Access Policies will refer to exactly one Access
 * Control Resource, and expose that to users who are allowed to see or modify access to the given
 * Resource.)
 *
 * @param resource Resource which may or may not be governed by Access Policies.
 * @returns True if the Resource refers to an Access Control Resource and is hence governed by Access Policies, or false if it does not.
 * @since 1.6.0
 */


function hasLinkedAcr(resource) {
  return hasServerResourceInfo(resource) && Array.isArray(resource.internal_resourceInfo.linkedResources[acp.accessControl]) && resource.internal_resourceInfo.linkedResources[acp.accessControl].length === 1;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to the Access
 * Control Resource itself, rather than the Resource it governs.
 *
 * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Access Control Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.
 * @since 1.6.0
 */


function addAcrPolicyUrl(resourceWithAcr, policyUrl) {
  var _a;

  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({
    url: acrUrl
  });
  acrThing = addIri(acrThing, acp.access, policyUrl);
  const updatedAcr = setThing(acr, acrThing);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to a Resource's Access Control Resource such that that
 * Policy applies to the Access Control Resources of child Resources.
 *
 * @param resourceWithAcr The Resource with an Access Control Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Access Control Resources of children of the Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy added to it.
 * @since 1.6.0
 */


function addMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {
  var _a;

  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  let acrThing = (_a = getThing(acr, acrUrl)) !== null && _a !== void 0 ? _a : createThing({
    url: acrUrl
  });
  acrThing = addIri(acrThing, acp.accessMembers, policyUrl);
  const updatedAcr = setThing(acr, acrThing);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to an Access Control Resource itself, rather than
 * to the Resource it governs.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.
 * @returns URLs of the Policies that govern access to the given Access Control Resource.
 * @since 1.6.0
 */


function getAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, acp.access);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to the Access Control Resources of the Resource's
 * children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.
 * @returns URLs of the Policies that govern access to the Access Control Resources of the given Resource's children.
 * @since 1.6.0
 */


function getMemberAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return [];
  }

  return getIriAll(acrThing, acp.accessMembers);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to an Access Control Resource itself.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to which the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given ACR Policy removed from it.
 * @since 1.6.0
 */


function removeAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeIri(acrThing, acp.access, policyUrl);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to the Access Control Resources of the
 * Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to whose children's ACRs the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given member ACR Policy removed from it.
 * @since 1.6.0
 */


function removeMemberAcrPolicyUrl(resourceWithAcr, policyUrl) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeIri(acrThing, acp.accessMembers, policyUrl);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to an Access Control Resource itself.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to which no more Policies should apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to it.
 * @since 1.6.0
 */


function removeAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeAll(acrThing, acp.access);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to the Access Control Resources of the Resource's
 * children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children's ACRs.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to its children's ACRs.
 * @since 1.6.0
 */


function removeMemberAcrPolicyUrlAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const acrThing = getThing(acr, acrUrl);

  if (acrThing === null) {
    return resourceWithAcr;
  }

  const updatedAcrThing = removeAll(acrThing, acp.accessMembers);
  const updatedAcr = setThing(acr, updatedAcrThing);
  return internal_setAcr(resourceWithAcr, updatedAcr);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to an Access Control Resource such that that [[Policy]] applies to that Resource.
 *
 * @param resourceWithAcr The Resource to which the ACR Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Resource.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy added to it.
 * @since 1.6.0
 */


function addPolicyUrl(resourceWithAcr, policyUrl) {
  const control = internal_getInitialisedControl(resourceWithAcr);
  const updatedControl = internal_addPolicyUrl(control, policyUrl);
  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a [[Policy]] to a Resource's Access Control Resource such that that
 * Policy applies to that Resource's children.
 *
 * @param resourceWithAcr The Resource to whose Access Control Resource the Policy should be added.
 * @param policyUrl URL of the Policy that should apply to the given Resource's children.
 * @returns A new Resource equal to the given Resource, but with the given Member Policy added to its Access Control Resource.
 * @since 1.6.0
 */


function addMemberPolicyUrl(resourceWithAcr, policyUrl) {
  const control = internal_getInitialisedControl(resourceWithAcr);
  const updatedControl = internal_addMemberPolicyUrl(control, policyUrl);
  const updatedResource = internal_setControl(resourceWithAcr, updatedControl);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to a Resource.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to it.
 * @returns URLs of the Policies that govern access to the given Resource.
 * @since 1.6.0
 */


function getPolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const policyUrlsByControl = controls.map(control => internal_getPolicyUrlAll(control));
  const uniquePolicyUrls = new Set();
  policyUrlsByControl.forEach(policyUrls => {
    policyUrls.forEach(url => uniquePolicyUrls.add(url));
  });
  return Array.from(uniquePolicyUrls);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the URLs of the Access Policies that apply to a Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource of which to get the URLs of the Policies that govern access to its children.
 * @returns URLs of the Policies that govern access to the given Resource's children.
 * @since 1.6.0
 */


function getMemberPolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const memberPolicyUrlsByControl = controls.map(control => internal_getMemberPolicyUrlAll(control));
  const uniquePolicyUrls = new Set();
  memberPolicyUrlsByControl.forEach(policyUrls => {
    policyUrls.forEach(url => uniquePolicyUrls.add(url));
  });
  return Array.from(uniquePolicyUrls);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to a Resource.
 *
 * @param resourceWithAcr The Resource, with its Access Control Resource, to which the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Policy removed from it.
 * @since 1.6.0
 */


function removePolicyUrl(resourceWithAcr, policyUrl) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removePolicyUrl(control, policyUrl));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop the URL of a given [[Policy]] from applying to the Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource to whose children the given URL of a Policy should no longer apply.
 * @param policyUrl The URL of the Policy that should no longer apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but with the given Member Policy removed from it.
 * @since 1.6.0
 */


function removeMemberPolicyUrl(resourceWithAcr, policyUrl) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removeMemberPolicyUrl(control, policyUrl));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to a Resource.
 *
 * @param resourceWithAcr The Resource, with its Access Control Resource, to which no more Policies should apply.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource.
 * @since 1.6.0
 */


function removePolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removePolicyUrlAll(control));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Stop all URL of Access Policies from applying to the Resource's children.
 *
 * @param resourceWithAcr The Resource with the Access Control Resource that should no longer apply Policies to its children.
 * @returns A Resource with a new Access Control Resource equal to the original ACR, but without any Policy applying to the Resource's children.
 * @since 1.6.0
 */


function removeMemberPolicyUrlAll(resourceWithAcr) {
  const controls = internal_getControlAll(resourceWithAcr);
  const updatedControls = controls.map(control => internal_removeMemberPolicyUrlAll(control));
  const updatedResource = updatedControls.reduce(internal_setControl, resourceWithAcr);
  return updatedResource;
}
/**
 * Gets a human-readable representation of the given [[Control]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param resourceWithAcr The Resource with an attached Access Control Resource of which you want to get a human-readable representation.
 * @since 1.6.0
 */


function acrAsMarkdown(resourceWithAcr) {
  let markdown = `# Access controls for ${getSourceUrl(resourceWithAcr)}\n`;
  const policyUrls = getPolicyUrlAll(resourceWithAcr);
  const memberPolicyUrls = getMemberPolicyUrlAll(resourceWithAcr);
  const acrPolicyUrls = getAcrPolicyUrlAll(resourceWithAcr);
  const memberAcrPolicyUrls = getMemberAcrPolicyUrlAll(resourceWithAcr);

  if (policyUrls.length === 0 && memberPolicyUrls.length === 0 && acrPolicyUrls.length === 0 && memberAcrPolicyUrls.length === 0) {
    markdown += "\n<no policies specified yet>\n";
  }

  if (policyUrls.length > 0) {
    markdown += "\nThe following policies apply to this resource:\n- ";
    markdown += policyUrls.join("\n- ") + "\n";
  }

  if (acrPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the access control resource for this resource:\n- ";
    markdown += acrPolicyUrls.join("\n- ") + "\n";
  }

  if (memberPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the children of this resource:\n- ";
    markdown += memberPolicyUrls.join("\n- ") + "\n";
  }

  if (memberAcrPolicyUrls.length > 0) {
    markdown += "\nThe following policies apply to the access control resources for children of this resource:\n- ";
    markdown += memberAcrPolicyUrls.join("\n- ") + "\n";
  }

  return markdown;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a SolidDataset and its associated Access Control Resource (if available to the current user).
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getSolidDatasetWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const solidDataset = await getSolidDataset(urlString, config);
  const acp = await fetchAcr(solidDataset, config);
  return Object.assign(Object.assign({}, solidDataset), acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a file and its associated Access Control Resource (if available to the current user).
 *
 * @param url URL of the file to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A file and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getFileWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const file = await getFile(urlString, config);
  const acp = await fetchAcr(file, config);
  return Object.assign(file, acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Retrieve information about a Resource and its associated Access Control Resource (if available to
 * the current user), without fetching the Resource itself.
 *
 * @param url URL of the Resource about which to fetch its information.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Metadata describing a Resource, and the ACR that applies to it, if available to the authenticated user.
 * @since 1.6.0
 */


async function getResourceInfoWithAcr(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const resourceInfo = await getResourceInfo(urlString, config);
  const acp = await fetchAcr(resourceInfo, config);
  return Object.assign(Object.assign({}, resourceInfo), acp);
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a SolidDataset, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the SolidDataset to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A SolidDataset and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getSolidDatasetWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const solidDataset = await getSolidDataset(urlString, config);

  if (hasAccessibleAcl(solidDataset)) {
    const acl = await internal_fetchAcl(solidDataset, config);
    return internal_setAcl(solidDataset, acl);
  } else {
    const acr = await fetchAcr(solidDataset, config);
    return Object.assign(Object.assign({}, solidDataset), acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch a File, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the File to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A File and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getFileWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const file = await getFile(urlString, config);

  if (hasAccessibleAcl(file)) {
    const acl = await internal_fetchAcl(file, config);
    return internal_setAcl(file, acl);
  } else {
    const acr = await fetchAcr(file, config);
    return Object.assign(file, acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Fetch information about a Resource, and:
 * - if the Resource is governed by an ACR: its associated Access Control Resource (if available to
 *                                          the current user), and all the Access Control Policies
 *                                          referred to therein, if available to the current user.
 * - if the Resource is governed by an ACL: its associated Resource ACL (if available to the current
 *                                          user), or its Fallback ACL if it does not exist.
 *
 * @param url URL of the Resource information about which to fetch.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns Information about a Resource and either the ACL access data or the ACR access data, if available to the current user.
 * @since 1.6.0
 */


async function getResourceInfoWithAccessDatasets(url, options = internal_defaultFetchOptions) {
  const urlString = internal_toIriString(url);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const resourceInfo = await getResourceInfo(urlString, config);

  if (hasAccessibleAcl(resourceInfo)) {
    const acl = await internal_fetchAcl(resourceInfo, config);
    return internal_setAcl(resourceInfo, acl);
  } else {
    const acr = await fetchAcr(resourceInfo, config);
    return Object.assign(Object.assign({}, resourceInfo), acr);
  }
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Save a Resource's Access Control Resource.
 *
 * @param resource Resource with an Access Control Resource that should be saved.
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @since 1.6.0
 */


async function saveAcrFor(resource, options = internal_defaultFetchOptions) {
  const acr = internal_getAcr(resource);
  const config = Object.assign(Object.assign({}, internal_defaultFetchOptions), options);
  const savedAcr = await saveSolidDatasetAt(getSourceUrl(acr), acr, config);
  return internal_setAcr(resource, savedAcr);
}
/**
 * @param resource Resource of which to check whether it has an Access Control Resource attached.
 * @returns Boolean representing whether the given Resource has an Access Control Resource attached for use in e.g. [[getPolicyUrlAll]].
 * @since 1.6.0
 */


function hasAccessibleAcr(resource) {
  return typeof resource.internal_acp === "object" && resource.internal_acp !== null && typeof resource.internal_acp.acr === "object" && resource.internal_acp.acr !== null;
}

async function fetchAcr(resource, options) {
  if (!hasLinkedAcr(resource)) {
    return {
      internal_acp: {
        acr: null
      }
    };
  }

  let acr;

  try {
    acr = await getSolidDataset( // Whereas a Resource can generally have multiple linked Resources for the same relation,
    // it can only have one Access Control Resource for that ACR to be valid.
    // Hence the accessing of [0] directly:
    resource.internal_resourceInfo.linkedResources[acp.accessControl][0], options);
  } catch (e) {
    return {
      internal_acp: {
        acr: null
      }
    };
  }

  const acrDataset = Object.assign(Object.assign({}, acr), {
    accessTo: getSourceUrl(resource)
  });
  const acpInfo = {
    internal_acp: {
      acr: acrDataset
    }
  };
  return acpInfo;
}
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * To make it easy to fetch all the relevant Access Policy Resources,
 * this function returns all referenced Access Policy Resources referenced in an
 * Access Control Resource.
 * In other words, if Access Controls refer to different Policies in the same
 * Access Policy Resource, this function will only return that Access Policy
 * Resource's URL once.
 *
 * @param withAcr A Resource with an Access Control Resource attached.
 * @returns List of all unique Access Policy Resources that are referenced in the given Access Control Resource.
 * @since 1.6.0
 */


function getReferencedPolicyUrlAll(withAcr) {
  const policyUrls = getPolicyUrlAll(withAcr).map(normalizeServerSideIri).concat(getMemberPolicyUrlAll(withAcr).map(normalizeServerSideIri)).concat(getAcrPolicyUrlAll(withAcr).map(normalizeServerSideIri)).concat(getMemberAcrPolicyUrlAll(withAcr).map(normalizeServerSideIri));
  const uniqueUrls = Array.from(new Set(policyUrls));
  return uniqueUrls;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * NOTE: Don't export for now (i.e. if exported, should this be `isAcpRule()` so
 * as not to clash with `isAclRule()`.
 *
 * @param thing the [[Thing]] to check to see if it's an ACP rule or not
 */


function isRule(thing) {
  return getIriAll(thing, rdf.type).includes(acp.Rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 *
 * Also see [[addAnyOfRuleUrl]] and [[addNoneOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addAllOfRuleUrl(policy, rule) {
  return addIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that refines the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeAllOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrites the rule refining the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is **not** present in **any** of the "All Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy requires.
 * @returns A new [[Policy]] clone of the original one, with the "All Of" rules replaced.
 * @since 1.6.0
 */


function setAllOfRuleUrl(policy, rule) {
  return setIri(policy, acp.allOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "All Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the "All Of" [[Rule]]s
 * @since 1.6.0
 */


function getAllOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.allOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 *
 * Also see [[addAllOfRuleUrl]] and [[addNoneOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addAnyOfRuleUrl(policy, rule) {
  return addIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that extends the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeAnyOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the rule extending the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "Any Of" rules,
 * they will be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy accepts.
 * @returns A new [[Policy]] clone of the original one, with the "Any Of" rules replaced.
 * @since 1.6.0
 */


function setAnyOfRuleUrl(policy, rule) {
  return setIri(policy, acp.anyOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "Any Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the "Any Of" [[Rule]]s
 * @since 1.6.0
 */


function getAnyOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.anyOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Add a rule that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the forbidden rules,
 * they will **not** be granted access.
 *
 * Also see [[addAllOfRuleUrl]] and [[addAnyOfRuleUrl]].
 *
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rule The rule to add to the policy.
 * @returns A new [[Policy]] clone of the original one, with the new rule added.
 * @since 1.6.0
 */


function addNoneOfRuleUrl(policy, rule) {
  return addIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes a rule that restricts the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the forbidden rules,
 * they will **not** be granted access.
 * @param policy The [[Policy]] from which the rule should be removed.
 * @param rule The rule to remove from the policy.
 * @returns A new [[Policy]] clone of the original one, with the rule removed.
 * @since 1.6.0
 */


function removeNoneOfRuleUrl(policy, rule) {
  return removeIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set the rules restrincting the scope of a given the [[Policy]]. If an agent
 * requesting access to a resource is present in **any** of the "None Of" rules,
 * they will not be granted access.
 * @param policy The [[Policy]] to which the rule should be added.
 * @param rules The rules the policy accepts.
 * @returns A new [[Policy]] clone of the original one, with the "Any Of" rules replaced.
 * @since 1.6.0
 */


function setNoneOfRuleUrl(policy, rule) {
  return setIri(policy, acp.noneOf, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the "None Of" [[Rule]]s for the given [[Policy]]
 * @param policy The [[policy]] from which the rules should be read.
 * @returns A list of the forbidden [[Rule]]s
 * @since 1.6.0
 */


function getNoneOfRuleUrlAll(policy) {
  return getIriAll(policy, acp.noneOf);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[Rule]].
 *
 * @param url URL that identifies this [[Rule]].
 * @since 1.6.0
 */


function createRule(url) {
  const stringUrl = internal_toIriString(url);
  let ruleThing = createThing({
    url: stringUrl
  });
  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);
  return ruleThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[ResourceRule]] for the given Resource.
 *
 * @param resourceWithAcr The Resource to which the new Rule is to apply.
 * @param name Name that identifies this [[Rule]].
 * @since 1.6.0
 */


function createResourceRuleFor(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const url = new URL(getSourceUrl(acr));
  url.hash = `#${name}`;
  let ruleThing = createThing({
    url: url.href
  });
  ruleThing = setUrl(ruleThing, rdf.type, acp.Rule);
  return ruleThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[Rule]] with the given URL from an [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains the given [[Rule]].
 * @param url URL that identifies this [[Rule]].
 * @returns The requested [[Rule]], if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getRule(ruleResource, url) {
  const foundThing = getThing(ruleResource, url);

  if (foundThing === null || getUrl(foundThing, rdf.type) !== acp.Rule) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourceRule]] with the given name from an Resource's Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains the given [[ResourceRule]].
 * @param name Name that identifies this [[ResourceRule]].
 * @returns The requested [[ResourceRule]], if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getResourceRule(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (foundThing === null || !isRule(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[Rule]]s from a [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns The [[Rule]]s contained in this resource.
 * @since 1.6.0
 */


function getRuleAll(ruleResource) {
  const things = getThingAll(ruleResource);
  return things.filter(isRule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Gets the [[ResourceRule]]s from a Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns The [[ResourceRule]]s contained in this Resource's Access Control Resource.
 * @since 1.6.0
 */


function getResourceRuleAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const things = getThingAll(acr);
  return things.filter(isRule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[Rule]] from the given [[SolidDataset]].
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns A new SolidDataset equal to the given Rule Resource, but without the given Rule.
 * @since 1.6.0
 */


function removeRule(ruleResource, rule) {
  return removeThing(ruleResource, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Removes the given [[ResourceRule]] from the given Resource's Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns A new Resource equal to the given Resource, but without the given Rule in its ACR.
 * @since 1.6.0
 */


function removeResourceRule(resourceWithAcr, rule) {
  const acr = internal_getAcr(resourceWithAcr);
  let ruleToRemove;

  if (typeof rule === "string") {
    try {
      new URL(rule);
      ruleToRemove = rule;
    } catch (e) {
      // If the given Rule to remove is the name of the Rule,
      // resolve it to its full URL — developers usually refer to either the
      // Rule itself, or by its name, as they do not have access to the ACR
      // directly.
      const ruleUrl = new URL(getSourceUrl(acr));
      ruleUrl.hash = `#${rule}`;
      ruleToRemove = ruleUrl.href;
    }
  } else if (isNamedNode(rule)) {
    ruleToRemove = internal_toIriString(rule);
  } else {
    ruleToRemove = asUrl(rule);
  } // Check whether the actual Rule (i.e. with the Rule type) exists:


  const matchingRule = getResourceRule(resourceWithAcr, new URL(ruleToRemove).hash.substring(1));

  if (matchingRule === null) {
    // No such Rule exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, matchingRule);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[Rule]] into the given [[SolidDataset]], replacing previous
 * instances of that Rule.
 *
 * @param ruleResource The Resource that contains (zero or more) [[Rule]]s.
 * @returns A new SolidDataset equal to the given Rule Resource, but with the given Rule.
 * @since 1.6.0
 */


function setRule(ruleResource, rule) {
  return setThing(ruleResource, rule);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourceRule]] into the given Resource's Access Control Resource,
 * replacing previous instances of that Rule.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains (zero or more) [[ResourceRule]]s.
 * @returns A new Resource equal to the given Resource, but with the given Rule in its ACR.
 * @since 1.6.0
 */


function setResourceRule(resourceWithAcr, rule) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, rule);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return updatedResource;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the agents a [[Rule]] applies **directly** to. This will not include agents
 * that are part of a group the [[Rule]] applies to, nor will it include specific agent
 * classes, such as authenticated or public agents.
 *
 * @param rule The rule from which agents are read.
 * @returns A list of the WebIDs of agents included in the rule.
 * @since 1.6.0
 */


function getAgentAll(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent !== acp.PublicAgent && agent !== acp.AuthenticatedAgent && agent !== acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the agents the [[Rule]] applies to with the provided agents.
 *
 * @param rule The rule for which agents are set.
 * @param agent The agent the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of agents.
 * @since 1.6.0
 */


function setAgent(rule, agent) {
  // Preserve the special agent classes authenticated and public, which we
  // don't want to overwrite with this function.
  const isPublic = hasPublic(rule);
  const isAuthenticated = hasAuthenticated(rule);
  const isCreator = hasCreator(rule);
  let result = setIri(rule, acp.agent, agent); // Restore public and authenticated

  if (isPublic) {
    result = setPublic(result);
  }

  if (isAuthenticated) {
    result = setAuthenticated(result);
  }

  if (isCreator) {
    result = setCreator(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional agent.
 *
 * @param rule The [[Rule]] to be applied to an additional agent.
 * @param agent The agent the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional agent.
 * @since 1.6.0
 */


function addAgent(rule, agent) {
  return addIri(rule, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given agent directly. This will not
 * remove the agent from any groups the rule applies to.
 *
 * @param rule The [[Rule]] that should no longer apply to a given agent.
 * @param agent The agent the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given agent.
 * @since 1.6.0
 */


function removeAgent(rule, agent) {
  return removeIri(rule, acp.agent, agent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Lists all the groups a [[Rule]] applies to.
 *
 * @param rule The rule from which groups are read.
 * @returns A list of the [[URL]]'s of groups included in the rule.
 * @since 1.6.0
 */


function getGroupAll(rule) {
  return getIriAll(rule, acp.group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the groups the [[Rule]] applies to with the provided groups.
 *
 * @param rule The rule for which groups are set.
 * @param group The group the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of groups.
 * @since 1.6.0
 */


function setGroup(rule, group) {
  return setIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional group.
 *
 * @param rule The [[Rule]] to be applied to an additional group.
 * @param agent The group the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional group.
 * @since 1.6.0
 */


function addGroup(rule, group) {
  return addIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given group.
 *
 * @param rule The [[Rule]] that should no longer apply to a given group.
 * @param agent The group the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given group.
 * @since 1.6.0
 */


function removeGroup(rule, group) {
  return removeIri(rule, acp.group, group);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any agent.
 *
 * @param rule The rule checked for public access.
 * @returns Whether the rule applies to any agent or not.
 * @status 1.6.0
 */


function hasPublic(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.PublicAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to any Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to any agent.
 * @status 1.6.0
 */


function setPublic(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setPublic` no longer takes a second parameter. It is now used together with `removePublic` instead.");
  }

  return addIri(rule, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to any Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to no longer apply to any agent.
 * @status 1.6.0
 */


function removePublic(rule) {
  return removeIri(rule, acp.agent, acp.PublicAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any authenticated agent.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to any authenticated agent or not.
 * @status 1.6.0
 */


function hasAuthenticated(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.AuthenticatedAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to any authenticated Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to any authenticated Agent.
 * @status 1.6.0
 */


function setAuthenticated(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setAuthenticated` no longer takes a second parameter. It is now used together with `removeAuthenticated` instead.");
  }

  return addIri(rule, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to any authenticated Agent.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply/not apply to any authenticated agent.
 * @status 1.6.0
 */


function removeAuthenticated(rule) {
  return removeIri(rule, acp.agent, acp.AuthenticatedAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to the creator of the Resource.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to the creator of the Resource or not.
 * @status 1.6.0
 */


function hasCreator(rule) {
  return getIriAll(rule, acp.agent).filter(agent => agent === acp.CreatorAgent).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to apply to the creator of a Resource.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply to the creator of a Resource.
 * @status 1.6.0
 */


function setCreator(rule) {
  // The second argument should not be part of the function signature,
  // so it's not in the parameter list:
  // eslint-disable-next-line prefer-rest-params
  if (typeof arguments === "object" && typeof arguments[1] === "boolean") {
    throw new Error("The function `setCreator` no longer takes a second parameter. It is now used together with `removeCreator` instead.");
  }

  return addIri(rule, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Set a Rule to no longer apply to the creator of a Resource.
 *
 * @param rule The rule being modified.
 * @returns A copy of the rule, updated to apply/not apply to the creator of a Resource.
 * @status 1.6.0
 */


function removeCreator(rule) {
  return removeIri(rule, acp.agent, acp.CreatorAgent);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * List all the clients a [[Rule]] applies **directly** to. This will not include
 * specific client classes, such as public clients.
 *
 * @param rule The rule from which clients are read.
 * @returns A list of the WebIDs of clients included in the rule.
 * @since 1.6.0
 */


function getClientAll(rule) {
  return getIriAll(rule, acp.client).filter(client => client !== solid.PublicOidcClient);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Overwrite the clients the [[Rule]] applies to with the provided Client.
 *
 * @param rule The rule for which clients are set.
 * @param client The Client the rule should apply to.
 * @returns A copy of the input rule, applying to a different set of Clients.
 * @since 1.6.0
 */


function setClient(rule, client) {
  // Preserve the special "any client" class, which we
  // don't want to overwrite with this function.
  const anyClientEnabled = hasAnyClient(rule);
  let result = setIri(rule, acp.client, client); // Restore the "any client" class

  if (anyClientEnabled) {
    result = setAnyClient(result);
  }

  return result;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Apply the [[Rule]] to an additional Client.
 *
 * @param rule The [[Rule]] to be applied to an additional Client.
 * @param client The Client the [[Rule]] should apply to.
 * @returns A copy of the [[Rule]], applying to an additional Client.
 * @since 1.6.0
 */


function addClient(rule, client) {
  return addIri(rule, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Prevent the [[Rule]] from applying to a given Client directly.
 *
 * @param rule The [[Rule]] that should no longer apply to a given Client.
 * @param client The Client the rule should no longer apply to.
 * @returns A copy of the rule, not applying to the given Client.
 * @since 1.6.0
 */


function removeClient(rule, client) {
  return removeIri(rule, acp.client, client);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Check if the rule applies to any client, i.e. all the applications
 * regardless of their identifier.
 *
 * @param rule The rule checked for authenticated access.
 * @returns Whether the rule applies to public clients.
 * @since 1.6.0
 */


function hasAnyClient(rule) {
  return getIriAll(rule, acp.client).filter(client => client === solid.PublicOidcClient).length > 0;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Rule]] apply to any client application.
 *
 * @param rule The rule for which clients are set.
 * @returns A copy of the rule, updated to apply to any client
 * @since 1.6.0
 */


function setAnyClient(rule) {
  return addIri(rule, acp.client, solid.PublicOidcClient);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Make the [[Rule]] no longer apply to any client application.
 *
 * @param rule The rule for which clients are set.
 * @returns A copy of the rule, updated to no longer apply to any client
 * @since 1.6.0
 */


function removeAnyClient(rule) {
  return removeIri(rule, acp.client, solid.PublicOidcClient);
}
/**
 * Gets a human-readable representation of the given [[Rule]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param rule The Rule to get a human-readable representation of.
 * @since 1.6.0
 */


function ruleAsMarkdown(rule) {
  let markdown = `## Rule: ${asUrl(rule)}\n\n`;
  let targetEnumeration = "";

  if (hasPublic(rule)) {
    targetEnumeration += "- Everyone\n";
  }

  if (hasAuthenticated(rule)) {
    targetEnumeration += "- All authenticated agents\n";
  }

  if (hasCreator(rule)) {
    targetEnumeration += "- The creator of this resource\n";
  }

  if (hasAnyClient(rule)) {
    targetEnumeration += "- Users of any client application\n";
  }

  const targetAgents = getAgentAll(rule);

  if (targetAgents.length > 0) {
    targetEnumeration += "- The following agents:\n  - ";
    targetEnumeration += targetAgents.join("\n  - ") + "\n";
  }

  const targetGroups = getGroupAll(rule);

  if (targetGroups.length > 0) {
    targetEnumeration += "- Members of the following groups:\n  - ";
    targetEnumeration += targetGroups.join("\n  - ") + "\n";
  }

  const targetClients = getClientAll(rule);

  if (targetClients.length > 0) {
    targetEnumeration += "- Users of the following client applications:\n  - ";
    targetEnumeration += targetClients.join("\n  - ") + "\n";
  }

  markdown += targetEnumeration.length > 0 ? "This rule applies to:\n" + targetEnumeration : "<empty>\n";
  return markdown;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * @param thing the [[Thing]] to check to see if it's an ACP Policy or not
 */


function isPolicy(thing) {
  return getIriAll(thing, rdf.type).includes(acp.Policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[Policy]].
 *
 * @param url URL that identifies this Policy.
 * @since 1.6.0
 */


function createPolicy(url) {
  const stringUrl = internal_toIriString(url);
  let policyThing = createThing({
    url: stringUrl
  });
  policyThing = setUrl(policyThing, rdf.type, acp.Policy);
  return policyThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[Policy]] with the given URL from an [[SolidDataset]].
 *
 * @param policyResource The Resource that contains the given Policy.
 * @param url URL that identifies this Policy.
 * @returns The requested Policy, if it exists, or `null` if it does not.
 * @since 1.6.0
 */


function getPolicy(policyResource, url) {
  const foundThing = getThing(policyResource, url);

  if (foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[Policy]]'s in a given [[SolidDataset]].
 *
 * @param policyResource The Resource that contains Access Policies.
 * @since 1.6.0
 */


function getPolicyAll(policyResource) {
  const foundThings = getThingAll(policyResource);
  const foundPolicies = foundThings.filter(thing => !isThingLocal(thing) && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[Policy]] from the given [[SolidDataset]].
 *
 * @param policyResource The Resource that contains Access Policies.
 * @param policy The Policy to remove from the resource.
 * @since 1.6.0
 */


function removePolicy(policyResource, policy) {
  return removeThing(policyResource, policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[Policy]] into the given [[SolidDataset]], replacing previous instances of that Policy.
 *
 * @param policyResource The Resource that contains Access Policies.
 * @param policy The Policy to insert into the Resource.
 * @returns A new dataset equal to the given resource, but with the given Policy.
 * @since 1.6.0
 */


function setPolicy(policyResource, policy) {
  return setThing(policyResource, policy);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes allowed on it.
 *
 * @param policy The Policy on which to set the modes to allow.
 * @param modes Modes to allow for this Policy.
 * @since 1.6.0
 */


function setAllowModes(policy, modes) {
  let newPolicy = removeAll(policy, acp.allow);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.allow, acp.Write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it allows.
 *
 * @param policy The Policy for which you want to know the Access Modes it allows.
 * @since 1.6.0
 */


function getAllowModes(policy) {
  const allowedModes = getIriAll(policy, acp.allow);
  return {
    read: allowedModes.includes(acp.Read),
    append: allowedModes.includes(acp.Append),
    write: allowedModes.includes(acp.Write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]] and a set of [[AccessModes]], return a new Policy based on the given
 * Policy, but with the given Access Modes disallowed on it.
 *
 * @param policy The Policy on which to set the modes to disallow.
 * @param modes Modes to disallow for this Policy.
 * @since 1.6.0
 */


function setDenyModes(policy, modes) {
  let newPolicy = removeAll(policy, acp.deny);

  if (modes.read === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Read);
  }

  if (modes.append === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Append);
  }

  if (modes.write === true) {
    newPolicy = addIri(newPolicy, acp.deny, acp.Write);
  }

  return newPolicy;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Given a [[Policy]], return which [[AccessModes]] it disallows.
 *
 * @param policy The Policy on which you want to know the Access Modes it disallows.
 * @since 1.6.0
 */


function getDenyModes(policy) {
  const deniedModes = getIriAll(policy, acp.deny);
  return {
    read: deniedModes.includes(acp.Read),
    append: deniedModes.includes(acp.Append),
    write: deniedModes.includes(acp.Write)
  };
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Initialise a new, empty [[ResourcePolicy]] for the given Resource.
 *
 * @param resourceWithAcr The Resource to which the Policy is to apply.
 * @param name The name that identifies this Policy.
 * @since 1.6.0
 */


function createResourcePolicyFor(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const url = new URL(getSourceUrl(acr));
  url.hash = `#${name}`;
  let policyThing = createThing({
    url: url.href
  });
  policyThing = setUrl(policyThing, rdf.type, acp.Policy);
  return policyThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourcePolicy]] with the given name that applies to a Resource
 * from its Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose ACR contains the given Policy.
 * @param name The name that identifies this Policy.
 * @returns The requested Policy, if it exists and applies to the given Resource, or `null` if it does not.
 * @since 1.6.0
 */


function getResourcePolicy(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (!getPolicyUrlAll(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get the [[ResourcePolicy]] with the given name that applies to a Resource's
 * Access Control Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose ACR contains the given Policy.
 * @param name The name that identifies this Policy.
 * @returns The requested Policy, if it exists and applies to the Resource's ACR, or `null` if it does not.
 * @since 1.6.0
 */


function getResourceAcrPolicy(resourceWithAcr, name) {
  const acr = internal_getAcr(resourceWithAcr);
  const acrUrl = getSourceUrl(acr);
  const url = new URL(acrUrl);
  url.hash = `#${name}`;
  const foundThing = getThing(acr, url.href);

  if (!getAcrPolicyUrlAll(resourceWithAcr).includes(url.href) || foundThing === null || !isPolicy(foundThing)) {
    return null;
  }

  return foundThing;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[ResourcePolicy]]'s that apply to a Resource in its Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies applying to it.
 * @since 1.6.0
 */


function getResourcePolicyAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const policyUrls = getPolicyUrlAll(resourceWithAcr);
  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));
  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Get all [[ResourcePolicy]]'s that apply to a given Resource's Access Control
 * Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @since 1.6.0
 */


function getResourceAcrPolicyAll(resourceWithAcr) {
  const acr = internal_getAcr(resourceWithAcr);
  const policyUrls = getAcrPolicyUrlAll(resourceWithAcr);
  const foundThings = policyUrls.map(policyUrl => getThing(acr, policyUrl));
  const foundPolicies = foundThings.filter(thing => thing !== null && isPolicy(thing));
  return foundPolicies;
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[ResourcePolicy]] from the given Resource's Access Control
 * Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to remove from the Resource's Access Control Resource.
 * @since 1.6.0
 */


function removeResourcePolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  let policyToRemove = policy;

  if (typeof policyToRemove === "string") {
    try {
      new URL(policyToRemove);
    } catch (e) {
      // If the given Policy to remove is the name of the Policy,
      // resolve it to its full URL — developers usually refer to either the
      // Policy itself, or by its name, as they do not have access to the ACR
      // directly.
      const policyUrl = new URL(getSourceUrl(acr));
      policyUrl.hash = `#${policy}`;
      policyToRemove = policyUrl.href;
    }
  }

  let policyUrlString;

  if (typeof policyToRemove === "string") {
    policyUrlString = policyToRemove;
  } else if (isNamedNode(policyToRemove)) {
    policyUrlString = internal_toIriString(policyToRemove);
  } else {
    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));
  } // Check whether the actual Policy (i.e. with the Policy type) exists:


  const matchingRule = getResourcePolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));

  if (matchingRule === null) {
    // No such Policy exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, policyToRemove);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return removePolicyUrl(updatedResource, policyUrlString);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove the given [[ResourcePolicy]] that applies to a given Resource's Access
 * Control Resource from that Access Control Resource.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The ACR Policy to remove from the Resource's Access Control Resource.
 * @since 1.6.0
 */


function removeResourceAcrPolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  let policyToRemove = policy;

  if (typeof policyToRemove === "string") {
    try {
      new URL(policyToRemove);
    } catch (e) {
      // If the given Policy to remove is the name of the Policy,
      // resolve it to its full URL — developers usually refer to either the
      // Policy itself, or by its name, as they do not have access to the ACR
      // directly.
      const policyUrl = new URL(getSourceUrl(acr));
      policyUrl.hash = `#${policy}`;
      policyToRemove = policyUrl.href;
    }
  }

  let policyUrlString;

  if (typeof policyToRemove === "string") {
    policyUrlString = policyToRemove;
  } else if (isNamedNode(policyToRemove)) {
    policyUrlString = internal_toIriString(policyToRemove);
  } else {
    policyUrlString = asUrl(policyToRemove, getSourceUrl(acr));
  } // Check whether the actual Policy (i.e. with the Policy type) exists:


  const matchingRule = getResourceAcrPolicy(resourceWithAcr, new URL(policyUrlString).hash.substring(1));

  if (matchingRule === null) {
    // No such Policy exists yet, so return the Resource+ACR unchanged:
    return resourceWithAcr;
  }

  const updatedAcr = removeThing(acr, policyToRemove);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  return removeAcrPolicyUrl(updatedResource, policyUrlString);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control
 * Resource, replacing previous instances of that Policy.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to insert into the Resource's Access Control Resource.
 * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource.
 * @since 1.6.0
 */


function setResourcePolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, policy);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  const policyUrl = asUrl(policy, getSourceUrl(acr));
  return addPolicyUrl(updatedResource, policyUrl);
}
/**
 * ```{note} There is no Access Control Policies specification yet. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Insert the given [[ResourcePolicy]] into the given Resource's Acccess Control
 * Resource, replacing previous instances of that Policy, to apply to the Access
 * Control Resource itself.
 *
 * @param resourceWithAcr The Resource whose Access Control Resource contains Access Policies.
 * @param policy The Policy to insert into the Resource's Access Control Resource.
 * @returns A new Resource equal to the given Resource, but with the given Policy in its Access Control Resource, applying to that Access Control Resource.
 * @since 1.6.0
 */


function setResourceAcrPolicy(resourceWithAcr, policy) {
  const acr = internal_getAcr(resourceWithAcr);
  const updatedAcr = setThing(acr, policy);
  const updatedResource = internal_setAcr(resourceWithAcr, updatedAcr);
  const policyUrl = asUrl(policy, getSourceUrl(acr));
  return addAcrPolicyUrl(updatedResource, policyUrl);
}
/**
 * Gets a human-readable representation of the given [[Policy]] to aid debugging.
 *
 * Note that changes to the exact format of the return value are not considered a breaking change;
 * it is intended to aid in debugging, not as a serialisation method that can be reliably parsed.
 *
 * @param policy The Policy to get a human-readable representation of.
 * @since 1.6.0
 */


function policyAsMarkdown(policy) {
  function getStatus(allow, deny) {
    if (deny) {
      return "denied";
    }

    if (allow) {
      return "allowed";
    }

    return "unspecified";
  }

  const allowModes = getAllowModes(policy);
  const denyModes = getDenyModes(policy);
  let markdown = `## Policy: ${asUrl(policy)}\n\n`;
  markdown += `- Read: ${getStatus(allowModes.read, denyModes.read)}\n`;
  markdown += `- Append: ${getStatus(allowModes.append, denyModes.append)}\n`;
  markdown += `- Write: ${getStatus(allowModes.write, denyModes.write)}\n`;
  const allOfRules = getAllOfRuleUrlAll(policy);
  const anyOfRules = getAnyOfRuleUrlAll(policy);
  const noneOfRules = getNoneOfRuleUrlAll(policy);

  if (allOfRules.length === 0 && anyOfRules.length === 0 && noneOfRules.length === 0) {
    markdown += "\n<no rules specified yet>\n";
  }

  if (allOfRules.length > 0) {
    markdown += "\nAll of these rules should match:\n";
    markdown += "- " + allOfRules.join("\n- ") + "\n";
  }

  if (anyOfRules.length > 0) {
    markdown += "\nAt least one of these rules should match:\n";
    markdown += "- " + anyOfRules.join("\n- ") + "\n";
  }

  if (noneOfRules.length > 0) {
    markdown += "\nNone of these rules should match:\n";
    markdown += "- " + noneOfRules.join("\n- ") + "\n";
  }

  return markdown;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 *
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * [[AccessControlResource]].
 * ```
 *
 * Initialises a new empty Access Control Resource for a given Resource for use
 * in **unit tests**.
 *
 * @param resourceUrl The URL of the Resource to which the mocked ACR should apply.
 * @returns The mocked empty Access Control Resource for the given Resource.
 * @since 1.6.0
 */


function mockAcrFor(resourceUrl) {
  const acrUrl = new URL("access-control-resource", resourceUrl).href;
  const acr = Object.assign(Object.assign({}, mockSolidDatasetFrom(acrUrl)), {
    accessTo: resourceUrl
  });
  return acr;
}
/**
 * ```{warning}
 * Do not use this function in production code.  For use in **unit tests** that require a
 * Resource with an [[AccessControlResource]].
 * ```
 *
 * Attaches an Access Control Resource to a given [[SolidDataset]] for use
 * in **unit tests**; e.g., unit tests that call [[getPolicyUrlAll]].
 *
 * @param resource The Resource to mock up with a new resource ACL.
 * @param accessControlResource The Access Control Resource to attach to the given Resource.
 * @returns The input Resource with an empty resource ACL attached.
 * @since 1.6.0
 */


function addMockAcrTo(resource, accessControlResource = mockAcrFor(getSourceUrl(resource))) {
  const resourceWithAcr = Object.assign(internal_cloneResource(resource), {
    internal_acp: {
      acr: accessControlResource,
      aprs: {}
    }
  });
  return resourceWithAcr;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const v2AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor
};
const v2ControlFunctions = {
  acrAsMarkdown,
  addAcrPolicyUrl,
  addMemberAcrPolicyUrl,
  addMemberPolicyUrl,
  addPolicyUrl,
  getAcrPolicyUrlAll,
  getMemberAcrPolicyUrlAll,
  getMemberPolicyUrlAll,
  getPolicyUrlAll,
  hasLinkedAcr,
  removeAcrPolicyUrl,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl,
  removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl,
  removeMemberPolicyUrlAll,
  removePolicyUrl,
  removePolicyUrlAll
};
const v2PolicyFunctions = {
  createPolicy,
  getAllowModes,
  getDenyModes,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes,
  setDenyModes,
  setPolicy
};
const v2RuleFunctions = {
  addAgent,
  addForbiddenRuleUrl: addNoneOfRuleUrl,
  addGroup,
  addOptionalRuleUrl: addAnyOfRuleUrl,
  addRequiredRuleUrl: addAllOfRuleUrl,
  createRule,
  getAgentAll,
  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,
  getGroupAll,
  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,
  getRequiredRuleUrlAll: getAllOfRuleUrlAll,
  getRule,
  getRuleAll,
  hasAuthenticated,
  hasCreator,
  hasPublic,
  removeAgent,
  removeForbiddenRuleUrl: removeNoneOfRuleUrl,
  removeGroup,
  removeOptionalRuleUrl: removeAnyOfRuleUrl,
  removeRequiredRuleUrl: removeAllOfRuleUrl,
  removeRule,
  ruleAsMarkdown,
  setAgent,
  setForbiddenRuleUrl: setNoneOfRuleUrl,
  setGroup,
  setOptionalRuleUrl: setAnyOfRuleUrl,
  setRequiredRuleUrl: setAllOfRuleUrl,
  setRule
};
const v2MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setPublic]] */

function previousSetPublicSignature(rule, enable) {
  return enable ? setPublic(rule) : removePublic(rule);
}
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setAuthenticated]] */


function previousSetAuthenticatedSignature(rule, enable) {
  return enable ? setAuthenticated(rule) : removeAuthenticated(rule);
}
/* istanbul ignore next Not a supported public API: */

/** @deprecated Replaced by [[setCreator]] */


function previousSetCreatorSignature(rule, enable) {
  return enable ? setCreator(rule) : removeCreator(rule);
}

const deprecatedFunctions$1 = {
  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */
  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,
  setPublic: previousSetPublicSignature,
  setAuthenticated: previousSetAuthenticatedSignature,
  setCreator: previousSetCreatorSignature
};
/**
 * @hidden
 * @deprecated Replaced by [[acp_v3]].
 */

const acp_v2 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v2AcpFunctions), v2ControlFunctions), v2PolicyFunctions), v2RuleFunctions), v2MockFunctions), deprecatedFunctions$1);
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.acp_v2 = acp_v2;
const v1AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor
};
const v1PolicyFunctions = {
  createPolicy,
  getAllowModes,
  getDenyModes,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes,
  setDenyModes,
  setPolicy
};
const v1RuleFunctions = {
  addAgent,
  addForbiddenRuleUrl: addNoneOfRuleUrl,
  addGroup,
  addOptionalRuleUrl: addAnyOfRuleUrl,
  addRequiredRuleUrl: addAllOfRuleUrl,
  createRule,
  getAgentAll,
  getForbiddenRuleUrlAll: getNoneOfRuleUrlAll,
  getGroupAll,
  getOptionalRuleUrlAll: getAnyOfRuleUrlAll,
  getRequiredRuleUrlAll: getAllOfRuleUrlAll,
  getRule,
  getRuleAll,
  hasAuthenticated,
  hasCreator,
  hasPublic,
  removeAgent,
  removeForbiddenRuleUrl: removeNoneOfRuleUrl,
  removeGroup,
  removeOptionalRuleUrl: removeAnyOfRuleUrl,
  removeRequiredRuleUrl: removeAllOfRuleUrl,
  removeRule,
  ruleAsMarkdown,
  setAgent,
  setForbiddenRuleUrl: setNoneOfRuleUrl,
  setGroup,
  setOptionalRuleUrl: setAnyOfRuleUrl,
  setRequiredRuleUrl: setAllOfRuleUrl,
  setRule
};
const v1MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
const v1ControlFunctions = {
  hasLinkedAcr,
  addAcrPolicyUrl,
  addMemberAcrPolicyUrl,
  getAcrPolicyUrlAll,
  getMemberAcrPolicyUrlAll,
  removeAcrPolicyUrl,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl,
  removeMemberAcrPolicyUrlAll
};
const deprecatedFunctions = {
  createControl: internal_createControl,
  getControl: internal_getControl,
  getAllControl: internal_getControlAll,
  getControlAll: internal_getControlAll,
  setControl: internal_setControl,
  removeControl: removeControl,
  addPolicyUrl: internal_addPolicyUrl,
  getPolicyUrlAll: internal_getPolicyUrlAll,
  removePolicyUrl: internal_removePolicyUrl,
  removePolicyUrlAll: internal_removePolicyUrlAll,
  addMemberPolicyUrl: internal_addMemberPolicyUrl,
  getMemberPolicyUrlAll: internal_getMemberPolicyUrlAll,
  removeMemberPolicyUrl: internal_getMemberPolicyUrlAll,
  removeMemberPolicyUrlAll: internal_removeMemberPolicyUrlAll,

  /** @deprecated This misspelling was included accidentally. The correct function is [[getForbiddenRuleUrlAll]]. */
  getForbiddenRuleurlAll: getNoneOfRuleUrlAll,
  setPublic: previousSetPublicSignature,
  setAuthenticated: previousSetAuthenticatedSignature,
  setCreator: previousSetCreatorSignature
};
/**
 * @hidden
 * @deprecated Replaced by [[acp_v2]].
 */

const acp_v1 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v1AcpFunctions), v1PolicyFunctions), v1RuleFunctions), v1MockFunctions), v1ControlFunctions), deprecatedFunctions);
/**
 * ```{note} The Web Access Control specification is not yet finalised. As such, this
 * function is still experimental and subject to change, even in a non-major release.
 * ```
 *
 * Remove an [[Control]] from the [[AccessControlResource]] of a Resource.
 *
 * @param withAccessControlResource A Resource with the Access Control Resource from which to remove an Access Control.
 * @param control The [[Control]] to remove from the given Access Control Resource.
 * @returns The given Resource with a new Access Control Resource equal to the original Access Control Resource, excluding the given Access Control.
 * @hidden Developers don't need to care about initialising Controls - they can just add Policies directly.
 * @deprecated
 */

exports.acp_v1 = acp_v1;

function removeControl(withAccessControlResource, control) {
  const acr = internal_getAcr(withAccessControlResource);
  const updatedAcr = removeThing(acr, control);
  const updatedResource = internal_setAcr(withAccessControlResource, updatedAcr);
  return updatedResource;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


const v3AcpFunctions = {
  getFileWithAccessDatasets,
  getFileWithAcr,
  getReferencedPolicyUrlAll,
  getResourceInfoWithAccessDatasets,
  getResourceInfoWithAcr,
  getSolidDatasetWithAccessDatasets,
  getSolidDatasetWithAcr,
  hasAccessibleAcr,
  saveAcrFor
};
const v3ControlFunctions = {
  acrAsMarkdown,
  addAcrPolicyUrl,
  addMemberAcrPolicyUrl,
  addMemberPolicyUrl,
  addPolicyUrl,
  getAcrPolicyUrlAll,
  getMemberAcrPolicyUrlAll,
  getMemberPolicyUrlAll,
  getPolicyUrlAll,
  hasLinkedAcr,
  removeAcrPolicyUrl,
  removeAcrPolicyUrlAll,
  removeMemberAcrPolicyUrl,
  removeMemberAcrPolicyUrlAll,
  removeMemberPolicyUrl,
  removeMemberPolicyUrlAll,
  removePolicyUrl,
  removePolicyUrlAll
};
const v3PolicyFunctions = {
  createPolicy,
  getAllowModes,
  getDenyModes,
  getPolicy,
  getPolicyAll,
  policyAsMarkdown,
  removePolicy,
  setAllowModes,
  setDenyModes,
  setPolicy,
  createResourcePolicyFor,
  getResourceAcrPolicy,
  getResourceAcrPolicyAll,
  getResourcePolicy,
  getResourcePolicyAll,
  removeResourceAcrPolicy,
  removeResourcePolicy,
  setResourceAcrPolicy,
  setResourcePolicy
};
const v3RuleFunctions = {
  addAgent,
  addGroup,
  createRule,
  getAgentAll,
  getGroupAll,
  getRule,
  getRuleAll,
  removeAgent,
  removeGroup,
  removeRule,
  ruleAsMarkdown,
  setAgent,
  setGroup,
  setRule,
  addClient,
  getClientAll,
  hasAnyClient,
  removeClient,
  setAnyClient,
  setClient,
  removeAnyClient,
  hasAuthenticated,
  hasCreator,
  hasPublic,
  setAuthenticated,
  setCreator,
  setPublic,
  removeAuthenticated,
  removeCreator,
  removePublic,
  getAnyOfRuleUrlAll,
  addAnyOfRuleUrl,
  removeAnyOfRuleUrl,
  setAnyOfRuleUrl,
  getAllOfRuleUrlAll,
  addAllOfRuleUrl,
  removeAllOfRuleUrl,
  setAllOfRuleUrl,
  getNoneOfRuleUrlAll,
  addNoneOfRuleUrl,
  removeNoneOfRuleUrl,
  setNoneOfRuleUrl,
  createResourceRuleFor,
  getResourceRule,
  getResourceRuleAll,
  removeResourceRule,
  setResourceRule
};
const v3MockFunctions = {
  addMockAcrTo,
  mockAcrFor
};
/**
 * @hidden
 * @deprecated Please import directly from the "acp/*" modules.
 */

const acp_v3 = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, v3AcpFunctions), v3ControlFunctions), v3PolicyFunctions), v3RuleFunctions), v3MockFunctions);
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.acp_v3 = acp_v3;

function getActiveRuleAll(resource, policyUrlAll) {
  // Collect all the rules referenced by the active policies.
  const ruleUrls = [];
  policyUrlAll.forEach(policyUrl => {
    const acr = internal_getAcr(resource);
    const policyThing = getThing(acr, policyUrl);

    if (policyThing !== null) {
      getIriAll(policyThing, acp.anyOf).forEach(activeRuleUrl => ruleUrls.push(activeRuleUrl));
      getIriAll(policyThing, acp.allOf).forEach(activeRuleUrl => ruleUrls.push(activeRuleUrl));
      getIriAll(policyThing, acp.noneOf).forEach(activeRuleUrl => ruleUrls.push(activeRuleUrl));
    }
  });
  return ruleUrls;
}

function internal_hasInaccessiblePolicies(resource) {
  const sourceIri = getSourceIri(resource); // Collect all policies that apply to the resource or its ACR (aka active)

  const activePolicyUrls = getPolicyUrlAll(resource).concat(getAcrPolicyUrlAll(resource));
  const ruleUrls = getActiveRuleAll(resource, activePolicyUrls); // If either an active policy or rule are not defined in the ACR, return false

  return activePolicyUrls.concat(ruleUrls) // The call to `isDefaultEssPolicyUrl` is a workaround for an ESS bug.
  // When that workaround can be removed, remove the `&&` leg that calls it.
  .some(url => url.substring(0, sourceIri.length) !== sourceIri && !isDefaultEssPolicyUrl(url, sourceIri));
}

const knownActorRelations = [acp.agent, acp.group];
/**
 * Get an overview of what access is defined for a given actor in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this actor.
 *
 * Additionally, this only considers access given _explicitly_ to the given actor, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setActorAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to get the access for.
 * @param actor Which instance of the given actor type you want to get the access for.
 * @returns What Access modes are granted to the given actor explicitly, or null if it could not be determined.
 */

function internal_getActorAccess(resource, actorRelation, actor) {
  if (!hasAccessibleAcr(resource) || internal_hasInaccessiblePolicies(resource)) {
    return null;
  }

  const acr = internal_getAcr(resource);
  const acrPolicyUrls = getAcrPolicyUrlAll(resource);
  const acrPolicies = acrPolicyUrls.map(policyUrl => getPolicy(acr, policyUrl)).filter(policy => policy !== null);
  const applicableAcrPolicies = acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acr));
  const policyUrls = getPolicyUrlAll(resource);
  const policies = policyUrls.map(policyUrl => getPolicy(acr, policyUrl)).filter(policy => policy !== null);
  const applicablePolicies = policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acr));
  const initialAccess = {
    read: false,
    append: false,
    write: false,
    controlRead: false,
    controlWrite: false
  }; // All allowed reading and writing defined in ACR policies
  // determines whether the `controlRead` and `controlWrite` statuses are `true`.

  const allowedAcrAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModes(policy);

    if (allowModes.read) {
      allAllowedAccess.controlRead = true;
    }

    if (allowModes.write) {
      allAllowedAccess.controlWrite = true;
    }

    return allAllowedAccess;
  }, initialAccess); // Then allowed reading, appending and writing in regular policies
  // determines whether the respective status is `true`.

  const withAllowedAccess = applicablePolicies.reduce((acc, policy) => {
    const allAllowedAccess = Object.assign({}, acc);
    const allowModes = getAllowModes(policy);

    if (allowModes.read) {
      allAllowedAccess.read = true;
    }

    if (allowModes.append) {
      allAllowedAccess.append = true;
    }

    if (allowModes.write) {
      allAllowedAccess.write = true;
    }

    return allAllowedAccess;
  }, allowedAcrAccess); // At this point, everything that has been explicitly allowed is true.
  // However, it could still be overridden by access that is explicitly denied.
  // Starting with `controlRead` and `controlWrite`,
  // by inspecting denied reading and writing defined in the ACR policies.

  const withAcrDeniedAccess = applicableAcrPolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModes(policy);

    if (denyModes.read === true) {
      allDeniedAccess.controlRead = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.controlWrite = false;
    }

    return allDeniedAccess;
  }, withAllowedAccess); // And finally, we set to `false` those access modes that are explicitly denied
  // in the regular policies:

  const withDeniedAccess = applicablePolicies.reduce((acc, policy) => {
    const allDeniedAccess = Object.assign({}, acc);
    const denyModes = getDenyModes(policy);

    if (denyModes.read === true) {
      allDeniedAccess.read = false;
    }

    if (denyModes.append === true) {
      allDeniedAccess.append = false;
    }

    if (denyModes.write === true) {
      allDeniedAccess.write = false;
    }

    return allDeniedAccess;
  }, withAcrDeniedAccess);
  return withDeniedAccess;
}
/**
 * Get an overview of what access is defined for a given Agent in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this Agent.
 *
 * Additionally, this only considers access given _explicitly_ to the given Agent, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param webId WebID of the Agent you want to get the access for.
 * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.
 */


function internal_getAgentAccess(resource, webId) {
  return internal_getActorAccess(resource, acp.agent, webId);
}
/**
 * Get an overview of what access is defined for a given Group in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to this Group.
 *
 * Additionally, this only considers access given _explicitly_ to the given Group, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setGroupAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param groupUrl URL of the Group you want to get the access for.
 * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.
 */


function internal_getGroupAccess(resource, groupUrl) {
  return internal_getActorAccess(resource, acp.group, groupUrl);
}
/**
 * Get an overview of what access is defined for everybody in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to everybody.
 *
 * Additionally, this only considers access given _explicitly_ to everybody, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setPublicAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @returns What Access modes are granted to everyone explicitly, or null if it could not be determined.
 */


function internal_getPublicAccess(resource) {
  return internal_getActorAccess(resource, acp.agent, acp.PublicAgent);
}

function policyAppliesTo(policy, actorRelation, actor, acr) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);

  if (allowModes.length + denyModes.length === 0) {
    // A Policy that does not specify access modes does not do anything:
    return false;
  }

  const allOfRules = getAllOfRuleUrlAll(policy).map(ruleUrl => getRule(acr, ruleUrl)).filter(isNotNull);
  const anyOfRules = getAnyOfRuleUrlAll(policy).map(ruleUrl => getRule(acr, ruleUrl)).filter(isNotNull);
  const noneOfRules = getNoneOfRuleUrlAll(policy).map(ruleUrl => getRule(acr, ruleUrl)).filter(isNotNull); // We assume that this Policy applies if this specific actor is mentioned
  // and no further restrictions are in place.
  // (In other words, the Policy may apply to others *in addition to* this
  // actor, but if it applies to this actor *unless* some other condition holds,
  // we cannot be sure whether it will apply to this actor.)
  // This means that:

  return (// Every existing allOf Rule explicitly applies explicitly to this given actor:
    allOfRules.every(rule => ruleAppliesTo(rule, actorRelation, actor)) && ( // If there are anyOf Rules, at least one applies explicitly to this actor:
    anyOfRules.length === 0 || anyOfRules.some(rule => ruleAppliesTo(rule, actorRelation, actor))) && // No further restrictions are in place that make this sometimes not apply
    // to the given actor:
    noneOfRules.length === 0
  );
}

function policyConflictsWith(policy, otherAccess) {
  const allowModes = getIriAll(policy, acp.allow);
  const denyModes = getIriAll(policy, acp.deny);
  return otherAccess.read === true && denyModes.includes(acp.Read) || otherAccess.read === false && allowModes.includes(acp.Read) && !denyModes.includes(acp.Read) || otherAccess.append === true && denyModes.includes(acp.Append) || otherAccess.append === false && allowModes.includes(acp.Append) && !denyModes.includes(acp.Append) || otherAccess.write === true && denyModes.includes(acp.Write) || otherAccess.write === false && allowModes.includes(acp.Write) && !denyModes.includes(acp.Write);
}

function ruleAppliesTo(rule, actorRelation, actor) {
  // A Rule that does not list *any* actor matches for everyone:
  let isEmpty = true;
  knownActorRelations.forEach(knownActorRelation => {
    isEmpty && (isEmpty = getIri(rule, knownActorRelation) === null);
  });
  return isEmpty || getIriAll(rule, actorRelation).includes(actor);
}
/**
 * Get a set of all actors mentioned in an ACR by active Rules (i.e. that are
 * referenced by Policies referenced by the ACR Control, and therefore that
 * effectively apply).
 *
 * @param resource The resource with the ACR we want to inspect
 * @param actorRelation
 */


function internal_findActorAll(resource, actorRelation) {
  const actors = new Set(); // Collect all policies that apply to the resource or its ACR (aka active)

  const activePolicyUrls = getPolicyUrlAll(resource).concat(getAcrPolicyUrlAll(resource));
  const rules = getActiveRuleAll(resource, activePolicyUrls); // This code could be prettier using flat(), which isn't supported by nodeJS 10.
  // If you read this comment after April 2021, feel free to refactor.

  rules.forEach(ruleUrl => {
    // The rules URL being extracted from the dataset, it is safe to assume
    // that getThing cannot return undefined.
    const ruleThing = getThing(internal_getAcr(resource), ruleUrl);
    getIriAll(ruleThing, actorRelation).filter(iri => ![acp.PublicAgent, acp.CreatorAgent, acp.AuthenticatedAgent].includes(iri) || actorRelation != acp.agent).forEach(iri => actors.add(iri));
  });
  return actors;
}
/**
 * Iterate through all the actors active for an ACR, and list all of their access.
 * @param resource The resource for which we want to list the access
 * @param actorRelation The type of actor we want to list access for
 * @returns A map with each actor access indexed by their URL, or null if some
 * external policies are referenced.
 */


function internal_getActorAccessAll(resource, actorRelation) {
  if (!hasAccessibleAcr(resource) || internal_hasInaccessiblePolicies(resource)) {
    return null;
  }

  const result = {};
  const actors = internal_findActorAll(resource, actorRelation);
  actors.forEach(iri => {
    // The type assertion holds, because if internal_getActorAccess were null,
    // we would have returned {} already.
    const access = internal_getActorAccess(resource, actorRelation, iri);
    result[iri] = access;
  });
  return result;
}
/**
 * Get an overview of what access are defined for all Groups in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to the mentionned
 * Groups.
 *
 * Additionally, this only considers access given _explicitly_ to individual Groups, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @returns A map with each Group's access indexed by their URL, or null if some
 * external policies are referenced.
 */


function internal_getGroupAccessAll(resource) {
  return internal_getActorAccessAll(resource, acp.group);
}
/**
 * Get an overview of what access are defined for all Agents in a Resource's Access Control Resource.
 *
 * This will only return a value if all relevant access is defined in just the Resource's Access
 * Control Resource; in other words, if an Access Policy or Access Rule applies that is re-used for
 * other Resources, this function will not be able to determine the access relevant to the mentionned
 * Agents.
 *
 * Additionally, this only considers access given _explicitly_ to individual Agents, i.e. without
 * additional conditions.
 *
 * In other words, this function will generally understand and return the access as set by
 * [[internal_setAgentAccess]], but not understand more convoluted Policies.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @returns A map with each Agent's access indexed by their WebID, or null if some
 * external policies are referenced.
 */


function internal_getAgentAccessAll(resource) {
  return internal_getActorAccessAll(resource, acp.agent);
}
/**
 * Set access to a Resource for a specific actor.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * actor specifically. In other words, it can, for example, add Policies that
 * give a particular Group Read access to the Resource. However, if other
 * Policies specify that everyone in that Group is *denied* Read access *except*
 * for a particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for an agent matching the given actor.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param actorRelation What type of actor (e.g. acp:agent or acp:group) you want to set the access for.
 * @param actor Which instance of the given actor type you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given actor. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setActorAccess(resource, actorRelation, actor, access) {
  var _a, _b, _c, _d, _e;

  if (!hasAccessibleAcr(resource) || internal_hasInaccessiblePolicies(resource)) {
    return null;
  } // Get the access that currently applies to the given actor


  const existingAccess = internal_getActorAccess(resource, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that above. */

  if (existingAccess === null) {
    return null;
  } // Get all Policies that apply specifically to the given actor


  const acr = internal_getAcr(resource);
  const acrPolicyUrls = getAcrPolicyUrlAll(resource);
  const acrPolicies = acrPolicyUrls // This is a temporary workaround until ESS removes its default Policy references:
  .filter(policyUrl => !isDefaultEssPolicyUrl(policyUrl, getSourceIri(resource))).map(policyUrl => getPolicy(acr, policyUrl)).filter(policy => policy !== null);
  const applicableAcrPolicies = acrPolicies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acr));
  const policyUrls = getPolicyUrlAll(resource);
  const policies = policyUrls // This is a temporary workaround until ESS removes its default Policy references:
  .filter(policyUrl => !isDefaultEssPolicyUrl(policyUrl, getSourceIri(resource))).map(policyUrl => getPolicy(acr, policyUrl)).filter(policy => policy !== null);
  const applicablePolicies = policies.filter(policy => policyAppliesTo(policy, actorRelation, actor, acr)); // We only need to override Policies that define access other than what we want:

  const conflictingAcrPolicies = applicableAcrPolicies.filter(policy => policyConflictsWith(policy, {
    read: access.controlRead,
    write: access.controlWrite
  }));
  const conflictingPolicies = applicablePolicies.filter(policy => policyConflictsWith(policy, {
    read: access.read,
    append: access.append,
    write: access.write
  })); // For every Policy that applies specifically to the given Actor, but _also_
  // to another actor (i.e. that applies using an anyOf Rule, or a Rule that
  // mentions both the given and another actor)...

  const otherActorAcrPolicies = conflictingAcrPolicies.filter(acrPolicy => policyHasOtherActors(acrPolicy, actorRelation, actor, acr));
  const otherActorPolicies = conflictingPolicies.filter(policy => policyHasOtherActors(policy, actorRelation, actor, acr)); // ...check what access the current actor would have if we removed them...

  const otherActorAcrPolicyUrls = otherActorAcrPolicies.map(acrPolicy => asIri(acrPolicy));
  const otherActorPolicyUrls = otherActorPolicies.map(policy => asIri(policy));
  let resourceWithPoliciesExcluded = otherActorAcrPolicyUrls.reduce(removeAcrPolicyUrl, resource);
  resourceWithPoliciesExcluded = otherActorPolicyUrls.reduce(removePolicyUrl, resourceWithPoliciesExcluded);
  const remainingAccess = internal_getActorAccess(resourceWithPoliciesExcluded, actorRelation, actor);
  /* istanbul ignore if: It returns null if the ACR has inaccessible Policies, which should happen since we already check for that at the start. */

  if (remainingAccess === null) {
    return null;
  } // ...add copies of those Policies and their Rules, but excluding the given actor...


  let updatedAcr = acr;
  const newAcrPolicyUrls = [];
  otherActorAcrPolicies.forEach(acrPolicy => {
    const [policyCopy, ruleCopies] = copyPolicyExcludingActor(acrPolicy, acr, actorRelation, actor);
    updatedAcr = setThing(updatedAcr, policyCopy);
    updatedAcr = ruleCopies.reduce(setThing, updatedAcr);
    newAcrPolicyUrls.push(asIri(policyCopy));
  });
  const newPolicyUrls = [];
  otherActorPolicies.forEach(policy => {
    const [policyCopy, ruleCopies] = copyPolicyExcludingActor(policy, acr, actorRelation, actor);
    updatedAcr = setThing(updatedAcr, policyCopy);
    updatedAcr = ruleCopies.reduce(setThing, updatedAcr);
    newPolicyUrls.push(asIri(policyCopy));
  }); // ...add a new Policy that applies the given access,
  // and the previously applying access for access modes that were undefined...

  const newRuleIri = getSourceIri(acr) + `#rule_${encodeURIComponent(`${actorRelation}_${actor}`)}`;
  let newRule = createRule(newRuleIri);
  newRule = setIri(newRule, actorRelation, actor);
  const newControlReadAccess = (_a = access.controlRead) !== null && _a !== void 0 ? _a : existingAccess.controlRead;
  const newControlWriteAccess = (_b = access.controlWrite) !== null && _b !== void 0 ? _b : existingAccess.controlWrite;
  let acrPoliciesToUnapply = otherActorAcrPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newControlReadAccess !== remainingAccess.controlRead || newControlWriteAccess !== remainingAccess.controlWrite) {
    const newAcrPolicyIri = getSourceIri(acr) + `#acr_policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newAcrPolicy = createPolicy(newAcrPolicyIri);
    newAcrPolicy = setAllowModes(newAcrPolicy, {
      read: newControlReadAccess === true,
      append: false,
      write: newControlWriteAccess === true
    });
    newAcrPolicy = addIri(newAcrPolicy, acp.allOf, newRule);
    updatedAcr = setThing(updatedAcr, newAcrPolicy);
    updatedAcr = setThing(updatedAcr, newRule);
    newAcrPolicyUrls.push(newAcrPolicyIri); // If we don't have to set new access, we only need to unapply the
    // ACR Policies that applied to both the given actor and other actors
    // (because they have been replaced by clones not mentioning the given
    // actor). Hence `policiesToUnApply` is initialied to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    acrPoliciesToUnapply = conflictingAcrPolicies;
  }

  const newReadAccess = (_c = access.read) !== null && _c !== void 0 ? _c : existingAccess.read;
  const newAppendAccess = (_d = access.append) !== null && _d !== void 0 ? _d : existingAccess.append;
  const newWriteAccess = (_e = access.write) !== null && _e !== void 0 ? _e : existingAccess.write;
  let policiesToUnapply = otherActorPolicies; // Only replace existing Policies if the defined access actually changes:

  if (newReadAccess !== remainingAccess.read || newAppendAccess !== remainingAccess.append || newWriteAccess !== remainingAccess.write) {
    const newPolicyIri = getSourceIri(acr) + `#policy` + `_${encodeURIComponent(`${actorRelation}_${actor}`)}` + `_${Date.now()}_${Math.random()}`;
    let newPolicy = createPolicy(newPolicyIri);
    newPolicy = setAllowModes(newPolicy, {
      read: newReadAccess === true,
      append: newAppendAccess === true,
      write: newWriteAccess === true
    });
    newPolicy = addIri(newPolicy, acp.allOf, newRule);
    updatedAcr = setThing(updatedAcr, newPolicy);
    updatedAcr = setThing(updatedAcr, newRule);
    newPolicyUrls.push(newPolicyIri); // If we don't have to set new access, we only need to unapply the
    // Policies that applied to both the given actor and other actors (because
    // they have been replaced by clones not mentioning the given actor). Hence
    // `policiesToUnApply` is initialied to `otherActorPolicies`.
    // However, if we're in this if branch, that means we also had to replace
    // Policies that defined access for just this actor, so we'll have to remove
    // all Policies mentioning this actor:

    policiesToUnapply = conflictingPolicies;
  } // ...then remove existing Policy URLs that mentioned both the given actor
  // and other actors from the given Resource and apply the new ones (but do not
  // remove the actual old Policies - they might still apply to other Resources!).


  let updatedResource = internal_setAcr(resource, updatedAcr);
  acrPoliciesToUnapply.forEach(previouslyApplicableAcrPolicy => {
    updatedResource = removeAcrPolicyUrl(updatedResource, asIri(previouslyApplicableAcrPolicy));
  });
  newAcrPolicyUrls.forEach(newAcrPolicyUrl => {
    updatedResource = addAcrPolicyUrl(updatedResource, newAcrPolicyUrl);
  });
  policiesToUnapply.forEach(previouslyApplicablePolicy => {
    updatedResource = removePolicyUrl(updatedResource, asIri(previouslyApplicablePolicy));
  });
  newPolicyUrls.forEach(newPolicyUrl => {
    updatedResource = addPolicyUrl(updatedResource, newPolicyUrl);
  });
  return updatedResource;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * Agent specifically. In other words, it can, for example, add Policies that
 * give a particular Agent Read access to the Resource. However, if other
 * Policies specify that that Agent is *denied* Read access *except* if they're
 * in a particular Group, then that will be left intact.
 * This means that, unless *only* this function is used to manipulate access to
 * this Resource, the set access might not be equal to the effective access for
 * the given Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param webId Which Agent you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Agent. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setAgentAccess(resource, webId, access) {
  return internal_setActorAccess(resource, acp.agent, webId, access);
}
/**
 * Set access to a Resource for a specific Group.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for the given
 * Group specifically. In other words, it can, for example, add Policies that
 * give a particular Group Read access to the Resource. However, if other
 * Policies specify that it is *denied* Read access *except* if they're a
 * particular Agent, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for Agents in the given Group.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param groupUrl Which Group you want to set the access for.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for the given Group. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setGroupAccess(resource, groupUrl, access) {
  return internal_setActorAccess(resource, acp.group, groupUrl, access);
}
/**
 * Set access to a Resource for everybody.
 *
 * This function adds the relevant Access Control Policies and Rules to a
 * Resource's Access Control Resource to define the given access for everybody
 * specifically. In other words, it can, for example, add Policies that
 * give everybody Read access to the Resource. However, if other
 * Policies specify that everybody is *denied* Read access *except* if they're
 * in a particular Group, then that will be left intact.
 * This means that, unless *only* this module's functions are used to manipulate
 * access to this Resource, the set access might not be equal to the effective
 * access for a particular Agent.
 *
 * There are a number of preconditions that have to be fulfilled for this
 * function to work:
 * - Access to the Resource is determined via an Access Control Resource.
 * - The Resource's Access Control Resource does not refer to (Policies or Rules
 *   in) other Resources.
 * - The current user has access to the Resource's Access Control Resource.
 *
 * If those conditions do not hold, this function will return `null`.
 *
 * Additionally, take note that the given access will only be applied to the
 * given Resource; if that Resource is a Container, access will have to be set
 * for its contained Resources independently.
 *
 * @param resource Resource that was fetched together with its linked Access Control Resource.
 * @param access What access (read, append, write, controlRead, controlWrite) to set for everybody. `true` to allow, `false` to deny, and `undefined` to leave unchanged.
 * @returns The Resource with the updated Access Control Resource attached, if updated successfully, or `null` if not.
 */


function internal_setPublicAccess(resource, access) {
  return internal_setActorAccess(resource, acp.agent, acp.PublicAgent, access);
}

function policyHasOtherActors(policy, actorRelation, actor, policyAndRuleResource) {
  const allOfRulesHaveOtherActors = getIriAll(policy, acp.allOf).some(ruleUrl => {
    const rule = getRule(policyAndRuleResource, ruleUrl);
    /* istanbul ignore if This function only gets called after policyAppliesTo, which already filters out non-existent Rules. */

    if (rule === null) {
      return false;
    }

    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  const anyOfRulesHaveOtherActors = getIriAll(policy, acp.anyOf).some(ruleUrl => {
    const rule = getRule(policyAndRuleResource, ruleUrl);
    /* istanbul ignore if This function only gets called after policyAppliesTo, which already filters out non-existent Rules. */

    if (rule === null) {
      return false;
    }

    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  /* istanbul ignore next This function only gets called after policyAppliesTo, which already filters out all noneOf Rules */

  const noneOfRulesHaveOtherActors = getIriAll(policy, acp.noneOf).some(ruleUrl => {
    const rule = getRule(policyAndRuleResource, ruleUrl);

    if (rule === null) {
      return false;
    }

    return ruleHasOtherActors(rule, actorRelation, actor);
  });
  return allOfRulesHaveOtherActors || anyOfRulesHaveOtherActors || noneOfRulesHaveOtherActors;
}

function ruleHasOtherActors(rule, actorRelation, actor) {
  const otherActors = [];
  knownActorRelations.forEach(knownActorRelation => {
    const otherActorsWithThisRelation = getIriAll(rule, knownActorRelation).filter(applicableActor => applicableActor !== actor || knownActorRelation !== actorRelation); // Unfortunately Node 10 does not support `.flat()` yet, hence the use of `push`:

    otherActors.push(...otherActorsWithThisRelation);
  });
  return otherActors.length > 0;
}

function copyPolicyExcludingActor(inputPolicy, policyAndRuleDataset, actorRelationToExclude, actorToExclude) {
  const newIriSuffix = "_copy_without" + `_${encodeURIComponent(actorRelationToExclude)}_${actorToExclude}` + `_${Date.now()}_${Math.random()}`; // Create new Rules for the Policy, excluding the given Actor

  const newAllOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.allOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newAnyOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.anyOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude);
  const newNoneOfRules = copyRulesExcludingActor(getIriAll(inputPolicy, acp.noneOf), policyAndRuleDataset, newIriSuffix, actorRelationToExclude, actorToExclude); // Create a new Policy with the new Rules

  let newPolicy = createPolicy(asIri(inputPolicy) + newIriSuffix);
  getIriAll(inputPolicy, acp.allow).forEach(allowMode => {
    newPolicy = addIri(newPolicy, acp.allow, allowMode);
  });
  getIriAll(inputPolicy, acp.deny).forEach(denyMode => {
    newPolicy = addIri(newPolicy, acp.deny, denyMode);
  });
  newAllOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.allOf, newRule);
  });
  newAnyOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.anyOf, newRule);
  });
  /* istanbul ignore next Policies listing noneOf Rules are left alone (because they do not unambiguously apply to the given actor always), so there will usually not be any noneOf Rules to copy. */

  newNoneOfRules.forEach(newRule => {
    newPolicy = addIri(newPolicy, acp.noneOf, newRule);
  });
  return [newPolicy, newAllOfRules.concat(newAnyOfRules).concat(newNoneOfRules)];
}
/** Creates clones of all the Rules identified by `ruleIris` in `ruleDataset`, excluding the given Actor */


function copyRulesExcludingActor(ruleIris, ruleDataset, iriSuffix, actorRelationToExclude, actorToExclude) {
  return ruleIris.map(ruleIri => {
    const rule = getRule(ruleDataset, ruleIri);

    if (rule === null) {
      return null;
    }

    let newRule = createRule(asIri(rule) + iriSuffix);
    let listsOtherActors = false;
    knownActorRelations.forEach(knownActorRelation => {
      getIriAll(rule, knownActorRelation).forEach(targetActor => {
        if (knownActorRelation === actorRelationToExclude && targetActor === actorToExclude) {
          return;
        }

        listsOtherActors = true;
        newRule = addIri(newRule, knownActorRelation, targetActor);
      });
    });
    return listsOtherActors ? newRule : null;
  }).filter(isNotNull);
}

function isNotNull(value) {
  return value !== null;
}
/**
 * Work around ESS adding references to external Policies to ACRs by default.
 *
 * Inrupt's Enterprise Solid Server by default adds a reference to a Policy in
 * every ACR that is not local to that ACR. This will be removed in the near
 * future: they only reflect access that holds anyway (i.e. the Pod Owner's
 * access), and removing them does not actually change that access.
 *
 * However, until that is implemented, we manually ignore those Policies as a
 * workaround, rather than always returning `null` because we cannot read them
 * in the ACR itself.
 *
 * When ESS is updated, delete this function and remove references to it to
 * remove the workaround.
 *
 * @param policyUrl URL of a Policy.
 * @param resourceUrl Resource in whose ACR that URL is referenced.
 * @returns Whether the given Policy URL is a URL the Inrupt's Enterprise Solid Server has added by default for the given Resource.
 */


function isDefaultEssPolicyUrl(policyUrl, resourceUrl) {
  const essServers = ["https://pod.inrupt.com", "https://demo-ess.inrupt.com", "https://dev-ess.inrupt.com"];
  return essServers.some(essServer => {
    if (!resourceUrl.startsWith(essServer)) {
      return false;
    } // ESS Pods are of the form <origin>/<username>/,
    // and resource URLs are subpaths of that.
    // Hence, we can get the Pod root by getting everything up to and including
    // the first slash after the origin's trailing slash:


    const resourcePath = resourceUrl.substring(essServer.length + "/".length);
    const podRoot = resourceUrl.substring(0, essServer.length + "/".length + resourcePath.indexOf("/") + "/".length);
    return policyUrl === podRoot + "policies/#Owner";
  });
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


function universalAccessToAcl(newAccess, previousAccess) {
  var _a, _b, _c, _d; // Universal access is aligned on ACP, which means there is a distinction between
  // controlRead and controlWrite. This split doesn't exist in WAC, which is why
  // the type for the input variable of this function is a restriction on the
  // universal Access type.


  if (newAccess.controlRead !== newAccess.controlWrite) {
    throw new Error("For Pods using Web Access Control, controlRead and controlWrite must be equal.");
  }

  return {
    read: (_a = newAccess.read) !== null && _a !== void 0 ? _a : previousAccess.read,
    append: (_b = newAccess.append) !== null && _b !== void 0 ? _b : previousAccess.append,
    write: (_c = newAccess.write) !== null && _c !== void 0 ? _c : previousAccess.write,
    control: (_d = newAccess.controlRead) !== null && _d !== void 0 ? _d : previousAccess.control
  };
}

function aclAccessToUniversal(access) {
  // In ACL, denying access to an actor is a notion that doesn't exist, so an
  // access is either granted or not for a given mode.
  // This creates a misalignment with the ACP notion of an access being granted,
  // denied, or simply not mentioned. Here, we convert the boolean vision of
  // ACL into the boolean or undefined vision of ACP.
  return {
    read: access.read,
    write: access.write,
    append: access.append,
    controlRead: access.control,
    controlWrite: access.control
  };
}

async function getActorAccess(resource, actor, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl), actor);

  if (wacAccess === null) {
    return null;
  }

  return aclAccessToUniversal(wacAccess);
}

async function getActorClassAccess(resource, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));

  if (wacAccess === null) {
    return null;
  }

  return aclAccessToUniversal(wacAccess);
}

async function getActorAccessAll(resource, accessEvaluationCallback, options) {
  const resourceAcl = await internal_fetchAcl(resource, options);
  const wacAgentAccess = accessEvaluationCallback(internal_setAcl(resource, resourceAcl));

  if (wacAgentAccess === null) {
    return null;
  }

  const result = {};

  for (const [webId, wacAccess] of Object.entries(wacAgentAccess)) {
    result[webId] = aclAccessToUniversal(wacAccess);
  }

  return result;
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to the given Agent.
 *
 * Note that this only lists permissions granted to the given Agent individually,
 * and will not exhaustively list modes the given Agent may have access to because
 * they apply to everyone, or because they apply to the Agent through a group for
 * instance.
 *
 * @param resource The URL of the Resource for which we want to list Access
 * @param agent The Agent for which the Access is granted
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the given Agent explicitly, or null if it could not be determined.
 */


function getAgentAccess$1(resource, agent, options = internal_defaultFetchOptions) {
  return getActorAccess(resource, agent, getAgentAccess$2, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to the given Group.
 *
 * Note that this only lists permissions granted to the given Group individually,
 * and will not exhaustively list modes the given Group may have access to because
 * they apply to everyone, or because they apply to the Group through another
 * Group that may contain it for instance.
 *
 * @param resource The URL of the Resource for which we want to list Access
 * @param group The Group for which the Access is granted
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the given Group explicitly, or null if it could not be determined.
 */


function getGroupAccess$1(resource, group, options = internal_defaultFetchOptions) {
  return getActorAccess(resource, group, getGroupAccess$2, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted to everyone.
 *
 * Note that this only lists permissions explicitly granted to everyone as a whole,
 * and will not exhaustively list modes any individual Agent or Group may have
 * access to because they specifically apply to them only.
 *
 * @param resource The URL of the Resource for which we want to list public Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns What Access modes are granted to the everyone explicitly, or null if it could not be determined.
 */


function getPublicAccess$1(resource, options = internal_defaultFetchOptions) {
  return getActorClassAccess(resource, getPublicAccess$2, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted explicitly to each individual Agent.
 *
 * Note that this only lists permissions granted to each Agent individually,
 * and will not exhaustively list modes any Agent may have access to because
 * they apply to everyone, or because they apply to an Agent through a group for
 * instance.
 *
 * @param resource The URL of the Resource for which we want to list Agents Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A map of Agent WebIDs and the access granted to them, or null if it could not be determined.
 */


function getAgentAccessAll$1(resource, options = internal_defaultFetchOptions) {
  return getActorAccessAll(resource, getAgentAccessAll$2, options);
}
/**
 * For a given Resource, look up its metadata, and read the Access permissions
 * granted explicitly to each individual Group.
 *
 * Note that this only lists permissions granted to each Group individually,
 * and will not exhaustively list modes any Group may have access to because
 * they apply individually to all of the Agents in the Group, or to everyone
 * for instance.
 *
 * @param resource The URL of the Resource for which we want to list Agents Access
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns A map of Group URLs and the access granted to them, or null if it could not be determined.
 */


function getGroupAccessAll$1(resource, options = internal_defaultFetchOptions) {
  return getActorAccessAll(resource, getGroupAccessAll$2, options);
}

async function prepareResourceAcl(resource, options) {
  if (!hasAccessibleAcl(resource)) {
    return null;
  }

  const acl = await internal_fetchAcl(resource, options);
  const resourceWithAcl = internal_setAcl(resource, acl);
  let resourceAcl;

  if (hasResourceAcl(resourceWithAcl)) {
    // This is the simple case, where the Resource ACL we need to update already
    // exists.
    resourceAcl = internal_getResourceAcl(resourceWithAcl);
  } else if (hasFallbackAcl(resourceWithAcl)) {
    // In this case, the Resource ACL needs to be created first, and then updated.
    resourceAcl = createAclFromFallbackAcl(resourceWithAcl);
  } else {
    return null;
  }

  return internal_setResourceAcl(resourceWithAcl, resourceAcl);
}

async function saveUpdatedAcl(resource, acl, options) {
  let savedAcl = null;

  try {
    savedAcl = await saveAclFor(resource, acl, options);
    return internal_setResourceAcl(resource, savedAcl);
  } catch (e) {
    return null;
  }
}

async function setActorClassAccess(resource, access, getAccess, setAccess, options) {
  const resourceWithOldAcl = await prepareResourceAcl(resource, options);

  if (resourceWithOldAcl === null) {
    return null;
  }

  const resourceAcl = getResourceAcl(resourceWithOldAcl);
  const currentAccess = getAccess(resourceWithOldAcl);
  const wacAccess = universalAccessToAcl(access, currentAccess);
  const updatedResourceAcl = setAccess(resourceAcl, wacAccess);
  return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);
}

async function setActorAccess(resource, actor, access, getAccess, setAccess, options) {
  const resourceWithOldAcl = await prepareResourceAcl(resource, options);

  if (resourceWithOldAcl === null) {
    return null;
  }

  const currentAccess = getAccess(resourceWithOldAcl, actor);
  const resourceAcl = getResourceAcl(resourceWithOldAcl);
  const wacAccess = universalAccessToAcl(access, currentAccess);
  const updatedResourceAcl = setAccess(resourceAcl, actor, wacAccess);
  return await saveUpdatedAcl(resourceWithOldAcl, updatedResourceAcl, options);
}
/**
 * Set the Access modes for a given Agent to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param agent The Agent for whom Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setAgentResourceAccess(resource, agent, access, options = internal_defaultFetchOptions) {
  return await setActorAccess(resource, agent, access, getAgentAccess$2, setAgentResourceAccess$1, options);
}
/**
 * Set the Access modes for a given Group to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param agent The Group for which Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setGroupResourceAccess(resource, group, access, options = internal_defaultFetchOptions) {
  return await setActorAccess(resource, group, access, getGroupAccess$2, setGroupResourceAccess$1, options);
}
/**
 * Set the Access modes for everyone to a given Resource.
 *
 * Important note: if the target resource did not have a Resource ACL, and its
 * Access was regulated by its Fallback ACL, said Fallback ACL is copied to create
 * a new Resource ACL. This has the side effect that the next time the Fallback
 * ACL is updated, the changes _will not impact_ the target resource.
 *
 * If the target Resource's Access mode cannot be determined, e.g. the user does
 * not have Read and Write access to the target Resource's ACL, or to its
 * fallback ACL if it does not have a Resource ACL, then `null` is returned.
 *
 * @param resource The Resource for which Access is being set
 * @param access The Access being set
 * @param options Optional parameter `options.fetch`: An alternative `fetch` function to make the HTTP request, compatible with the browser-native [fetch API](https://developer.mozilla.org/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters).
 * @returns The Resource, with its ACL updated, or null if the new Access could not
 * be set.
 */


async function setPublicResourceAccess(resource, access, options = internal_defaultFetchOptions) {
  return await setActorClassAccess(resource, access, getPublicAccess$2, setPublicResourceAccess$1, options);
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */


async function getAccessFor(resourceUrl, actorType, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    if (typeof actor !== "string") {
      throw new Error("When reading Agent-specific access, the given agent cannot be left undefined.");
    }

    return await getAgentAccess(resourceUrl, actor, options);
  }

  if (actorType === "group") {
    if (typeof actor !== "string") {
      throw new Error("When reading Group-specific access, the given group cannot be left undefined.");
    }

    return await getGroupAccess(resourceUrl, actor, options);
  }

  if (actorType === "public") {
    if (typeof actor === "string") {
      throw new Error(`When reading public access, no actor type should be specified (here [${actor}]).`);
    }

    return await getPublicAccess(resourceUrl, actor);
  }

  return null;
}
/**
 * Get an overview of what access is defined for a given set of actors: all Agents
 * or all Groups.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given actor (Agent
 *   or Group). If additional restrictions are set up to apply to the given Agent
 *   in a particular situation, those will not be reflected in the return value
 *   of this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param actorType type of actor whose access is being read.
 * @returns What access is set for the given resource, grouped by resp. Agent or Group.
 * @since 1.5.0
 */


async function getAccessForAll(resourceUrl, actorType, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    return await getAgentAccessAll(resourceUrl, options);
  }

  if (actorType === "group") {
    return await getGroupAccessAll(resourceUrl, options);
  }

  return null;
}

async function setAccessFor(resourceUrl, actorType, access, actor = internal_defaultFetchOptions, options = internal_defaultFetchOptions) {
  if (actorType === "agent") {
    if (typeof actor !== "string") {
      throw new Error("When writing Agent-specific access, the given agent cannot be left undefined.");
    }

    return await setAgentAccess(resourceUrl, actor, access, options);
  }

  if (actorType === "group") {
    if (typeof actor !== "string") {
      throw new Error("When writing Group-specific access, the given group cannot be left undefined.");
    }

    return await setGroupAccess(resourceUrl, actor, access, options);
  }

  if (actorType === "public") {
    if (typeof actor === "string") {
      throw new Error(`When writing public access, no actor type should be specified (here [${actor}]).`);
    }

    return await setPublicAccess(resourceUrl, access, actor);
  }

  return null;
}
/**
 * Copyright 2021 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/**
 * Get an overview of what access is defined for a given Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given Agent. If
 *   additional restrictions are set up to apply to the given Agent in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Agent you want to get the access for.
 * @since 1.5.0
 */


async function getAgentAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    return internal_getAgentAccess(resourceInfo, webId);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccess$1(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Set access to a Resource for a specific Agent.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for the given Agent. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Agent has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change the Agent's access to.
 * @param webId WebID of the Agent you want to set access for.
 * @param access What access permissions you want to set for the given Agent to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for the given Agent explicitly.
 * @since 1.5.0
 */


async function setAgentAccess(resourceUrl, webId, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const updatedResource = internal_setAgentAccess(resourceInfo, webId, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return internal_getAgentAccess(updatedResource, webId);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setAgentResourceAccess(resourceInfo, webId, wacAccess, options);
    return await getAgentAccess$1(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for all Agents with respect to a given
 * Resource.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the returned Agents. If
 *   additional restrictions are set up to apply to the listed Agents in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @returns The access information to the Resource, grouped by Agent.
 * @since 1.5.0
 */


async function getAgentAccessAll(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    return internal_getAgentAccessAll(resourceInfo);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getAgentAccessAll$1(resourceInfo, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for a given Group.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the given Group. If
 *   additional restrictions are set up to apply to the given Group in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @param webId WebID of the Group you want to get the access for.
 * @since 1.5.0
 */


async function getGroupAccess(resourceUrl, webId, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    return internal_getGroupAccess(resourceInfo, webId);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getGroupAccess$1(resourceInfo, webId, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for all Groups with respect to a given
 * Resource.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for the returned Groups. If
 *   additional restrictions are set up to apply to the listed Groups in a
 *   particular situation, those will not be reflected in the return value of
 *   this function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @returns The access information to the Resource, sorted by Group.
 * @since 1.5.0
 */


async function getGroupAccessAll(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    return internal_getGroupAccessAll(resourceInfo);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getGroupAccessAll$1(resourceInfo, options);
  }

  return null;
}
/**
 * Set access to a Resource for a specific Group.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for the given Group. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access the given Group has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change the Group's access to.
 * @param groupUrl URL of the Group you want to set access for.
 * @param access What access permissions you want to set for the given Group to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for the given Group explicitly.
 * @since 1.5.0
 */


async function setGroupAccess(resourceUrl, groupUrl, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const updatedResource = internal_setGroupAccess(resourceInfo, groupUrl, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return internal_getGroupAccess(updatedResource, groupUrl);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setGroupResourceAccess(resourceInfo, groupUrl, wacAccess, options);
    return await getGroupAccess$1(resourceInfo, groupUrl, options);
  }

  return null;
}
/**
 * Get an overview of what access is defined for everyone.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably reading access, in which case it will
 *   resolve to `null`.
 * - It will only return access specified explicitly for everyone. If
 *   additional restrictions are set up to apply to users in a particular
 *   situation, those will not be reflected in the return value of this
 *   function.
 * - It will only return access specified explicitly for the given Resource.
 *   In other words, if the Resource is a Container, the returned Access may not
 *   apply to contained Resources.
 * - If the current user does not have permission to view access for the given
 *   Resource, this function will resolve to `null`.
 *
 * @param resourceUrl URL of the Resource you want to read the access for.
 * @since 1.5.0
 */


async function getPublicAccess(resourceUrl, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    return internal_getPublicAccess(resourceInfo);
  }

  if (hasAccessibleAcl(resourceInfo)) {
    return await getPublicAccess$1(resourceInfo, options);
  }

  return null;
}
/**
 * Set access to a Resource for everybody.
 *
 * This function works with Solid Pods that implement either the Web Access
 * Control spec or the Access Control Policies proposal, with some caveats:
 *
 * - If access to the given Resource has been set using anything other than the
 *   functions in this module, it is possible that it has been set in a way that
 *   prevents this function from reliably setting access, in which case it will
 *   resolve to `null`.
 * - It will only set access explicitly for everybody. In other words,
 *   additional restrictions could be present that further restrict or loosen
 *   what access a user has in particular circumstances.
 * - The provided access will only apply to the given Resource. In other words,
 *   if the Resource is a Container, the configured Access may not apply to
 *   contained Resources.
 * - If the current user does not have permission to view or change access for
 *   the given Resource, this function will resolve to `null`.
 *
 * Additionally, two caveats apply to users with a Pod server that uses WAC:
 * - If the Resource did not have an ACL yet, a new one will be initialised.
 *   This means that changes to the ACL of a parent Container can no longer
 *   affect access people have to this Resource, although existing access will
 *   be preserved.
 * - Setting different values for `controlRead` and `controlWrite` is not
 *   supported, and **will throw an error**. If you expect (some of) your users
 *   to have Pods implementing WAC, be sure to pass the same value for both.
 *
 * @param resourceUrl URL of the Resource you want to change public access to.
 * @param access What access permissions you want to set for everybody to the given Resource. Possible properties are `read`, `append`, `write`, `controlRead` and `controlWrite`: set to `true` to allow, to `false` to stop allowing, or `undefined` to leave unchanged. Take note that `controlRead` and `controlWrite` can not have distinct values for a Pod server implementing Web Access Control; trying this will throw an error.
 * @returns What access has been set for everybody explicitly.
 * @since 1.5.0
 */


async function setPublicAccess(resourceUrl, access, options = internal_defaultFetchOptions) {
  const resourceInfo = await getResourceInfoWithAcr(resourceUrl, options);

  if (hasAccessibleAcr(resourceInfo)) {
    const updatedResource = internal_setPublicAccess(resourceInfo, access);

    if (updatedResource) {
      try {
        await saveAcrFor(updatedResource, options);
        return internal_getPublicAccess(updatedResource);
      } catch (e) {
        return null;
      }
    }

    return null;
  }

  if (hasAccessibleAcl(resourceInfo)) {
    if (access.controlRead != access.controlWrite) {
      throw new Error(`When setting access for a Resource in a Pod implementing Web Access Control (i.e. [${getSourceIri(resourceInfo)}]), ` + "`controlRead` and `controlWrite` should have the same value.");
    }

    const wacAccess = access;
    await setPublicResourceAccess(resourceInfo, wacAccess, options);
    return await getPublicAccess$1(resourceInfo, options);
  }

  return null;
}

var universal = /*#__PURE__*/Object.freeze({
  __proto__: null,
  getAgentAccess: getAgentAccess,
  setAgentAccess: setAgentAccess,
  getAgentAccessAll: getAgentAccessAll,
  getGroupAccess: getGroupAccess,
  getGroupAccessAll: getGroupAccessAll,
  setGroupAccess: setGroupAccess,
  getPublicAccess: getPublicAccess,
  setPublicAccess: setPublicAccess,
  getAccessFor: getAccessFor,
  getAccessForAll: getAccessForAll,
  setAccessFor: setAccessFor
});
exports.access = universal;
},{"http-link-header":"node_modules/http-link-header/lib/link.js","@rdfjs/data-model":"node_modules/@rdfjs/data-model/index.js","@rdfjs/dataset":"node_modules/@rdfjs/dataset/index.js","cross-fetch":"node_modules/cross-fetch/dist/browser-ponyfill.js","_bundle_loader":"node_modules/parcel-bundler/src/builtins/bundle-loader.js","n3":[["src.b20bf42d.js","node_modules/n3/src/index.js"],"src.b20bf42d.js.map","node_modules/n3/src/index.js"]}],"node_modules/@inrupt/vocab-common-rdf/dist/index.es.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XSD = exports.VS = exports.VOID = exports.VCARD_INRUPT = exports.VCARD = exports.VANN = exports.UI_INRUPT = exports.UI = exports.TIME = exports.SKOS_XL = exports.SKOS = exports.SHEX = exports.SEC = exports.SDMX_DIMENSION = exports.SD = exports.SCHEMA_INRUPT = exports.RLOG = exports.RDF_INRUPT = exports.RDFS = exports.RDF = exports.QB = exports.PROV_O = exports.POSIX = exports.OWL = exports.OLO = exports.ODRL = exports.LDP_INRUPT = exports.LDP = exports.JSONLD = exports.ICAL = exports.HYDRA = exports.HTTPH_INRUPT = exports.HTTP = exports.FOAF = exports.EARL = exports.DOAP = exports.DCTERMS = exports.DCAT = exports.CRED = exports.BOOKMARK = exports.AS = exports.ALTR = exports.ACL = void 0;
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn) {
  var module = {
    exports: {}
  };
  return fn(module, module.exports), module.exports;
}

var BlankNode_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.BlankNode = void 0;
  /**
   * A term that represents an RDF blank node with a label.
   */

  class BlankNode {
    constructor(value) {
      this.termType = 'BlankNode';
      this.value = value;
    }

    equals(other) {
      return !!other && other.termType === 'BlankNode' && other.value === this.value;
    }

  }

  exports.BlankNode = BlankNode;
});
var DefaultGraph_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DefaultGraph = void 0;
  /**
   * A singleton term instance that represents the default graph.
   * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
   */

  class DefaultGraph {
    constructor() {
      this.termType = 'DefaultGraph';
      this.value = ''; // Private constructor
    }

    equals(other) {
      return !!other && other.termType === 'DefaultGraph';
    }

  }

  exports.DefaultGraph = DefaultGraph;
  DefaultGraph.INSTANCE = new DefaultGraph();
});
var NamedNode_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.NamedNode = void 0;
  /**
   * A term that contains an IRI.
   */

  class NamedNode {
    constructor(value) {
      this.termType = 'NamedNode';
      this.value = value;
    }

    equals(other) {
      return !!other && other.termType === 'NamedNode' && other.value === this.value;
    }

  }

  exports.NamedNode = NamedNode;
});
var Literal_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Literal = void 0;
  /**
   * A term that represents an RDF literal, containing a string with an optional language tag or datatype.
   */

  class Literal {
    constructor(value, languageOrDatatype) {
      this.termType = 'Literal';
      this.value = value;

      if (typeof languageOrDatatype === 'string') {
        this.language = languageOrDatatype;
        this.datatype = Literal.RDF_LANGUAGE_STRING;
      } else if (languageOrDatatype) {
        this.language = '';
        this.datatype = languageOrDatatype;
      } else {
        this.language = '';
        this.datatype = Literal.XSD_STRING;
      }
    }

    equals(other) {
      return !!other && other.termType === 'Literal' && other.value === this.value && other.language === this.language && other.datatype.equals(this.datatype);
    }

  }

  exports.Literal = Literal;
  Literal.RDF_LANGUAGE_STRING = new NamedNode_1.NamedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#langString');
  Literal.XSD_STRING = new NamedNode_1.NamedNode('http://www.w3.org/2001/XMLSchema#string');
});
var Quad_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Quad = void 0;
  /**
   * An instance of DefaultGraph represents the default graph.
   * It's only allowed to assign a DefaultGraph to the .graph property of a Quad.
   */

  class Quad {
    constructor(subject, predicate, object, graph) {
      this.termType = 'Quad';
      this.value = '';
      this.subject = subject;
      this.predicate = predicate;
      this.object = object;
      this.graph = graph;
    }

    equals(other) {
      // `|| !other.termType` is for backwards-compatibility with old factories without RDF* support.
      return !!other && (other.termType === 'Quad' || !other.termType) && this.subject.equals(other.subject) && this.predicate.equals(other.predicate) && this.object.equals(other.object) && this.graph.equals(other.graph);
    }

  }

  exports.Quad = Quad;
});
var Variable_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Variable = void 0;
  /**
   * A term that represents a variable.
   */

  class Variable {
    constructor(value) {
      this.termType = 'Variable';
      this.value = value;
    }

    equals(other) {
      return !!other && other.termType === 'Variable' && other.value === this.value;
    }

  }

  exports.Variable = Variable;
});
var DataFactory_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.DataFactory = void 0;
  let dataFactoryCounter = 0;
  /**
   * A factory for instantiating RDF terms and quads.
   */

  class DataFactory {
    constructor(options) {
      this.blankNodeCounter = 0;
      options = options || {};
      this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;
    }
    /**
     * @param value The IRI for the named node.
     * @return A new instance of NamedNode.
     * @see NamedNode
     */


    namedNode(value) {
      return new NamedNode_1.NamedNode(value);
    }
    /**
     * @param value The optional blank node identifier.
     * @return A new instance of BlankNode.
     *         If the `value` parameter is undefined a new identifier
     *         for the blank node is generated for each call.
     * @see BlankNode
     */


    blankNode(value) {
      return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);
    }
    /**
     * @param value              The literal value.
     * @param languageOrDatatype The optional language or datatype.
     *                           If `languageOrDatatype` is a NamedNode,
     *                           then it is used for the value of `NamedNode.datatype`.
     *                           Otherwise `languageOrDatatype` is used for the value
     *                           of `NamedNode.language`.
     * @return A new instance of Literal.
     * @see Literal
     */


    literal(value, languageOrDatatype) {
      return new Literal_1.Literal(value, languageOrDatatype);
    }
    /**
     * This method is optional.
     * @param value The variable name
     * @return A new instance of Variable.
     * @see Variable
     */


    variable(value) {
      return new Variable_1.Variable(value);
    }
    /**
     * @return An instance of DefaultGraph.
     */


    defaultGraph() {
      return DefaultGraph_1.DefaultGraph.INSTANCE;
    }
    /**
     * @param subject   The quad subject term.
     * @param predicate The quad predicate term.
     * @param object    The quad object term.
     * @param graph     The quad graph term.
     * @return A new instance of Quad.
     * @see Quad
     */


    quad(subject, predicate, object, graph) {
      return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());
    }
    /**
     * Create a deep copy of the given term using this data factory.
     * @param original An RDF term.
     * @return A deep copy of the given term.
     */


    fromTerm(original) {
      // TODO: remove nasty any casts when this TS bug has been fixed:
      //  https://github.com/microsoft/TypeScript/issues/26933
      switch (original.termType) {
        case 'NamedNode':
          return this.namedNode(original.value);

        case 'BlankNode':
          return this.blankNode(original.value);

        case 'Literal':
          if (original.language) {
            return this.literal(original.value, original.language);
          }

          if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {
            return this.literal(original.value, this.fromTerm(original.datatype));
          }

          return this.literal(original.value);

        case 'Variable':
          return this.variable(original.value);

        case 'DefaultGraph':
          return this.defaultGraph();

        case 'Quad':
          return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));
      }
    }
    /**
     * Create a deep copy of the given quad using this data factory.
     * @param original An RDF quad.
     * @return A deep copy of the given quad.
     */


    fromQuad(original) {
      return this.fromTerm(original);
    }
    /**
     * Reset the internal blank node counter.
     */


    resetBlankNodeCounter() {
      this.blankNodeCounter = 0;
    }

  }

  exports.DataFactory = DataFactory;
});
var rdfDataFactory = createCommonjsModule(function (module, exports) {
  var __createBinding = commonjsGlobal && commonjsGlobal.__createBinding || (Object.create ? function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
      enumerable: true,
      get: function () {
        return m[k];
      }
    });
  } : function (o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
  });

  var __exportStar = commonjsGlobal && commonjsGlobal.__exportStar || function (m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
  };

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  __exportStar(BlankNode_1, exports);

  __exportStar(DataFactory_1, exports);

  __exportStar(DefaultGraph_1, exports);

  __exportStar(Literal_1, exports);

  __exportStar(NamedNode_1, exports);

  __exportStar(Quad_1, exports);

  __exportStar(Variable_1, exports);
});
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

var rdfFactory$G = new rdfDataFactory.DataFactory();

function _NS$G(localName) {
  return rdfFactory$G.namedNode("http://schema.org/" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Inrupt extension to Schema.org terms providing
 multilingual alternative names (i.e. labels) and translations for comments
 (e.g. for use directly as labels or tool-tips in user interfaces or error
 messages). This extension very deliberately cherry-picks the individual terms
 from Schema.org that Inrupt currently deem generally useful for Solid and Solid
 applications (meaning we can provide a much cleaner, less noisy and smaller
 bundle size when generating programming language artifacts that provide
 convenient constants for just these selected terms, rather than including the
 over 2,500 terms currently defined in Schema.org).
 */


var SCHEMA_INRUPT = {
  PREFIX: "schema-inrupt",
  NAMESPACE: "http://schema.org/",
  PREFIX_AND_NAMESPACE: {
    "schema-inrupt": "http://schema.org/"
  },
  NS: _NS$G,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A person (alive, dead, undead, or fictional).
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  Person: _NS$G("Person"),

  /**
   * Data type: URL.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  URL: _NS$G("URL"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * An alias for the item.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  alternateName: _NS$G("alternateName"),

  /**
   * Given name. In the U.S., the first name of a Person.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  givenName: _NS$G("givenName"),

  /**
   * Family name. In the U.S., the last name of a Person.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  familyName: _NS$G("familyName"),

  /**
   * An additional name for a Person, can be used for a middle name.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  additionalName: _NS$G("additionalName"),

  /**
   * A license document that applies to this content, typically indicated by URL.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  license: _NS$G("license"),

  /**
   * The name of the item.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  name: _NS$G("name"),

  /**
   * The textual content of this CreativeWork.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  text: _NS$G("text"),

  /**
   * The identifier property represents any kind of identifier for any kind of [[Thing]], such as ISBNs, GTIN codes, UUIDs etc. Schema.org provides dedicated properties for representing many of these, either as textual strings or as URL (URI) links. See [background notes](/docs/datamodel.html#identifierBg) for more details.
        
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * See also:
   *  - https://schema.org/docs/datamodel.html#identifierBg
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  identifier: _NS$G("identifier"),

  /**
   * A description of the item.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  description: _NS$G("description"),

  /**
   * An image of the item. This can be a [[URL]] or a fully described [[ImageObject]].
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * See also:
   *  - https://schema.org/ImageObject
   *  - https://schema.org/URL
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  image: _NS$G("image"),

  /**
   * URL of the item.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  url: _NS$G("url"),

  /**
   * The startTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to start. For actions that span a period of time, when the action was performed. e.g. John wrote a book from *January* to December. For media, including audio and video, it's the time offset of the start of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  startTime: _NS$G("startTime"),

  /**
   * The endTime of something. For a reserved event or service (e.g. FoodEstablishmentReservation), the time that it is expected to end. For actions that span a period of time, when the action was performed. e.g. John wrote a book from January to *December*. For media, including audio and video, it's the time offset of the end of a clip within a larger file.\n\nNote that Event uses startDate/endDate instead of startTime/endTime, even when describing dates with times. This situation may be clarified in future revisions.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  endTime: _NS$G("endTime"),

  /**
   * Email address.
   *
   * This term has [4] labels and comments, in the languages [de, es, fr, it].
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/schema#
   */
  email: _NS$G("email")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SCHEMA_INRUPT = SCHEMA_INRUPT;
var rdfFactory$F = new rdfDataFactory.DataFactory();

function _NS$F(localName) {
  return rdfFactory$F.namedNode("http://www.w3.org/2006/vcard/ns#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Ontology for vCard based on RFC6350
 */


var VCARD = {
  PREFIX: "vcard",
  NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
  PREFIX_AND_NAMESPACE: {
    "vcard": "http://www.w3.org/2006/vcard/ns#"
  },
  NS: _NS$F,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Acquaintance
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Acquaintance: _NS$F("Acquaintance"),

  /**
   * Used for relation type codes. The URI of the relation type code must be used as the value for the Relation Type.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  RelatedType: _NS$F("RelatedType"),

  /**
   * Agent
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Agent: _NS$F("Agent"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  BBS: _NS$F("BBS"),

  /**
   * Used for telephone type codes. The URI of the telephone type code must be used as the value for the Telephone Type.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  TelephoneType: _NS$F("TelephoneType"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Car: _NS$F("Car"),

  /**
   * Also called mobile telephone
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Cell: _NS$F("Cell"),

  /**
   * Child
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Child: _NS$F("Child"),

  /**
   * Colleague
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Colleague: _NS$F("Colleague"),

  /**
   * Contact
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Contact: _NS$F("Contact"),

  /**
   * Coresident
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Coresident: _NS$F("Coresident"),

  /**
   * Coworker
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Coworker: _NS$F("Coworker"),

  /**
   * Crush
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Crush: _NS$F("Crush"),

  /**
   * Date
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Date: _NS$F("Date"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Dom: _NS$F("Dom"),

  /**
   * Used for type codes. The URI of the type code must be used as the value for Type.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Type: _NS$F("Type"),

  /**
   * Emergency
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Emergency: _NS$F("Emergency"),

  /**
   * Fax
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Fax: _NS$F("Fax"),

  /**
   * Female
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Female: _NS$F("Female"),

  /**
   * Used for gender codes. The URI of the gender code must be used as the value for Gender.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Gender: _NS$F("Gender"),

  /**
   * Friend
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Friend: _NS$F("Friend"),

  /**
   * This implies that the property is related to an individual's personal life
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Home: _NS$F("Home"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  ISDN: _NS$F("ISDN"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Internet: _NS$F("Internet"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Intl: _NS$F("Intl"),

  /**
   * Kin
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Kin: _NS$F("Kin"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Label: _NS$F("Label"),

  /**
   * Male
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Male: _NS$F("Male"),

  /**
   * Me
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Me: _NS$F("Me"),

  /**
   * Met
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Met: _NS$F("Met"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Modem: _NS$F("Modem"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Msg: _NS$F("Msg"),

  /**
   * Muse
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Muse: _NS$F("Muse"),

  /**
   * Neighbor
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Neighbor: _NS$F("Neighbor"),

  /**
   * None
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  None: _NS$F("None"),

  /**
   * Other
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Other: _NS$F("Other"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  PCS: _NS$F("PCS"),

  /**
   * Pager
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Pager: _NS$F("Pager"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Parcel: _NS$F("Parcel"),

  /**
   * Parent
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Parent: _NS$F("Parent"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Postal: _NS$F("Postal"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Pref: _NS$F("Pref"),

  /**
   * Sibling
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Sibling: _NS$F("Sibling"),

  /**
   * Spouse
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Spouse: _NS$F("Spouse"),

  /**
   * Sweetheart
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Sweetheart: _NS$F("Sweetheart"),

  /**
   * This class is deprecated. Use the hasTelephone object property.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Tel: _NS$F("Tel"),

  /**
   * Also called sms telephone
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Text: _NS$F("Text"),

  /**
   * Text phone
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  TextPhone: _NS$F("TextPhone"),

  /**
   * Unknown
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Unknown: _NS$F("Unknown"),

  /**
   * Video
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Video: _NS$F("Video"),

  /**
   * Voice
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Voice: _NS$F("Voice"),

  /**
   * This implies that the property is related to an individual's work place
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Work: _NS$F("Work"),

  /**
   * This class is deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  X400: _NS$F("X400"),

  /**
   * To specify the components of the delivery address for the  object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Address: _NS$F("Address"),

  /**
   * To specify the electronic mail address for communication with the object the vCard represents. Use the hasEmail object property.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Email: _NS$F("Email"),

  /**
   * Object representing a group of persons or entities.  A group object will usually contain hasMember properties to specify the members of the group.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Group: _NS$F("Group"),

  /**
   * The parent class for all objects
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Kind: _NS$F("Kind"),

  /**
   * An object representing a single person or entity
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Individual: _NS$F("Individual"),

  /**
   * An object representing a named geographical place
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Location: _NS$F("Location"),

  /**
   * An object representing an organization.  An organization is a single entity, and might represent a business or government, a department or division within a business or government, a club, an association, or the like.
      *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Organization: _NS$F("Organization"),

  /**
   * To specify the components of the name of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  Name: _NS$F("Name"),

  /**
   * The vCard class is  equivalent to the new Kind class, which is the parent for the four explicit types of vCards (Individual, Organization, Location, Group)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  VCard: _NS$F("VCard"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  adr: _NS$F("adr"),

  /**
   * To specify the components of the delivery address for the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasAddress: _NS$F("hasAddress"),

  /**
   * This object property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  agent: _NS$F("agent"),

  /**
   * The date of marriage, or equivalent, of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  anniversary: _NS$F("anniversary"),

  /**
   * To specify the birth date of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  bday: _NS$F("bday"),

  /**
   * The category information about the object, also known as tags
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  category: _NS$F("category"),

  /**
   * This data property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  class: _NS$F("class"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  email: _NS$F("email"),

  /**
   * To specify the electronic mail address for communication with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasEmail: _NS$F("hasEmail"),

  /**
   * This data property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  extended_address: _NS$F("extended-address"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  geo: _NS$F("geo"),

  /**
   * To specify information related to the global positioning of the object. May also be used as a property parameter.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGeo: _NS$F("hasGeo"),

  /**
   * Used to support property parameters for the additional name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasAdditionalName: _NS$F("hasAdditionalName"),

  /**
   * To specify the busy time associated with the object. (Was called FBURL in RFC6350)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarBusy: _NS$F("hasCalendarBusy"),

  /**
   * To specify the calendar associated with the object. (Was called CALURI in RFC6350)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarLink: _NS$F("hasCalendarLink"),

  /**
   * To specify the calendar user address to which a scheduling request be sent for the object. (Was called CALADRURI in RFC6350)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCalendarRequest: _NS$F("hasCalendarRequest"),

  /**
   * Used to support property parameters for the category data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCategory: _NS$F("hasCategory"),

  /**
   * Used to support property parameters for the country name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasCountryName: _NS$F("hasCountryName"),

  /**
   * Used to support property parameters for the formatted name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasFN: _NS$F("hasFN"),

  /**
   * Used to support property parameters for the family name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasFamilyName: _NS$F("hasFamilyName"),

  /**
   * To specify  the sex or gender identity of the object. URIs are recommended to enable interoperable sex and gender codes to be used.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGender: _NS$F("hasGender"),

  /**
   * Used to support property parameters for the given name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasGivenName: _NS$F("hasGivenName"),

  /**
   * Used to support property parameters for the honorific prefix data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasHonorificPrefix: _NS$F("hasHonorificPrefix"),

  /**
   * Used to support property parameters for the honorific suffix data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasHonorificSuffix: _NS$F("hasHonorificSuffix"),

  /**
   * To specify the instant messaging and presence protocol communications with the object. (Was called IMPP in RFC6350)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasInstantMessage: _NS$F("hasInstantMessage"),

  /**
   * Used to support property parameters for the language data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLanguage: _NS$F("hasLanguage"),

  /**
   * Used to support property parameters for the locality data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLocality: _NS$F("hasLocality"),

  /**
   * Used to support property parameters for the nickname data property
   *
   * See also:
   *  - http://www.w3.org/2006/vcard/ns#nickname
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasNickname: _NS$F("hasNickname"),

  /**
   * The nick name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  nickname: _NS$F("nickname"),

  /**
   * Used to support property parameters for the note data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasNote: _NS$F("hasNote"),

  /**
   * Used to support property parameters for the organization name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasOrganizationName: _NS$F("hasOrganizationName"),

  /**
   * Used to support property parameters for the organization unit name data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasOrganizationUnit: _NS$F("hasOrganizationUnit"),

  /**
   * Used to support property parameters for the postal code data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasPostalCode: _NS$F("hasPostalCode"),

  /**
   * Used to support property parameters for the region data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRegion: _NS$F("hasRegion"),

  /**
   * To specify a relationship between another entity and the entity represented by this object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRelated: _NS$F("hasRelated"),

  /**
   * Used to support property parameters for the role data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasRole: _NS$F("hasRole"),

  /**
   * To identify the source of directory information of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasSource: _NS$F("hasSource"),

  /**
   * Used to support property parameters for the street address data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasStreetAddress: _NS$F("hasStreetAddress"),

  /**
   * Used to support property parameters for the title data property
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasTitle: _NS$F("hasTitle"),

  /**
   * To specify a value that represents a globally unique identifier corresponding to the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasUID: _NS$F("hasUID"),

  /**
   * Used to indicate the resource value of an object property that requires property parameters
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasValue: _NS$F("hasValue"),

  /**
   * This data property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  label: _NS$F("label"),

  /**
   * To specify the language that may be used for contacting the object. May also be used as a property parameter.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  language: _NS$F("language"),

  /**
   * This data property has been deprecated. See hasGeo
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  latitude: _NS$F("latitude"),

  /**
   * This data property has been deprecated. See hasGeo
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  longitude: _NS$F("longitude"),

  /**
   * This data property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  mailer: _NS$F("mailer"),

  /**
   * A note associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  note: _NS$F("note"),

  /**
   * This object property has been mapped. Use the organization-name data property.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  org: _NS$F("org"),

  /**
   * To specify the organizational name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  organization_name: _NS$F("organization-name"),

  /**
   * To specify the organizational unit name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  organization_unit: _NS$F("organization-unit"),

  /**
   * This data property has been deprecated
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  post_office_box: _NS$F("post-office-box"),

  /**
   * To specify the identifier for the product that created the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  prodid: _NS$F("prodid"),

  /**
   * To specify revision information about the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  rev: _NS$F("rev"),

  /**
   * To specify the function or part played in a particular situation by the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  role: _NS$F("role"),

  /**
   * To specify the string to be used for national-language-specific sorting. Used as a property parameter only.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  sort_string: _NS$F("sort-string"),

  /**
   * To specify the position or job of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  title: _NS$F("title"),

  /**
   * To indicate time zone information that is specific to the object. May also be used as a property parameter.
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  tz: _NS$F("tz"),

  /**
   * Used to indicate the literal value of a data property that requires property parameters
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  value: _NS$F("value"),

  /**
   * The country name associated with the address of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  country_name: _NS$F("country-name"),

  /**
   * The locality (e.g. city or town) associated with the address of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  locality: _NS$F("locality"),

  /**
   * The postal code associated with the address of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  postal_code: _NS$F("postal-code"),

  /**
   * The region (e.g. state or province) associated with the address of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  region: _NS$F("region"),

  /**
   * The street address associated with the address of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  street_address: _NS$F("street-address"),

  /**
   * To include a member in the group this object represents. (This property can only be used by Group individuals)
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasMember: _NS$F("hasMember"),

  /**
   * The additional name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  additional_name: _NS$F("additional-name"),

  /**
   * The family name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  family_name: _NS$F("family-name"),

  /**
   * The given name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  given_name: _NS$F("given-name"),

  /**
   * The honorific prefix of the name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  honorific_prefix: _NS$F("honorific-prefix"),

  /**
   * The honorific suffix of the name associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  honorific_suffix: _NS$F("honorific-suffix"),

  /**
   * The formatted text corresponding to the name of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  fn: _NS$F("fn"),

  /**
   * To specify a public key or authentication certificate associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasKey: _NS$F("hasKey"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  key: _NS$F("key"),

  /**
   * To specify a graphic image of a logo associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasLogo: _NS$F("hasLogo"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  logo: _NS$F("logo"),

  /**
   * To specify the components of the name of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasName: _NS$F("hasName"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  n: _NS$F("n"),

  /**
   * To specify an image or photograph information that annotates some aspect of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasPhoto: _NS$F("hasPhoto"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  photo: _NS$F("photo"),

  /**
   * To specify a digital sound content information that annotates some aspect of the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasSound: _NS$F("hasSound"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  sound: _NS$F("sound"),

  /**
   * To specify the telephone number for telephony communication with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasTelephone: _NS$F("hasTelephone"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  tel: _NS$F("tel"),

  /**
   * To specify a uniform resource locator associated with the object
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  hasURL: _NS$F("hasURL"),

  /**
   * This object property has been mapped
   *
   * Defined by the vocabulary: http://www.w3.org/2006/vcard/ns
   */
  url: _NS$F("url")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.VCARD = VCARD;
var rdfFactory$E = new rdfDataFactory.DataFactory();

function _NS$E(localName) {
  return rdfFactory$E.namedNode("http://www.w3.org/2006/vcard/ns#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Ontology for vCard based on RFC6350
 */


var VCARD_INRUPT = {
  PREFIX: "vcard-inrupt",
  NAMESPACE: "http://www.w3.org/2006/vcard/ns#",
  PREFIX_AND_NAMESPACE: {
    "vcard-inrupt": "http://www.w3.org/2006/vcard/ns#"
  },
  NS: _NS$E,
  // *******************
  // All the Properties.
  // *******************

  /**
   * To specify the components of the delivery address for the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  hasAddress: _NS$E("hasAddress"),

  /**
   * To specify the electronic mail address for communication with the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  hasEmail: _NS$E("hasEmail"),

  /**
   * To specify the telephone number for telephony communication with the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  hasTelephone: _NS$E("hasTelephone"),

  /**
   * The formatted text corresponding to the name of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  fn: _NS$E("fn"),

  /**
   * To specify the function or part played in a particular situation by the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  role: _NS$E("role"),

  /**
   * To specify the organizational name associated with the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  organization_name: _NS$E("organization-name"),

  /**
   * The street address associated with the address of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  street_address: _NS$E("street-address"),

  /**
   * The locality (e.g. city or town) associated with the address of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  locality: _NS$E("locality"),

  /**
   * The postal code associated with the address of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  postal_code: _NS$E("postal-code"),

  /**
   * The region (e.g. state or province) associated with the address of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  region: _NS$E("region"),

  /**
   * The country name associated with the address of the object
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/vcard#
   */
  country_name: _NS$E("country-name")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.VCARD_INRUPT = VCARD_INRUPT;
var rdfFactory$D = new rdfDataFactory.DataFactory();

function _NS$D(localName) {
  return rdfFactory$D.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - RDF (Resource Description Framework) - a framework for representing information in the Web
 */


var RDF = {
  PREFIX: "rdf",
  NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  PREFIX_AND_NAMESPACE: {
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  },
  NS: _NS$D,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The datatype of RDF literals storing fragments of HTML content
   *
   * See also:
   *  - http://www.w3.org/TR/rdf11-concepts/#section-html
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  HTML: _NS$D("HTML"),

  /**
   * The datatype of language-tagged string values
   *
   * See also:
   *  - http://www.w3.org/TR/rdf11-concepts/#section-Graph-Literal
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  langString: _NS$D("langString"),

  /**
   * The class of plain (i.e. untyped) literal values, as used in RIF and OWL 2
   *
   * See also:
   *  - http://www.w3.org/TR/rdf-plain-literal/
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  PlainLiteral: _NS$D("PlainLiteral"),

  /**
   * The class of RDF properties.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Property: _NS$D("Property"),

  /**
   * The class of RDF statements.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Statement: _NS$D("Statement"),

  /**
   * The class of unordered containers.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Bag: _NS$D("Bag"),

  /**
   * The class of ordered containers.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Seq: _NS$D("Seq"),

  /**
   * The class of containers of alternatives.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  Alt: _NS$D("Alt"),

  /**
   * The class of RDF Lists.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  List: _NS$D("List"),

  /**
   * The datatype of XML literal values.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  XMLLiteral: _NS$D("XMLLiteral"),

  /**
   * The datatype of RDF literals storing JSON content.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-json-datatype
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  JSON: _NS$D("JSON"),

  /**
   * A class representing a compound literal.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  CompoundLiteral: _NS$D("CompoundLiteral"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The subject is an instance of a class.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  type: _NS$D("type"),

  /**
   * The subject of the subject RDF statement.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  subject: _NS$D("subject"),

  /**
   * The predicate of the subject RDF statement.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  predicate: _NS$D("predicate"),

  /**
   * The object of the subject RDF statement.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  object: _NS$D("object"),

  /**
   * Idiomatic property used for structured values.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  value: _NS$D("value"),

  /**
   * The empty list, with no items in it. If the rest of a list is nil then the list has no more items in it.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  nil: _NS$D("nil"),

  /**
   * The first item in the subject RDF list.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  first: _NS$D("first"),

  /**
   * The rest of the subject RDF list after the first item.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  rest: _NS$D("rest"),

  /**
   * The language component of a CompoundLiteral.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  language: _NS$D("language"),

  /**
   * The base direction component of a CompoundLiteral.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#the-rdf-compoundliteral-class-and-the-rdf-language-and-rdf-direction-properties
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  direction: _NS$D("direction")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.RDF = RDF;
var rdfFactory$C = new rdfDataFactory.DataFactory();

function _NS$C(localName) {
  return rdfFactory$C.namedNode("http://www.w3.org/1999/02/22-rdf-syntax-ns#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - RDF (Resource Description Framework) - with extensions (e.g., translations of labels or comments, etc.) from Inrupt
 */


var RDF_INRUPT = {
  PREFIX: "rdf-inrupt",
  NAMESPACE: "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  PREFIX_AND_NAMESPACE: {
    "rdf-inrupt": "http://www.w3.org/1999/02/22-rdf-syntax-ns#"
  },
  NS: _NS$C,
  // *******************
  // All the Properties.
  // *******************

  /**
   * The subject is an instance of a class.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/1999/02/22-rdf-syntax-ns#
   */
  type: _NS$C("type")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.RDF_INRUPT = RDF_INRUPT;
var rdfFactory$B = new rdfDataFactory.DataFactory();

function _NS$B(localName) {
  return rdfFactory$B.namedNode("http://www.w3.org/2000/01/rdf-schema#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - RDFS (RDF Schema) - a data-modelling vocabulary for RDF data
 */


var RDFS = {
  PREFIX: "rdfs",
  NAMESPACE: "http://www.w3.org/2000/01/rdf-schema#",
  PREFIX_AND_NAMESPACE: {
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#"
  },
  NS: _NS$B,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class resource, everything.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Resource: _NS$B("Resource"),

  /**
   * The class of classes.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Class: _NS$B("Class"),

  /**
   * The class of literal values, eg. textual strings and integers.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Literal: _NS$B("Literal"),

  /**
   * The class of RDF containers.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Container: _NS$B("Container"),

  /**
   * The class of container membership properties, rdf:_1, rdf:_2, ...,
                    all of which are sub-properties of 'member'.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  ContainerMembershipProperty: _NS$B("ContainerMembershipProperty"),

  /**
   * The class of RDF datatypes.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  Datatype: _NS$B("Datatype"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The defininition of the subject resource.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  isDefinedBy: _NS$B("isDefinedBy"),

  /**
   * A human-readable name for the subject.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  label: _NS$B("label"),

  /**
   * A description of the subject resource.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  comment: _NS$B("comment"),

  /**
   * The subject is a subclass of a class.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  subClassOf: _NS$B("subClassOf"),

  /**
   * A range of the subject property.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  range: _NS$B("range"),

  /**
   * A domain of the subject property.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  domain: _NS$B("domain"),

  /**
   * The subject is a subproperty of a property.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  subPropertyOf: _NS$B("subPropertyOf"),

  /**
   * Further information about the subject resource.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  seeAlso: _NS$B("seeAlso"),

  /**
   * A member of the subject resource.
   *
   * Defined by the vocabulary: http://www.w3.org/2000/01/rdf-schema#
   */
  member: _NS$B("member")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.RDFS = RDFS;
var rdfFactory$A = new rdfDataFactory.DataFactory();

function _NS$A(localName) {
  return rdfFactory$A.namedNode("http://www.w3.org/2001/XMLSchema#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * A vocabulary for describing XML Schema datatypes.
 */


var XSD = {
  PREFIX: "xsd",
  NAMESPACE: "http://www.w3.org/2001/XMLSchema#",
  PREFIX_AND_NAMESPACE: {
    "xsd": "http://www.w3.org/2001/XMLSchema#"
  },
  NS: _NS$A,
  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  changes: _NS$A("changes"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  string: _NS$A("string"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  boolean: _NS$A("boolean"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  float: _NS$A("float"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  double: _NS$A("double"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  decimal: _NS$A("decimal"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  dateTime: _NS$A("dateTime"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  duration: _NS$A("duration"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  hexBinary: _NS$A("hexBinary"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  base64Binary: _NS$A("base64Binary"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  anyURI: _NS$A("anyURI"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ID: _NS$A("ID"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREF: _NS$A("IDREF"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITY: _NS$A("ENTITY"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NOTATION: _NS$A("NOTATION"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  normalizedString: _NS$A("normalizedString"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  token: _NS$A("token"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  language: _NS$A("language"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  IDREFS: _NS$A("IDREFS"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  ENTITIES: _NS$A("ENTITIES"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKEN: _NS$A("NMTOKEN"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NMTOKENS: _NS$A("NMTOKENS"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  Name: _NS$A("Name"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  QName: _NS$A("QName"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  NCName: _NS$A("NCName"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  integer: _NS$A("integer"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonNegativeInteger: _NS$A("nonNegativeInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  positiveInteger: _NS$A("positiveInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  nonPositiveInteger: _NS$A("nonPositiveInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  negativeInteger: _NS$A("negativeInteger"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  byte: _NS$A("byte"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  int: _NS$A("int"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  long: _NS$A("long"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  short: _NS$A("short"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedByte: _NS$A("unsignedByte"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedInt: _NS$A("unsignedInt"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedLong: _NS$A("unsignedLong"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  unsignedShort: _NS$A("unsignedShort"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  date: _NS$A("date"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  time: _NS$A("time"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYearMonth: _NS$A("gYearMonth"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gYear: _NS$A("gYear"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonthDay: _NS$A("gMonthDay"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gDay: _NS$A("gDay"),

  /**
   * .
   *
   * Defined by the vocabulary: http://www.w3.org/2001/XMLSchema#
   */
  gMonth: _NS$A("gMonth")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.XSD = XSD;
var rdfFactory$z = new rdfDataFactory.DataFactory();

function _NS$z(localName) {
  return rdfFactory$z.namedNode("http://www.w3.org/2002/07/owl#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 *
  This ontology partially describes the built-in classes and
  properties that together form the basis of the RDF/XML syntax of OWL 2.
  The content of this ontology is based on Tables 6.1 and 6.2
  in Section 6.4 of the OWL 2 RDF-Based Semantics specification,
  available at http://www.w3.org/TR/owl2-rdf-based-semantics/.
  Please note that those tables do not include the different annotations
  (labels, comments and rdfs:isDefinedBy links) used in this file.
  Also note that the descriptions provided in this ontology do not
  provide a complete and correct formal description of either the syntax
  or the semantics of the introduced terms (please see the OWL 2
  recommendations for the complete and normative specifications).
  Furthermore, the information provided by this ontology may be
  misleading if not used with care. This ontology SHOULD NOT be imported
  into OWL ontologies. Importing this file into an OWL 2 DL ontology
  will cause it to become an OWL 2 Full ontology and may have other,
  unexpected, consequences.
   
 */


var OWL = {
  PREFIX: "owl",
  NAMESPACE: "http://www.w3.org/2002/07/owl#",
  PREFIX_AND_NAMESPACE: {
    "owl": "http://www.w3.org/2002/07/owl#"
  },
  NS: _NS$z,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of ontologies.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Ontology: _NS$z("Ontology"),

  /**
   * The class of collections of pairwise different individuals.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDifferent: _NS$z("AllDifferent"),

  /**
   * The class of collections of pairwise disjoint classes.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDisjointClasses: _NS$z("AllDisjointClasses"),

  /**
   * The class of collections of pairwise disjoint properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AllDisjointProperties: _NS$z("AllDisjointProperties"),

  /**
   * The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Annotation: _NS$z("Annotation"),

  /**
   * The class of annotation properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AnnotationProperty: _NS$z("AnnotationProperty"),

  /**
   * The class of asymmetric properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  AsymmetricProperty: _NS$z("AsymmetricProperty"),

  /**
   * The class of object properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  ObjectProperty: _NS$z("ObjectProperty"),

  /**
   * The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Axiom: _NS$z("Axiom"),

  /**
   * The class of OWL classes.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Class: _NS$z("Class"),

  /**
   * The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DataRange: _NS$z("DataRange"),

  /**
   * The class of data properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DatatypeProperty: _NS$z("DatatypeProperty"),

  /**
   * The class of deprecated classes.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DeprecatedClass: _NS$z("DeprecatedClass"),

  /**
   * The class of deprecated properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  DeprecatedProperty: _NS$z("DeprecatedProperty"),

  /**
   * The class of functional properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  FunctionalProperty: _NS$z("FunctionalProperty"),

  /**
   * The class of inverse-functional properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  InverseFunctionalProperty: _NS$z("InverseFunctionalProperty"),

  /**
   * The class of irreflexive properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  IrreflexiveProperty: _NS$z("IrreflexiveProperty"),

  /**
   * The class of named individuals.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  NamedIndividual: _NS$z("NamedIndividual"),

  /**
   * The class of OWL individuals.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Thing: _NS$z("Thing"),

  /**
   * The class of negative property assertions.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  NegativePropertyAssertion: _NS$z("NegativePropertyAssertion"),

  /**
   * This is the empty class.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Nothing: _NS$z("Nothing"),

  /**
   * The class of ontology properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  OntologyProperty: _NS$z("OntologyProperty"),

  /**
   * The class of reflexive properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  ReflexiveProperty: _NS$z("ReflexiveProperty"),

  /**
   * The class of property restrictions.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  Restriction: _NS$z("Restriction"),

  /**
   * The class of symmetric properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  SymmetricProperty: _NS$z("SymmetricProperty"),

  /**
   * The class of transitive properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  TransitiveProperty: _NS$z("TransitiveProperty"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The annotation property that provides version information for an ontology or another OWL construct.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  versionInfo: _NS$z("versionInfo"),

  /**
   * The property that determines the class that a universal property restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  allValuesFrom: _NS$z("allValuesFrom"),

  /**
   * The property that determines the predicate of an annotated axiom or annotated annotation.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedProperty: _NS$z("annotatedProperty"),

  /**
   * The property that determines the subject of an annotated axiom or annotated annotation.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedSource: _NS$z("annotatedSource"),

  /**
   * The property that determines the object of an annotated axiom or annotated annotation.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  annotatedTarget: _NS$z("annotatedTarget"),

  /**
   * The property that determines the predicate of a negative property assertion.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  assertionProperty: _NS$z("assertionProperty"),

  /**
   * The annotation property that indicates that a given ontology is backward compatible with another ontology.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  backwardCompatibleWith: _NS$z("backwardCompatibleWith"),

  /**
   * The data property that does not relate any individual to any data value.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  bottomDataProperty: _NS$z("bottomDataProperty"),

  /**
   * The object property that does not relate any two individuals.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  bottomObjectProperty: _NS$z("bottomObjectProperty"),

  /**
   * The property that determines the cardinality of an exact cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  cardinality: _NS$z("cardinality"),

  /**
   * The property that determines that a given class is the complement of another class.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  complementOf: _NS$z("complementOf"),

  /**
   * The property that determines that a given data range is the complement of another data range with respect to the data domain.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  datatypeComplementOf: _NS$z("datatypeComplementOf"),

  /**
   * The annotation property that indicates that a given entity has been deprecated.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  deprecated: _NS$z("deprecated"),

  /**
   * The property that determines that two given individuals are different.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  differentFrom: _NS$z("differentFrom"),

  /**
   * The property that determines that a given class is equivalent to the disjoint union of a collection of other classes.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  disjointUnionOf: _NS$z("disjointUnionOf"),

  /**
   * The property that determines that two given classes are disjoint.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  disjointWith: _NS$z("disjointWith"),

  /**
   * The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  distinctMembers: _NS$z("distinctMembers"),

  /**
   * The property that determines that two given classes are equivalent, and that is used to specify datatype definitions.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  equivalentClass: _NS$z("equivalentClass"),

  /**
   * The property that determines that two given properties are equivalent.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  equivalentProperty: _NS$z("equivalentProperty"),

  /**
   * The property that determines the collection of properties that jointly build a key.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasKey: _NS$z("hasKey"),

  /**
   * The property that determines the property that a self restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasSelf: _NS$z("hasSelf"),

  /**
   * The property that determines the individual that a has-value restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  hasValue: _NS$z("hasValue"),

  /**
   * The annotation property that indicates that a given ontology is incompatible with another ontology.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  incompatibleWith: _NS$z("incompatibleWith"),

  /**
   * The property that determines the collection of classes or data ranges that build an intersection.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  intersectionOf: _NS$z("intersectionOf"),

  /**
   * The property that determines that two given properties are inverse.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  inverseOf: _NS$z("inverseOf"),

  /**
   * The property that determines the cardinality of a maximum cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  maxCardinality: _NS$z("maxCardinality"),

  /**
   * The property that determines the cardinality of a maximum qualified cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  maxQualifiedCardinality: _NS$z("maxQualifiedCardinality"),

  /**
   * The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  members: _NS$z("members"),

  /**
   * The property that determines the cardinality of a minimum cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  minCardinality: _NS$z("minCardinality"),

  /**
   * The property that determines the cardinality of a minimum qualified cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  minQualifiedCardinality: _NS$z("minQualifiedCardinality"),

  /**
   * The property that determines the class that a qualified object cardinality restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onClass: _NS$z("onClass"),

  /**
   * The property that determines the data range that a qualified data cardinality restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onDataRange: _NS$z("onDataRange"),

  /**
   * The property that determines the datatype that a datatype restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onDatatype: _NS$z("onDatatype"),

  /**
   * The property that determines the collection of individuals or data values that build an enumeration.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  oneOf: _NS$z("oneOf"),

  /**
   * The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onProperties: _NS$z("onProperties"),

  /**
   * The property that determines the property that a property restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  onProperty: _NS$z("onProperty"),

  /**
   * The annotation property that indicates the predecessor ontology of a given ontology.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  priorVersion: _NS$z("priorVersion"),

  /**
   * The property that determines the n-tuple of properties that build a sub property chain of a given property.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  propertyChainAxiom: _NS$z("propertyChainAxiom"),

  /**
   * The property that determines that two given properties are disjoint.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  propertyDisjointWith: _NS$z("propertyDisjointWith"),

  /**
   * The property that determines the cardinality of an exact qualified cardinality restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  qualifiedCardinality: _NS$z("qualifiedCardinality"),

  /**
   * The property that determines that two given individuals are equal.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  sameAs: _NS$z("sameAs"),

  /**
   * The property that determines the class that an existential property restriction refers to.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  someValuesFrom: _NS$z("someValuesFrom"),

  /**
   * The property that determines the subject of a negative property assertion.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  sourceIndividual: _NS$z("sourceIndividual"),

  /**
   * The property that determines the object of a negative object property assertion.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  targetIndividual: _NS$z("targetIndividual"),

  /**
   * The property that determines the value of a negative data property assertion.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  targetValue: _NS$z("targetValue"),

  /**
   * The data property that relates every individual to every data value.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  topDataProperty: _NS$z("topDataProperty"),

  /**
   * The object property that relates every two individuals.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  topObjectProperty: _NS$z("topObjectProperty"),

  /**
   * The property that determines the collection of classes or data ranges that build a union.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  unionOf: _NS$z("unionOf"),

  /**
   * The property that determines the collection of facet-value pairs that define a datatype restriction.
   *
   * Defined by the vocabulary: http://www.w3.org/2002/07/owl#
   */
  withRestrictions: _NS$z("withRestrictions")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.OWL = OWL;
var rdfFactory$y = new rdfDataFactory.DataFactory();

function _NS$y(localName) {
  return rdfFactory$y.namedNode("http://www.w3.org/ns/ldp#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */


var LDP = {
  PREFIX: "ldp",
  NAMESPACE: "http://www.w3.org/ns/ldp#",
  PREFIX_AND_NAMESPACE: {
    "ldp": "http://www.w3.org/ns/ldp#"
  },
  NS: _NS$y,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Resource: _NS$y("Resource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  RDFSource: _NS$y("RDFSource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  NonRDFSource: _NS$y("NonRDFSource"),

  /**
   * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Container: _NS$y("Container"),

  /**
   * An LDPC that uses a predefined predicate to simply link to its contained resources.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  BasicContainer: _NS$y("BasicContainer"),

  /**
   * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  DirectContainer: _NS$y("DirectContainer"),

  /**
   * An LDPC that has the flexibility of choosing what form the membership triples take.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  IndirectContainer: _NS$y("IndirectContainer"),

  /**
   * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Page: _NS$y("Page"),

  /**
   * Element in the list of sorting criteria used by the server to assign container members to pages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  PageSortCriterion: _NS$y("PageSortCriterion"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  hasMemberRelation: _NS$y("hasMemberRelation"),

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  isMemberOfRelation: _NS$y("isMemberOfRelation"),

  /**
   * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  membershipResource: _NS$y("membershipResource"),

  /**
   * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  insertedContentRelation: _NS$y("insertedContentRelation"),

  /**
   * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  member: _NS$y("member"),

  /**
   * Links a container with resources created through the container.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  contains: _NS$y("contains"),

  /**
   * Links a resource with constraints that the server requires requests like creation and update to conform to.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  constrainedBy: _NS$y("constrainedBy"),

  /**
   * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCriteria: _NS$y("pageSortCriteria"),

  /**
   * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortPredicate: _NS$y("pageSortPredicate"),

  /**
   * The ascending/descending/etc order used to order the members across pages in a page sequence.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortOrder: _NS$y("pageSortOrder"),

  /**
   * The collation used to order the members across pages in a page sequence when comparing strings.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCollation: _NS$y("pageSortCollation"),

  /**
   * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSequence: _NS$y("pageSequence"),

  /**
   * Links a resource to a container where notifications for the resource can be created and discovered.
   *
   * Defined by the vocabulary: https://www.w3.org/TR/ldn/
   */
  inbox: _NS$y("inbox")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.LDP = LDP;
var rdfFactory$x = new rdfDataFactory.DataFactory();

function _NS$x(localName) {
  return rdfFactory$x.namedNode("http://www.w3.org/ns/ldp#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Vocabulary URIs defined in the Linked Data Platform (LDP) namespace.
 */


var LDP_INRUPT = {
  PREFIX: "ldp-inrupt",
  NAMESPACE: "http://www.w3.org/ns/ldp#",
  PREFIX_AND_NAMESPACE: {
    "ldp-inrupt": "http://www.w3.org/ns/ldp#"
  },
  NS: _NS$x,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A HTTP-addressable resource whose lifecycle is managed by a LDP server.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Resource: _NS$x("Resource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is represented as RDF.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  RDFSource: _NS$x("RDFSource"),

  /**
   * A Linked Data Platform Resource (LDPR) whose state is NOT represented as RDF.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  NonRDFSource: _NS$x("NonRDFSource"),

  /**
   * A Linked Data Platform RDF Source (LDP-RS) that also conforms to additional patterns and conventions for managing membership. Readers should refer to the specification defining this ontology for the list of behaviors associated with it.
   *
   * This term has [1] label and comment, in the language [fr].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Container: _NS$x("Container"),

  /**
   * An LDPC that uses a predefined predicate to simply link to its contained resources.
   *
   * This term has [1] label and comment, in the language [fr].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  BasicContainer: _NS$x("BasicContainer"),

  /**
   * An LDPC that is similar to a LDP-DC but it allows an indirection with the ability to list as member a resource, such as a URI representing a real-world object, that is different from the resource that is created.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  DirectContainer: _NS$x("DirectContainer"),

  /**
   * An LDPC that has the flexibility of choosing what form the membership triples take.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  IndirectContainer: _NS$x("IndirectContainer"),

  /**
   * URI signifying that the resource is an in-sequence page resource, as defined by LDP Paging.  Typically used on Link rel='type' response headers.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  Page: _NS$x("Page"),

  /**
   * Element in the list of sorting criteria used by the server to assign container members to pages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  PageSortCriterion: _NS$x("PageSortCriterion"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < membership-constant-URI , object-of-hasMemberRelation, member-URI >.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  hasMemberRelation: _NS$x("hasMemberRelation"),

  /**
   * Indicates which predicate is used in membership triples, and that the membership triple pattern is < member-URI , object-of-isMemberOfRelation, membership-constant-URI >.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  isMemberOfRelation: _NS$x("isMemberOfRelation"),

  /**
   * Indicates the membership-constant-URI in a membership triple.  Depending upon the membership triple pattern a container uses, as indicated by the presence of ldp:hasMemberRelation or ldp:isMemberOfRelation, the membership-constant-URI might occupy either the subject or object position in membership triples.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  membershipResource: _NS$x("membershipResource"),

  /**
   * Indicates which triple in a creation request should be used as the member-URI value in the membership triple added when the creation request is successful.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  insertedContentRelation: _NS$x("insertedContentRelation"),

  /**
   * LDP servers should use this predicate as the membership predicate if there is no obvious predicate from an application vocabulary to use.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  member: _NS$x("member"),

  /**
   * Links a container with resources created through the container.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  contains: _NS$x("contains"),

  /**
   * Links a resource with constraints that the server requires requests like creation and update to conform to.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  constrainedBy: _NS$x("constrainedBy"),

  /**
   * Link to the list of sorting criteria used by the server in a representation.  Typically used on Link response headers as an extension link relation URI in the rel= parameter.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCriteria: _NS$x("pageSortCriteria"),

  /**
   * Predicate used to specify the order of the members across a page sequence's in-sequence page resources; it asserts nothing about the order of members in the representation of a single page.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortPredicate: _NS$x("pageSortPredicate"),

  /**
   * The ascending/descending/etc order used to order the members across pages in a page sequence.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortOrder: _NS$x("pageSortOrder"),

  /**
   * The collation used to order the members across pages in a page sequence when comparing strings.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSortCollation: _NS$x("pageSortCollation"),

  /**
   * Link to a page sequence resource, as defined by LDP Paging.  Typically used to communicate the sorting criteria used to allocate LDPC members to pages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ldp#
   */
  pageSequence: _NS$x("pageSequence"),

  /**
   * Links a resource to a container where notifications for the resource can be created and discovered.
   *
   * Defined by the vocabulary: https://www.w3.org/TR/ldn/
   */
  inbox: _NS$x("inbox")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.LDP_INRUPT = LDP_INRUPT;
var rdfFactory$w = new rdfDataFactory.DataFactory();

function _NS$w(localName) {
  return rdfFactory$w.namedNode("http://www.w3.org/2011/http#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * A namespace for describing HTTP messages (http://www.w3.org/Protocols/rfc2616/rfc2616.html)
 */


var HTTP = {
  PREFIX: "http",
  NAMESPACE: "http://www.w3.org/2011/http#",
  PREFIX_AND_NAMESPACE: {
    "http": "http://www.w3.org/2011/http#"
  },
  NS: _NS$w,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A connection used for HTTP transfer.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Connection: _NS$w("Connection"),

  /**
   * An entity header in an HTTP message.
   */
  EntityHeader: _NS$w("EntityHeader"),

  /**
   * A header in an HTTP message.
   */
  MessageHeader: _NS$w("MessageHeader"),

  /**
   * A general header in an HTTP message.
   */
  GeneralHeader: _NS$w("GeneralHeader"),

  /**
   * A part of a deconstructed header value.
   */
  HeaderElement: _NS$w("HeaderElement"),

  /**
   * A header name.
   */
  HeaderName: _NS$w("HeaderName"),

  /**
   * An HTTP message.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Message: _NS$w("Message"),

  /**
   * The HTTP method used for the request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Method: _NS$w("Method"),

  /**
   * A parameter for a part of a header value.
   */
  Parameter: _NS$w("Parameter"),

  /**
   * An HTTP request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Request: _NS$w("Request"),

  /**
   * A header in an HTTP request message.
   */
  RequestHeader: _NS$w("RequestHeader"),

  /**
   * An HTTP response.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  Response: _NS$w("Response"),

  /**
   * A header in an HTTP response message.
   */
  ResponseHeader: _NS$w("ResponseHeader"),

  /**
   * The status code of an HTTP response.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  StatusCode: _NS$w("StatusCode"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The absolute request URI.
   */
  absoluteURI: _NS$w("absoluteURI"),

  /**
   * The request URI of an HTTP request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  requestURI: _NS$w("requestURI"),

  /**
   * The absolute path sort of request URI.
   */
  absolutePath: _NS$w("absolutePath"),

  /**
   * The authority sort of request URI.
   */
  authority: _NS$w("authority"),

  /**
   * The entity body of an HTTP message.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  body: _NS$w("body"),

  /**
   * The authority of a connection used for the HTTP transfer.
   */
  connectionAuthority: _NS$w("connectionAuthority"),

  /**
   * The name of a header element.
   */
  elementName: _NS$w("elementName"),

  /**
   * The value of a header element.
   */
  elementValue: _NS$w("elementValue"),

  /**
   * The name of an HTTP header field.
   */
  fieldName: _NS$w("fieldName"),

  /**
   * The value of an HTTP header field.
   */
  fieldValue: _NS$w("fieldValue"),

  /**
   * The deconstructed parts of an HTTP header value.
   */
  headerElements: _NS$w("headerElements"),

  /**
   * The name of an HTTP header.
   */
  hdrName: _NS$w("hdrName"),

  /**
   * The headers in an HTTP message.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  headers: _NS$w("headers"),

  /**
   * The HTTP version of an HTTP message.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  httpVersion: _NS$w("httpVersion"),

  /**
   * The HTTP method used for the HTTP request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  mthd: _NS$w("mthd"),

  /**
   * The HTTP method name used for the HTTP request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  methodName: _NS$w("methodName"),

  /**
   * The name of a parameter in a part of a deconstructed HTTP header value.
   */
  paramName: _NS$w("paramName"),

  /**
   * The parameters in a part of a deconstructed HTTP header value.
   */
  params: _NS$w("params"),

  /**
   * The value of a parameter in a part of a deconstructed HTTP header value.
   */
  paramValue: _NS$w("paramValue"),

  /**
   * The reason phrase (status text) of an HTTP response.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  reasonPhrase: _NS$w("reasonPhrase"),

  /**
   * The HTTP requests made via a connection.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  requests: _NS$w("requests"),

  /**
   * The HTTP response sent in answer to an HTTP request.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  resp: _NS$w("resp"),

  /**
   * The status code of an HTTP response.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  sc: _NS$w("sc"),

  /**
   * The status code number.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  statusCodeNumber: _NS$w("statusCodeNumber"),

  /**
   * The status code value of an HTTP response.
   *
   * Defined by the vocabulary: http://www.ietf.org/rfc/rfc2616.txt
   */
  statusCodeValue: _NS$w("statusCodeValue")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.HTTP = HTTP;
var rdfFactory$v = new rdfDataFactory.DataFactory();

function _NS$v(localName) {
  return rdfFactory$v.namedNode("http://www.w3.org/2007/ont/httph#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This vocabulary is a one deemed to contain all HTTP headers.
The rdflib.js library uses it as for relationships between an HTTP response
and the  content (value) of the HTTP header in that response.     The ontology
is deemed to contain one property for every HTTP header, standard or not.
The property in this ontology has a localname which is the header field converted
to lower case.
 */


var HTTPH_INRUPT = {
  PREFIX: "httph-inrupt",
  NAMESPACE: "http://www.w3.org/2007/ont/httph#",
  PREFIX_AND_NAMESPACE: {
    "httph-inrupt": "http://www.w3.org/2007/ont/httph#"
  },
  NS: _NS$v,
  // *******************
  // All the Properties.
  // *******************

  /**
   * See the HTTP specification
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph
   */
  content_type: _NS$v("content-type"),

  /**
   * See the HTTP specification
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
   */
  accept: _NS$v("accept"),

  /**
   * See the HTTP specification
   *
   * Defined by the vocabulary: http://www.w3.org/2007/ont/httph#
   */
  accept_language: _NS$v("accept-language")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.HTTPH_INRUPT = HTTPH_INRUPT;
var rdfFactory$u = new rdfDataFactory.DataFactory();

function _NS$u(localName) {
  return rdfFactory$u.namedNode("http://purl.org/ontology/olo/core#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - OLO (Ordered List Ontology) - for describing ordered lists
 */


var OLO = {
  PREFIX: "olo",
  NAMESPACE: "http://purl.org/ontology/olo/core#",
  PREFIX_AND_NAMESPACE: {
    "olo": "http://purl.org/ontology/olo/core#"
  },
  NS: _NS$u,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An ordered list with a given length an indexed items.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  OrderedList: _NS$u("OrderedList"),

  /**
   * A slot in an ordered list with a fixed index.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  Slot: _NS$u("Slot"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The length of an ordered list.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  length: _NS$u("length"),

  /**
   * Associates the next slot in an ordered list.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  next: _NS$u("next"),

  /**
   * An index of a slot in an ordered list.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  index: _NS$u("index"),

  /**
   * An ordered list of an slot.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  ordered_list: _NS$u("ordered_list"),

  /**
   * Associates the previous slot in an ordered list
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  previous: _NS$u("previous"),

  /**
   * An item of a slot in an ordered list.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  item: _NS$u("item"),

  /**
   * A slot in an ordered list.
   *
   * Defined by the vocabulary: http://purl.org/ontology/olo/core#
   */
  slot: _NS$u("slot")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.OLO = OLO;
var rdfFactory$t = new rdfDataFactory.DataFactory();

function _NS$t(localName) {
  return rdfFactory$t.namedNode("http://www.w3.org/2004/02/skos/core#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * An RDF vocabulary for describing the basic structure and content of concept schemes such as thesauri, classification schemes, subject heading lists, taxonomies, 'folksonomies', other types of controlled vocabulary, and also concept schemes embedded in glossaries and terminologies.
 */


var SKOS = {
  PREFIX: "skos",
  NAMESPACE: "http://www.w3.org/2004/02/skos/core#",
  PREFIX_AND_NAMESPACE: {
    "skos": "http://www.w3.org/2004/02/skos/core#"
  },
  NS: _NS$t,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An idea or notion; a unit of thought.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  Concept: _NS$t("Concept"),

  /**
   * A set of concepts, optionally including statements about semantic relationships between those concepts.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  ConceptScheme: _NS$t("ConceptScheme"),

  /**
   * A meaningful collection of concepts.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  Collection: _NS$t("Collection"),

  /**
   * An ordered collection of concepts, where both the grouping and the ordering are meaningful.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  OrderedCollection: _NS$t("OrderedCollection"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A statement or formal explanation of the meaning of a concept.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  definition: _NS$t("definition"),

  /**
   * A note that helps to clarify the meaning and/or the use of a concept.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  scopeNote: _NS$t("scopeNote"),

  /**
   * An example of the use of a concept.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  example: _NS$t("example"),

  /**
   * Relates a resource (for example a concept) to a concept scheme in which it is included.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  inScheme: _NS$t("inScheme"),

  /**
   * Relates, by convention, a concept scheme to a concept which is topmost in the broader/narrower concept hierarchies for that scheme, providing an entry point to these hierarchies.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  hasTopConcept: _NS$t("hasTopConcept"),

  /**
   * Relates a concept to the concept scheme that it is a top level concept of.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  topConceptOf: _NS$t("topConceptOf"),

  /**
   * A resource has no more than one value of skos:prefLabel per language tag, and no more than one value of skos:prefLabel without language tag.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  prefLabel: _NS$t("prefLabel"),

  /**
   * The range of skos:altLabel is the class of RDF plain literals.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  altLabel: _NS$t("altLabel"),

  /**
   * skos:prefLabel, skos:altLabel and skos:hiddenLabel are pairwise disjoint properties.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  hiddenLabel: _NS$t("hiddenLabel"),

  /**
   * A notation, also known as classification code, is a string of characters such as "T58.5" or "303.4833" used to uniquely identify a concept within the scope of a given concept scheme.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  notation: _NS$t("notation"),

  /**
   * A general note, for any purpose.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  note: _NS$t("note"),

  /**
   * A note about a modification to a concept.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  changeNote: _NS$t("changeNote"),

  /**
   * A note for an editor, translator or maintainer of the vocabulary.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  editorialNote: _NS$t("editorialNote"),

  /**
   * A note about the past state/use/meaning of a concept.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  historyNote: _NS$t("historyNote"),

  /**
   * Links a concept to a concept related by meaning.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  semanticRelation: _NS$t("semanticRelation"),

  /**
   * Broader concepts are typically rendered as parents in a concept hierarchy (tree).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broader: _NS$t("broader"),

  /**
   * skos:broaderTransitive is a transitive superproperty of skos:broader.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broaderTransitive: _NS$t("broaderTransitive"),

  /**
   * Narrower concepts are typically rendered as children in a concept hierarchy (tree).
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrower: _NS$t("narrower"),

  /**
   * skos:narrowerTransitive is a transitive superproperty of skos:narrower.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrowerTransitive: _NS$t("narrowerTransitive"),

  /**
   * skos:related is disjoint with skos:broaderTransitive
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  related: _NS$t("related"),

  /**
   * Relates a collection to one of its members.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  member: _NS$t("member"),

  /**
   * For any resource, every item in the list given as the value of the
      skos:memberList property is also a value of the skos:member property.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  memberList: _NS$t("memberList"),

  /**
   * These concept mapping relations mirror semantic relations, and the data model defined below is similar (with the exception of skos:exactMatch) to the data model defined for semantic relations. A distinct vocabulary is provided for concept mapping relations, to provide a convenient way to differentiate links within a concept scheme from links between concept schemes. However, this pattern of usage is not a formal requirement of the SKOS data model, and relies on informal definitions of best practice.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  mappingRelation: _NS$t("mappingRelation"),

  /**
   * skos:broadMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  broadMatch: _NS$t("broadMatch"),

  /**
   * skos:narrowMatch is used to state a hierarchical mapping link between two conceptual resources in different concept schemes.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  narrowMatch: _NS$t("narrowMatch"),

  /**
   * skos:relatedMatch is used to state an associative mapping link between two conceptual resources in different concept schemes.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  relatedMatch: _NS$t("relatedMatch"),

  /**
   * skos:exactMatch is disjoint with each of the properties skos:broadMatch and skos:relatedMatch.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  exactMatch: _NS$t("exactMatch"),

  /**
   * skos:closeMatch is used to link two concepts that are sufficiently similar that they can be used interchangeably in some information retrieval applications. In order to avoid the possibility of "compound errors" when combining mappings across more than two concept schemes, skos:closeMatch is not declared to be a transitive property.
   *
   * Defined by the vocabulary: http://www.w3.org/2004/02/skos/core
   */
  closeMatch: _NS$t("closeMatch")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SKOS = SKOS;
var rdfFactory$s = new rdfDataFactory.DataFactory();

function _NS$s(localName) {
  return rdfFactory$s.namedNode("http://www.w3.org/2008/05/skos-xl#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * An RDF vocabulary extending SKOS and allowing the description and linking of lexical entities.
 */


var SKOS_XL = {
  PREFIX: "skos-xl",
  NAMESPACE: "http://www.w3.org/2008/05/skos-xl#",
  PREFIX_AND_NAMESPACE: {
    "skos-xl": "http://www.w3.org/2008/05/skos-xl#"
  },
  NS: _NS$s,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A special class of lexical entities.
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  Label: _NS$s("Label"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * If two instances of the class skosxl:Label have the same literal form, they are not necessarily the same resource.
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  literalForm: _NS$s("literalForm"),

  /**
   * If C skosxl:prefLabel L and L skosxl:literalForm V, then X skos:prefLabel V.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#prefLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  prefLabel: _NS$s("prefLabel"),

  /**
   * If C skosxl:altLabel L and L skosxl:literalForm V, then X skos:altLabel V.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#altLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  altLabel: _NS$s("altLabel"),

  /**
   * If C skosxl:hiddenLabel L and L skosxl:literalForm V, then C skos:hiddenLabel V.
   *
   * See also:
   *  - http://www.w3.org/2004/02/skos/core#hiddenLabel
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  hiddenLabel: _NS$s("hiddenLabel"),

  /**
   * The property skosxl:labelRelation is used for representing binary ('direct') relations between instances of the class skosxl:Label.
   *
   * Defined by the vocabulary: http://www.w3.org/2008/05/skos-xl
   */
  labelRelation: _NS$s("labelRelation")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SKOS_XL = SKOS_XL;
var rdfFactory$r = new rdfDataFactory.DataFactory();

function _NS$r(localName) {
  return rdfFactory$r.namedNode("http://www.w3.org/ns/ui#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - UI Ontology
 */


var UI = {
  PREFIX: "ui",
  NAMESPACE: "http://www.w3.org/ns/ui#",
  PREFIX_AND_NAMESPACE: {
    "ui": "http://www.w3.org/ns/ui#"
  },
  NS: _NS$r,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   */
  BooleanField: _NS$r("BooleanField"),

  /**
   *
   */
  NumericField: _NS$r("NumericField"),

  /**
   *
   */
  Group: _NS$r("Group"),

  /**
   *
   */
  Choice: _NS$r("Choice"),

  /**
   * A form can be any type of single field, or typically a Group of several fields,
    including interspersed headings and comments.
   */
  Form: _NS$r("Form"),

  /**
   *
   */
  Single: _NS$r("Single"),

  /**
   * A classifier allows the user to select the type of an object.
    The possible types must be subclasses of some overall class, the "category".
    (Ideally, the superclass is also set up as the disjoint union of the subclasses,
    if they are disjoint.)
       The form normally stores the resulting classes using an r:type triple,
    but a different predicate can be used if required, so the classifier field
    needs is 'property' defined too.
       If the subclass selected itself is has subclasses defined, the user can
    recursively select from them in turn, as many levels as needed.
   */
  Classifier: _NS$r("Classifier"),

  /**
   *
   */
  ColorField: _NS$r("ColorField"),

  /**
   *
   */
  ValueField: _NS$r("ValueField"),

  /**
   * Comment
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  Comment: _NS$r("Comment"),

  /**
   *
   */
  DateField: _NS$r("DateField"),

  /**
   *
   */
  DateTimeField: _NS$r("DateTimeField"),

  /**
   *
   */
  DecimalField: _NS$r("DecimalField"),

  /**
   *
   */
  EmailField: _NS$r("EmailField"),

  /**
   *
   */
  Heading: _NS$r("Heading"),

  /**
   *
   */
  SingleLineTextField: _NS$r("SingleLineTextField"),

  /**
   *
   */
  Options: _NS$r("Options"),

  /**
   *
   */
  TextField: _NS$r("TextField"),

  /**
   *
   */
  IntegerField: _NS$r("IntegerField"),

  /**
   *
   */
  FloatField: _NS$r("FloatField"),

  /**
   *
   */
  PhoneField: _NS$r("PhoneField"),

  /**
   *
   */
  Multiple: _NS$r("Multiple"),

  /**
   *
   */
  MultiLineTextField: _NS$r("MultiLineTextField"),

  /**
   * A NamedNodeURIField is like a SingleLineTextField, except
        that the value it generates is not a literal string but an RDF node with the given URI.
        Normally users should not see URIs. When they do, this a way to do it.
        
   */
  NamedNodeURIField: _NS$r("NamedNodeURIField"),

  /**
   *
   */
  TriStateField: _NS$r("TriStateField"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * from
   */
  from: _NS$r("from"),

  /**
   * Label
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  label: _NS$r("label"),

  /**
   * Many fields prompt for information about a given property of the subject.
    When field is filled in, this gives which property is written into the data.
   */
  property: _NS$r("property"),

  /**
   * The value for which this case is selected.
   */
  for: _NS$r("for"),

  /**
   *
   */
  use: _NS$r("use"),

  /**
   * parts
   */
  parts: _NS$r("parts"),

  /**
   * Must be a valid CSS color string such as one could put in
            an HTML style attribute.  This must be in the #xxxxxx form,
            (with 6 digits of lowercase hex) so that it
            can work eg with Graphviz.
            As this is just an encoded array of RGB values,
            you can do math with these, such as blending, complement, etc.
   */
  Color: _NS$r("Color"),

  /**
   * Contents
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  contents: _NS$r("contents"),

  /**
   * size of field
   */
  size: _NS$r("size"),

  /**
   * Must be a valid CSS style string such as one could put in
        an HTML style attribute.  Depending on the user interface system, this can
        by given to individuals, classes or properties. It is up to a user interface
        which wants to draw on them to pick how it uses styles from which parts
        of the data it has.  For example, the style of a class may be picked
        to distinguish information about things in that class.
   */
  style: _NS$r("style"),

  /**
   * The superclass subclasses of which will be selected.
   */
  category: _NS$r("category"),

  /**
   * Max length
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxLength: _NS$r("maxLength"),

  /**
   * Many fields prompt for information about a given property of the subject
   */
  dependingOn: _NS$r("dependingOn"),

  /**
   * part
   */
  part: _NS$r("part"),

  /**
   * A form which may be used to collect information about a
    hitherto locally undocumented instance instance of this class.
   */
  creationForm: _NS$r("creationForm"),

  /**
   * Time field
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  TimeField: _NS$r("TimeField"),

  /**
   * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
      */
  annotationForm: _NS$r("annotationForm"),

  /**
   * background color
   */
  backgroundColor: _NS$r("backgroundColor"),

  /**
   * URI or base64 representation of an image
   */
  backgroundImage: _NS$r("backgroundImage"),

  /**
   * Base
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  base: _NS$r("base"),

  /**
   * color
   */
  color: _NS$r("color"),

  /**
   * Default error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  defaultError: _NS$r("defaultError"),

  /**
   * A string for the UI to use if the user needs a longer
        prompts than just a field name, the s:label.
   */
  prompt: _NS$r("prompt"),

  /**
   * A really simple way of enabling user interfaces to
            create new information about a class of things is to make a define of properties
            to be specified when a information about a new item
            ("New item" here means an item which the system
            does not have prvious information about yet,
            not an items which has just been created,
            like new friend as opposed to new baby)
   */
  initialProperties: _NS$r("initialProperties"),

  /**
   * Maximum date offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxDateOffset: _NS$r("maxDateOffset"),

  /**
   * Maximum datetime offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  maxDatetimeOffset: _NS$r("maxDatetimeOffset"),

  /**
   * max
   */
  maxValue: _NS$r("maxValue"),

  /**
   * Minimum date offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minDateOffset: _NS$r("minDateOffset"),

  /**
   * Minimum datetime offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minDatetimeOffset: _NS$r("minDatetimeOffset"),

  /**
   * Min length
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  minLength: _NS$r("minLength"),

  /**
   * min
   */
  minValue: _NS$r("minValue"),

  /**
   * Name
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  name: _NS$r("name"),

  /**
   * Old value
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  oldValue: _NS$r("oldValue"),

  /**
   * Parent property
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  parentProperty: _NS$r("parentProperty"),

  /**
   * Parts clone
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  partsClone: _NS$r("partsClone"),

  /**
   * Pattern
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  pattern: _NS$r("pattern"),

  /**
   * Reference
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  reference: _NS$r("reference"),

  /**
   * Required
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  required: _NS$r("required"),

  /**
   * Required error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  requiredError: _NS$r("requiredError"),

  /**
   * The sequence in which this item is arranged with repect to other parts.
   */
  seqeunce: _NS$r("seqeunce"),

  /**
   * A property which typically is used to sort
        members of a given class.
   */
  sortBy: _NS$r("sortBy"),

  /**
   * When individuals or classes must be sorted, then
        if they are given different values of sortPriority a user agent can
        use this as a hint to how to present information.
   */
  sortPriority: _NS$r("sortPriority"),

  /**
   * This  is a crude way of specifying a table-based
            view for objects of this class.
   */
  tableProperties: _NS$r("tableProperties"),

  /**
   * Valid
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  valid: _NS$r("valid"),

  /**
   * Validation error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  validationError: _NS$r("validationError"),

  /**
   * Value
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  value: _NS$r("value"),

  /**
   * Values
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/ui
   */
  values: _NS$r("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.UI = UI;
var rdfFactory$q = new rdfDataFactory.DataFactory();

function _NS$q(localName) {
  return rdfFactory$q.namedNode("http://www.w3.org/ns/ui#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Extension to UI terms providing multilingual alternative names and translations for comments (e.g. for use directly as labels or tool-tips in user interfaces or error messages)
 */


var UI_INRUPT = {
  PREFIX: "ui-inrupt",
  NAMESPACE: "http://www.w3.org/ns/ui#",
  PREFIX_AND_NAMESPACE: {
    "ui-inrupt": "http://www.w3.org/ns/ui#"
  },
  NS: _NS$q,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   */
  BooleanField: _NS$q("BooleanField"),

  /**
   *
   */
  NumericField: _NS$q("NumericField"),

  /**
   *
   */
  ValueField: _NS$q("ValueField"),

  /**
   *
   */
  Group: _NS$q("Group"),

  /**
   * A form can be any type of single field, or typically a Group of several fields,
    including interspersed headings and comments.
   */
  Form: _NS$q("Form"),

  /**
   *
   */
  Single: _NS$q("Single"),

  /**
   *
   */
  Choice: _NS$q("Choice"),

  /**
   * A classifier allows the user to select the type of an object.
    The possible types must be subclasses of some overall class, the "category".
    (Ideally, the superclass is also set up as the disjoint union of the subclasses,
    if they are disjoint.)
       The form normally stores the resulting classes using an r:type triple,
    but a different predicate can be used if required, so the classifier field
    needs is 'property' defined too.
       If the subclass selected itself is has subclasses defined, the user can
    recursively select from them in turn, as many levels as needed.
   */
  Classifier: _NS$q("Classifier"),

  /**
   *
   */
  ColorField: _NS$q("ColorField"),

  /**
   * Comment
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  Comment: _NS$q("Comment"),

  /**
   *
   */
  DateField: _NS$q("DateField"),

  /**
   *
   */
  DateTimeField: _NS$q("DateTimeField"),

  /**
   *
   */
  DecimalField: _NS$q("DecimalField"),

  /**
   *
   */
  EmailField: _NS$q("EmailField"),

  /**
   *
   */
  Heading: _NS$q("Heading"),

  /**
   *
   */
  SingleLineTextField: _NS$q("SingleLineTextField"),

  /**
   *
   */
  TextField: _NS$q("TextField"),

  /**
   *
   */
  Options: _NS$q("Options"),

  /**
   *
   */
  IntegerField: _NS$q("IntegerField"),

  /**
   *
   */
  FloatField: _NS$q("FloatField"),

  /**
   *
   */
  PhoneField: _NS$q("PhoneField"),

  /**
   *
   */
  Multiple: _NS$q("Multiple"),

  /**
   *
   */
  MultiLineTextField: _NS$q("MultiLineTextField"),

  /**
   * A NamedNodeURIField is like a SingleLineTextField, except
        that the value it generates is not a literal string but an RDF node with the given URI.
        Normally users should not see URIs. When they do, this a way to do it.
        
   */
  NamedNodeURIField: _NS$q("NamedNodeURIField"),

  /**
   *
   */
  TriStateField: _NS$q("TriStateField"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * parts
   */
  parts: _NS$q("parts"),

  /**
   * from
   */
  from: _NS$q("from"),

  /**
   * Label
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  label: _NS$q("label"),

  /**
   * Many fields prompt for information about a given property of the subject.
    When field is filled in, this gives which property is written into the data.
   */
  property: _NS$q("property"),

  /**
   * The value for which this case is selected.
   */
  for: _NS$q("for"),

  /**
   * A string for the UI to use if the user needs a longer
        prompts than just a field name, the s:label.
   */
  prompt: _NS$q("prompt"),

  /**
   *
   */
  use: _NS$q("use"),

  /**
   * A form which may be used to collect information about a
    hitherto locally undocumented instance instance of this class.
   */
  creationForm: _NS$q("creationForm"),

  /**
   * Must be a valid CSS color string such as one could put in
            an HTML style attribute.  This must be in the #xxxxxx form,
            (with 6 digits of lowercase hex) so that it
            can work eg with Graphviz.
            As this is just an encoded array of RGB values,
            you can do math with these, such as blending, complement, etc.
   */
  Color: _NS$q("Color"),

  /**
   * Contents
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  contents: _NS$q("contents"),

  /**
   * size of field
   */
  size: _NS$q("size"),

  /**
   * Must be a valid CSS style string such as one could put in
        an HTML style attribute.  Depending on the user interface system, this can
        by given to individuals, classes or properties. It is up to a user interface
        which wants to draw on them to pick how it uses styles from which parts
        of the data it has.  For example, the style of a class may be picked
        to distinguish information about things in that class.
   */
  style: _NS$q("style"),

  /**
   * The superclass subclasses of which will be selected.
   */
  category: _NS$q("category"),

  /**
   * Many fields prompt for information about a given property of the subject
   */
  dependingOn: _NS$q("dependingOn"),

  /**
   * Max length
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxLength: _NS$q("maxLength"),

  /**
   * part
   */
  part: _NS$q("part"),

  /**
   * Time field
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  TimeField: _NS$q("TimeField"),

  /**
   * A form which may be used to add more infromation to an
  instance of this class which we know something about.  Anything from
  adding just add one more fact, to adding a whole lot of information about a specific
  facet of the thing.
      */
  annotationForm: _NS$q("annotationForm"),

  /**
   * background color
   */
  backgroundColor: _NS$q("backgroundColor"),

  /**
   * URI or base64 representation of an image
   */
  backgroundImage: _NS$q("backgroundImage"),

  /**
   * Base
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  base: _NS$q("base"),

  /**
   * color
   */
  color: _NS$q("color"),

  /**
   * Default error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  defaultError: _NS$q("defaultError"),

  /**
   * A really simple way of enabling user interfaces to
            create new information about a class of things is to make a define of properties
            to be specified when a information about a new item
            ("New item" here means an item which the system
            does not have prvious information about yet,
            not an items which has just been created,
            like new friend as opposed to new baby)
   */
  initialProperties: _NS$q("initialProperties"),

  /**
   * Maximum date offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxDateOffset: _NS$q("maxDateOffset"),

  /**
   * Maximum datetime offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  maxDatetimeOffset: _NS$q("maxDatetimeOffset"),

  /**
   * max
   */
  maxValue: _NS$q("maxValue"),

  /**
   * Minimum date offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minDateOffset: _NS$q("minDateOffset"),

  /**
   * Minimum datetime offset
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minDatetimeOffset: _NS$q("minDatetimeOffset"),

  /**
   * Min length
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  minLength: _NS$q("minLength"),

  /**
   * min
   */
  minValue: _NS$q("minValue"),

  /**
   * Name
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  name: _NS$q("name"),

  /**
   * Old value
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  oldValue: _NS$q("oldValue"),

  /**
   * Parent property
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  parentProperty: _NS$q("parentProperty"),

  /**
   * Parts clone
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  partsClone: _NS$q("partsClone"),

  /**
   * Pattern
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  pattern: _NS$q("pattern"),

  /**
   * Reference
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  reference: _NS$q("reference"),

  /**
   * Required
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  required: _NS$q("required"),

  /**
   * Required error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  requiredError: _NS$q("requiredError"),

  /**
   * The sequence in which this item is arranged with repect to other parts.
   */
  seqeunce: _NS$q("seqeunce"),

  /**
   * A property which typically is used to sort
        members of a given class.
   */
  sortBy: _NS$q("sortBy"),

  /**
   * When individuals or classes must be sorted, then
        if they are given different values of sortPriority a user agent can
        use this as a hint to how to present information.
   */
  sortPriority: _NS$q("sortPriority"),

  /**
   * This  is a crude way of specifying a table-based
            view for objects of this class.
   */
  tableProperties: _NS$q("tableProperties"),

  /**
   * Valid
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  valid: _NS$q("valid"),

  /**
   * Validation error
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  validationError: _NS$q("validationError"),

  /**
   * Value
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  value: _NS$q("value"),

  /**
   * Values
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   *
   * Defined by the vocabulary: https://w3id.org/inrupt/vocab/extension/ui#
   */
  values: _NS$q("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.UI_INRUPT = UI_INRUPT;
var rdfFactory$p = new rdfDataFactory.DataFactory();

function _NS$p(localName) {
  return rdfFactory$p.namedNode("http://purl.org/vocab/vann/" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * A vocabulary for annotating vocabulary descriptions (VANN).
 */


var VANN = {
  PREFIX: "vann",
  NAMESPACE: "http://purl.org/vocab/vann/",
  PREFIX_AND_NAMESPACE: {
    "vann": "http://purl.org/vocab/vann/"
  },
  NS: _NS$p,
  // *******************
  // All the Properties.
  // *******************

  /**
   * The preferred namespace prefix to ue when using terms from this vocabulary in an XML document.
   */
  preferredNamespacePrefix: _NS$p("preferredNamespacePrefix"),

  /**
   * The preferred namespace URI to use when using terms from this vocabulary in an XML document.
   */
  preferredNamespaceUri: _NS$p("preferredNamespaceUri"),

  /**
   * A reference to a resource that describes changes between this version of a vocabulary and the previous.
   */
  changes: _NS$p("changes"),

  /**
   * A reference to a resource that provides an example of how this resource can be used.
   */
  example: _NS$p("example"),

  /**
   * A group of related terms in a vocabulary.
   */
  termGroup: _NS$p("termGroup"),

  /**
   * A reference to a resource that provides information on how this resource is to be used.
   */
  usageNote: _NS$p("usageNote")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.VANN = VANN;
var rdfFactory$o = new rdfDataFactory.DataFactory();

function _NS$o(localName) {
  return rdfFactory$o.namedNode("http://purl.org/dc/terms/" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Dublin Core Terms - for describing resources
 */


var DCTERMS = {
  PREFIX: "dcterms",
  NAMESPACE: "http://purl.org/dc/terms/",
  PREFIX_AND_NAMESPACE: {
    "dcterms": "http://purl.org/dc/terms/"
  },
  NS: _NS$o,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A resource that acts or has the power to act.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Agent: _NS$o("Agent"),

  /**
   * A group of agents.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  AgentClass: _NS$o("AgentClass"),

  /**
   * A book, article, or other documentary resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  BibliographicResource: _NS$o("BibliographicResource"),

  /**
   * A digital resource format.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  FileFormat: _NS$o("FileFormat"),

  /**
   * A file format or physical medium.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MediaType: _NS$o("MediaType"),

  /**
   * A rate at which something recurs.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Frequency: _NS$o("Frequency"),

  /**
   * The extent or range of judicial, law enforcement, or other authority.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Jurisdiction: _NS$o("Jurisdiction"),

  /**
   * A location, period of time, or jurisdiction.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LocationPeriodOrJurisdiction: _NS$o("LocationPeriodOrJurisdiction"),

  /**
   * A legal document giving official permission to do something with a Resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LicenseDocument: _NS$o("LicenseDocument"),

  /**
   * A statement about the intellectual property rights (IPR) held in or over a Resource, a legal document giving official permission to do something with a resource, or a statement about access rights.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RightsStatement: _NS$o("RightsStatement"),

  /**
   * A system of signs, symbols, sounds, gestures, or rules used in communication.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  LinguisticSystem: _NS$o("LinguisticSystem"),

  /**
   * A spatial region or named place.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Location: _NS$o("Location"),

  /**
   * A media type or extent.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MediaTypeOrExtent: _NS$o("MediaTypeOrExtent"),

  /**
   * A method by which resources are added to a collection.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MethodOfAccrual: _NS$o("MethodOfAccrual"),

  /**
   * A process that is used to engender knowledge, attitudes, and skills.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  MethodOfInstruction: _NS$o("MethodOfInstruction"),

  /**
   * An interval of time that is named or defined by its start and end dates.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PeriodOfTime: _NS$o("PeriodOfTime"),

  /**
   * A physical material or carrier.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PhysicalMedium: _NS$o("PhysicalMedium"),

  /**
   * A material thing.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  PhysicalResource: _NS$o("PhysicalResource"),

  /**
   * A plan or course of action by an authority, intended to influence and determine decisions, actions, and other matters.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Policy: _NS$o("Policy"),

  /**
   * A statement of any changes in ownership and custody of a resource since its creation that are significant for its authenticity, integrity, and interpretation.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ProvenanceStatement: _NS$o("ProvenanceStatement"),

  /**
   * A dimension or extent, or a time taken to play or execute.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  SizeOrDuration: _NS$o("SizeOrDuration"),

  /**
   * A basis for comparison; a reference point against which other things can be evaluated.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Standard: _NS$o("Standard"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Date on which the resource was changed.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  modified: _NS$o("modified"),

  /**
   * An entity responsible for making the resource available.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  publisher: _NS$o("publisher"),

  /**
   * A name given to the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  title: _NS$o("title"),

  /**
   * An account of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  description: _NS$o("description"),

  /**
   * A related resource that is a version, edition, or adaptation of the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasVersion: _NS$o("hasVersion"),

  /**
   * Date of formal issuance (e.g., publication) of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  issued: _NS$o("issued"),

  /**
   * The set of regions in space defined by their geographic coordinates according to the DCMI Box Encoding Scheme.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-box/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Box: _NS$o("Box"),

  /**
   * The set of codes listed in ISO 3166-1 for the representation of names of countries.
   *
   * See also:
   *  - http://www.iso.org/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO3166: _NS$o("ISO3166"),

  /**
   * The three-letter alphabetic codes listed in ISO639-2 for the representation of names of languages.
   *
   * See also:
   *  - http://lcweb.loc.gov/standards/iso639-2/langhome.html
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO639_2: _NS$o("ISO639-2"),

  /**
   * The set of three-letter codes listed in ISO 639-3 for the representation of names of languages.
   *
   * See also:
   *  - http://www.sil.org/iso639-3/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  ISO639_3: _NS$o("ISO639-3"),

  /**
   * The set of time intervals defined by their limits according to the DCMI Period Encoding Scheme.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-period/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Period: _NS$o("Period"),

  /**
   * The set of points in space defined by their geographic coordinates according to the DCMI Point Encoding Scheme.
   *
   * See also:
   *  - http://dublincore.org/documents/dcmi-point/
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  Point: _NS$o("Point"),

  /**
   * The set of tags, constructed according to RFC 1766, for the identification of languages.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc1766.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC1766: _NS$o("RFC1766"),

  /**
   * The set of tags constructed according to RFC 3066 for the identification of languages.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc3066.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC3066: _NS$o("RFC3066"),

  /**
   * The set of tags constructed according to RFC 4646 for the identification of languages.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc4646.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC4646: _NS$o("RFC4646"),

  /**
   * The set of tags constructed according to RFC 5646 for the identification of languages.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc5646.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  RFC5646: _NS$o("RFC5646"),

  /**
   * The set of identifiers constructed according to the generic syntax for Uniform Resource Identifiers as specified by the Internet Engineering Task Force.
   *
   * See also:
   *  - http://www.ietf.org/rfc/rfc3986.txt
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  URI: _NS$o("URI"),

  /**
   * The set of dates and times constructed according to the W3C Date and Time Formats Specification.
   *
   * See also:
   *  - http://www.w3.org/TR/NOTE-datetime
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  W3CDTF: _NS$o("W3CDTF"),

  /**
   * A summary of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  abstract: _NS$o("abstract"),

  /**
   * Information about who can access the resource or an indication of its security status.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accessRights: _NS$o("accessRights"),

  /**
   * Information about rights held in and over the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  rights: _NS$o("rights"),

  /**
   * The method by which items are added to a collection.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualMethod: _NS$o("accrualMethod"),

  /**
   * The frequency with which items are added to a collection.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualPeriodicity: _NS$o("accrualPeriodicity"),

  /**
   * The policy governing the addition of items to a collection.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  accrualPolicy: _NS$o("accrualPolicy"),

  /**
   * An alternative name for the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  alternative: _NS$o("alternative"),

  /**
   * A class of entity for whom the resource is intended or useful.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  audience: _NS$o("audience"),

  /**
   * Date (often a range) that the resource became or will become available.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  available: _NS$o("available"),

  /**
   * A point or period of time associated with an event in the lifecycle of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  date: _NS$o("date"),

  /**
   * A bibliographic reference for the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  bibliographicCitation: _NS$o("bibliographicCitation"),

  /**
   * An unambiguous reference to the resource within a given context.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  identifier: _NS$o("identifier"),

  /**
   * An established standard to which the described resource conforms.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  conformsTo: _NS$o("conformsTo"),

  /**
   * A related resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  relation: _NS$o("relation"),

  /**
   * An entity responsible for making contributions to the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  contributor: _NS$o("contributor"),

  /**
   * The spatial or temporal topic of the resource, the spatial applicability of the resource, or the jurisdiction under which the resource is relevant.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  coverage: _NS$o("coverage"),

  /**
   * Date of creation of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  created: _NS$o("created"),

  /**
   * An entity primarily responsible for making the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  creator: _NS$o("creator"),

  /**
   * Date of acceptance of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateAccepted: _NS$o("dateAccepted"),

  /**
   * Date of copyright.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateCopyrighted: _NS$o("dateCopyrighted"),

  /**
   * Date of submission of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  dateSubmitted: _NS$o("dateSubmitted"),

  /**
   * A class of entity, defined in terms of progression through an educational or training context, for which the described resource is intended.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  educationLevel: _NS$o("educationLevel"),

  /**
   * The size or duration of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  extent: _NS$o("extent"),

  /**
   * The file format, physical medium, or dimensions of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  format: _NS$o("format"),

  /**
   * A related resource that is substantially the same as the pre-existing described resource, but in another format.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasFormat: _NS$o("hasFormat"),

  /**
   * A related resource that is included either physically or logically in the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  hasPart: _NS$o("hasPart"),

  /**
   * A process, used to engender knowledge, attitudes and skills, that the described resource is designed to support.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  instructionalMethod: _NS$o("instructionalMethod"),

  /**
   * A related resource that is substantially the same as the described resource, but in another format.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isFormatOf: _NS$o("isFormatOf"),

  /**
   * A related resource in which the described resource is physically or logically included.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isPartOf: _NS$o("isPartOf"),

  /**
   * A related resource that references, cites, or otherwise points to the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isReferencedBy: _NS$o("isReferencedBy"),

  /**
   * A related resource that supplants, displaces, or supersedes the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isReplacedBy: _NS$o("isReplacedBy"),

  /**
   * A related resource that requires the described resource to support its function, delivery, or coherence.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isRequiredBy: _NS$o("isRequiredBy"),

  /**
   * A related resource of which the described resource is a version, edition, or adaptation.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  isVersionOf: _NS$o("isVersionOf"),

  /**
   * A language of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  language: _NS$o("language"),

  /**
   * A legal document giving official permission to do something with the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  license: _NS$o("license"),

  /**
   * An entity that mediates access to the resource and for whom the resource is intended or useful.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  mediator: _NS$o("mediator"),

  /**
   * The material or physical carrier of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  medium: _NS$o("medium"),

  /**
   * A statement of any changes in ownership and custody of the resource since its creation that are significant for its authenticity, integrity, and interpretation.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  provenance: _NS$o("provenance"),

  /**
   * A related resource that is referenced, cited, or otherwise pointed to by the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  references: _NS$o("references"),

  /**
   * A related resource that is supplanted, displaced, or superseded by the described resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  replaces: _NS$o("replaces"),

  /**
   * A related resource that is required by the described resource to support its function, delivery, or coherence.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  requires: _NS$o("requires"),

  /**
   * A person or organization owning or managing rights over the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  rightsHolder: _NS$o("rightsHolder"),

  /**
   * A related resource from which the described resource is derived.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  source: _NS$o("source"),

  /**
   * Spatial characteristics of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  spatial: _NS$o("spatial"),

  /**
   * The topic of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  subject: _NS$o("subject"),

  /**
   * A list of subunits of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  tableOfContents: _NS$o("tableOfContents"),

  /**
   * Temporal characteristics of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  temporal: _NS$o("temporal"),

  /**
   * The nature or genre of the resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  type: _NS$o("type"),

  /**
   * Date (often a range) of validity of a resource.
   *
   * Defined by the vocabulary: http://purl.org/dc/terms/
   */
  valid: _NS$o("valid")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.DCTERMS = DCTERMS;
var rdfFactory$n = new rdfDataFactory.DataFactory();

function _NS$n(localName) {
  return rdfFactory$n.namedNode("https://www.w3.org/ns/activitystreams#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Extended Activity Streams 2.0 Vocabulary
 */


var AS = {
  PREFIX: "as",
  NAMESPACE: "https://www.w3.org/ns/activitystreams#",
  PREFIX_AND_NAMESPACE: {
    "as": "https://www.w3.org/ns/activitystreams#"
  },
  NS: _NS$n,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An Object representing some form of Action that has been taken
   */
  Activity: _NS$n("Activity"),

  /**
   * Object
   */
  Object: _NS$n("Object"),

  /**
   * Represents a qualified reference to another resource. Patterned after the RFC5988 Web Linking Model
   */
  Link: _NS$n("Link"),

  /**
   * An ordered or unordered collection of Objects or Links
   */
  Collection: _NS$n("Collection"),

  /**
   * A subset of items from a Collection
   */
  CollectionPage: _NS$n("CollectionPage"),

  /**
   * An Image file
   */
  Image: _NS$n("Image"),

  /**
   * A rdf:List variant for Objects and Links
   */
  OrderedItems: _NS$n("OrderedItems"),

  /**
   * Represents a Social Graph relationship between two Individuals (indicated by the 'a' and 'b' properties)
   */
  Relationship: _NS$n("Relationship"),

  /**
   * A question of any sort.
   */
  Question: _NS$n("Question"),

  /**
   * A Profile Document
   */
  Profile: _NS$n("Profile"),

  /**
   * A placeholder for a deleted object
   */
  Tombstone: _NS$n("Tombstone"),

  /**
   * A physical or logical location
   */
  Place: _NS$n("Place"),

  /**
   * An ordered subset of items from an OrderedCollection
   */
  OrderedCollectionPage: _NS$n("OrderedCollectionPage"),

  /**
   * Actor accepts the Object
   */
  Accept: _NS$n("Accept"),

  /**
   * Block
   */
  Block: _NS$n("Block"),

  /**
   * Actor is ignoring the Object
   */
  Ignore: _NS$n("Ignore"),

  /**
   * An Activity that has no direct object
   */
  IntransitiveActivity: _NS$n("IntransitiveActivity"),

  /**
   * To Add an Object or Link to Something
   */
  Add: _NS$n("Add"),

  /**
   * Actor announces the object to the target
   */
  Announce: _NS$n("Announce"),

  /**
   * Represents a software application of any sort
   */
  Application: _NS$n("Application"),

  /**
   * To Arrive Somewhere (can be used, for instance, to indicate that a particular entity is currently located somewhere, e.g. a "check-in")
   */
  Arrive: _NS$n("Arrive"),

  /**
   * A written work. Typically several paragraphs long. For example, a blog post or a news article.
   */
  Article: _NS$n("Article"),

  /**
   * An audio file
   */
  Audio: _NS$n("Audio"),

  /**
   * Represents a digital document/file of any sort
   */
  Document: _NS$n("Document"),

  /**
   * A variation of Collection in which items are strictly ordered
   */
  OrderedCollection: _NS$n("OrderedCollection"),

  /**
   * To Create Something
   */
  Create: _NS$n("Create"),

  /**
   * To Delete Something
   */
  Delete: _NS$n("Delete"),

  /**
   * The actor dislikes the object
   */
  Dislike: _NS$n("Dislike"),

  /**
   * An Event of any kind
   */
  Event: _NS$n("Event"),

  /**
   * To flag something (e.g. flag as inappropriate, flag as spam, etc)
   */
  Flag: _NS$n("Flag"),

  /**
   * To Express Interest in Something
   */
  Follow: _NS$n("Follow"),

  /**
   * A Group of any kind.
   */
  Group: _NS$n("Group"),

  /**
   * To invite someone or something to something
   */
  Invite: _NS$n("Invite"),

  /**
   * To Offer something to someone or something
   */
  Offer: _NS$n("Offer"),

  /**
   * To Join Something
   */
  Join: _NS$n("Join"),

  /**
   * To Leave Something
   */
  Leave: _NS$n("Leave"),

  /**
   * To Like Something
   */
  Like: _NS$n("Like"),

  /**
   * The actor viewed the object
   */
  View: _NS$n("View"),

  /**
   * The actor listened to the object
   */
  Listen: _NS$n("Listen"),

  /**
   * The actor read the object
   */
  Read: _NS$n("Read"),

  /**
   * The actor is moving the object. The target specifies where the object is moving to. The origin specifies where the object is moving from.
   */
  Move: _NS$n("Move"),

  /**
   * The actor is traveling to the target. The origin specifies where the actor is traveling from.
   */
  Travel: _NS$n("Travel"),

  /**
   * A specialized Link that represents an @mention
   */
  Mention: _NS$n("Mention"),

  /**
   * A Short note, typically less than a single paragraph. A "tweet" is an example, or a "status update"
   */
  Note: _NS$n("Note"),

  /**
   * A Web Page
   */
  Page: _NS$n("Page"),

  /**
   * A Person
   */
  Person: _NS$n("Person"),

  /**
   * An Organization
   */
  Organization: _NS$n("Organization"),

  /**
   * Actor rejects the Object
   */
  Reject: _NS$n("Reject"),

  /**
   * To Remove Something
   */
  Remove: _NS$n("Remove"),

  /**
   * A service provided by some entity
   */
  Service: _NS$n("Service"),

  /**
   * Actor tentatively accepts the Object
   */
  TentativeAccept: _NS$n("TentativeAccept"),

  /**
   * Actor tentatively rejects the object
   */
  TentativeReject: _NS$n("TentativeReject"),

  /**
   * To Undo Something. This would typically be used to indicate that a previous Activity has been undone.
   */
  Undo: _NS$n("Undo"),

  /**
   * To Update/Modify Something
   */
  Update: _NS$n("Update"),

  /**
   * A Video document of any kind.
   */
  Video: _NS$n("Video"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Subproperty of as:attributedTo that identifies the primary actor
   */
  actor: _NS$n("actor"),

  /**
   * Identifies an entity to which an object is attributed
   */
  attributedTo: _NS$n("attributedTo"),

  /**
   * attachment
   */
  attachment: _NS$n("attachment"),

  /**
   * attachments
   */
  attachments: _NS$n("attachments"),

  /**
   * Identifies the author of an object. Deprecated. Use as:attributedTo instead
   */
  author: _NS$n("author"),

  /**
   * bcc
   */
  bcc: _NS$n("bcc"),

  /**
   * bto
   */
  bto: _NS$n("bto"),

  /**
   * cc
   */
  cc: _NS$n("cc"),

  /**
   * Specifies the context within which an object exists or an activity was performed
   */
  context: _NS$n("context"),

  /**
   * current
   */
  current: _NS$n("current"),

  /**
   * first
   */
  first: _NS$n("first"),

  /**
   * generator
   */
  generator: _NS$n("generator"),

  /**
   * icon
   */
  icon: _NS$n("icon"),

  /**
   * image
   */
  image: _NS$n("image"),

  /**
   * inReplyTo
   */
  inReplyTo: _NS$n("inReplyTo"),

  /**
   * items
   */
  items: _NS$n("items"),

  /**
   * last
   */
  last: _NS$n("last"),

  /**
   * location
   */
  location: _NS$n("location"),

  /**
   * next
   */
  next: _NS$n("next"),

  /**
   * object
   */
  object: _NS$n("object"),

  /**
   * Describes a possible exclusive answer or option for a question.
   */
  oneOf: _NS$n("oneOf"),

  /**
   * Describes a possible inclusive answer or option for a question.
   */
  anyOf: _NS$n("anyOf"),

  /**
   * prev
   */
  prev: _NS$n("prev"),

  /**
   * preview
   */
  preview: _NS$n("preview"),

  /**
   * provider
   */
  provider: _NS$n("provider"),

  /**
   * replies
   */
  replies: _NS$n("replies"),

  /**
   * result
   */
  result: _NS$n("result"),

  /**
   * audience
   */
  audience: _NS$n("audience"),

  /**
   * partOf
   */
  partOf: _NS$n("partOf"),

  /**
   * tag
   */
  tag: _NS$n("tag"),

  /**
   * tags
   */
  tags: _NS$n("tags"),

  /**
   * target
   */
  target: _NS$n("target"),

  /**
   * For certain activities, specifies the entity from which the action is directed.
   */
  origin: _NS$n("origin"),

  /**
   * Indentifies an object used (or to be used) to complete an activity
   */
  instrument: _NS$n("instrument"),

  /**
   * to
   */
  to: _NS$n("to"),

  /**
   * Specifies a link to a specific representation of the Object
   */
  url: _NS$n("url"),

  /**
   * On a Relationship object, identifies the subject. e.g. when saying "John is connected to Sally", 'subject' refers to 'John'
   */
  subject: _NS$n("subject"),

  /**
   * On a Relationship object, describes the type of relationship
   */
  relationship: _NS$n("relationship"),

  /**
   * On a Profile object, describes the object described by the profile
   */
  describes: _NS$n("describes"),

  /**
   * On a Tombstone object, describes the former type of the deleted object
   */
  formerType: _NS$n("formerType"),

  /**
   * Specifies the accuracy around the point established by the longitude and latitude
   */
  accuracy: _NS$n("accuracy"),

  /**
   * The altitude of a place
   */
  altitude: _NS$n("altitude"),

  /**
   * The content of the object.
   */
  content: _NS$n("content"),

  /**
   * name
   */
  name: _NS$n("name"),

  /**
   * downstreamDuplicates
   */
  downstreamDuplicates: _NS$n("downstreamDuplicates"),

  /**
   * The duration of the object
   */
  duration: _NS$n("duration"),

  /**
   * The ending time of the object
   */
  endTime: _NS$n("endTime"),

  /**
   * The display height expressed as device independent pixels
   */
  height: _NS$n("height"),

  /**
   * The target URI of the Link
   */
  href: _NS$n("href"),

  /**
   * A hint about the language of the referenced resource
   */
  hreflang: _NS$n("hreflang"),

  /**
   * id
   */
  id: _NS$n("id"),

  /**
   * The latitude
   */
  latitude: _NS$n("latitude"),

  /**
   * The longitude
   */
  longitude: _NS$n("longitude"),

  /**
   * The MIME Media Type
   */
  mediaType: _NS$n("mediaType"),

  /**
   * objectType
   */
  objectType: _NS$n("objectType"),

  /**
   * Specifies the date and time the object was published
   */
  published: _NS$n("published"),

  /**
   * Specifies a radius around the point established by the longitude and latitude
   */
  radius: _NS$n("radius"),

  /**
   * A numeric rating (>= 0.0, <= 5.0) for the object
   */
  rating: _NS$n("rating"),

  /**
   * The RFC 5988 or HTML5 Link Relation associated with the Link
   */
  rel: _NS$n("rel"),

  /**
   * In a strictly ordered logical collection, specifies the index position of the first item in the items list
   */
  startIndex: _NS$n("startIndex"),

  /**
   * The starting time of the object
   */
  startTime: _NS$n("startTime"),

  /**
   * A short summary of the object
   */
  summary: _NS$n("summary"),

  /**
   * The total number of items in a logical collection
   */
  totalItems: _NS$n("totalItems"),

  /**
   * Identifies the unit of measurement used by the radius, altitude and accuracy properties. The value can be expressed either as one of a set of predefined units or as a well-known common URI that identifies units.
   */
  units: _NS$n("units"),

  /**
   * Specifies when the object was last updated
   */
  updated: _NS$n("updated"),

  /**
   * upstreamDuplicates
   */
  upstreamDuplicates: _NS$n("upstreamDuplicates"),

  /**
   * verb
   */
  verb: _NS$n("verb"),

  /**
   * Specifies the preferred display width of the content, expressed in terms of device independent pixels.
   */
  width: _NS$n("width"),

  /**
   * Specifies the date and time the object was deleted
   */
  deleted: _NS$n("deleted")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.AS = AS;
var rdfFactory$m = new rdfDataFactory.DataFactory();

function _NS$m(localName) {
  return rdfFactory$m.namedNode("http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * Inrupt-created copy of RLOG, needed due to Server 500 errors resolving original uni-leipzig.org!
 */


var RLOG = {
  PREFIX: "rlog",
  NAMESPACE: "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#",
  PREFIX_AND_NAMESPACE: {
    "rlog": "http://persistence.uni-leipzig.org/nlp2rdf/ontologies/rlog#"
  },
  NS: _NS$m,
  // *****************
  // All the Classes.
  // *****************

  /**
   * look here: http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/Level.html
   */
  Level: _NS$m("Level"),

  /**
   * An entry in a log.
   */
  Entry: _NS$m("Entry"),

  /**
   * A status code which can occur in an application. Instances of this class must put the name of the status as rdfs:label and describe it with rdfs:comment.
   */
  StatusCode: _NS$m("StatusCode"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The ALL has the lowest possible rank and is intended to turn on all logging.
   */
  ALL: _NS$m("ALL"),

  /**
   * Attention: the ids here can change, they are just used to define an order over the levels!
   */
  priority: _NS$m("priority"),

  /**
   * The DEBUG Level designates fine-grained informational events that are most useful to debug an application.
   */
  DEBUG: _NS$m("DEBUG"),

  /**
   * The ERROR level designates error events that might still allow the application to continue running.
   */
  ERROR: _NS$m("ERROR"),

  /**
   * The FATAL level designates very severe error events that will presumably lead the application to abort.
   */
  FATAL: _NS$m("FATAL"),

  /**
   * The INFO level designates informational messages that highlight the progress of the application at coarse-grained level.
   */
  INFO: _NS$m("INFO"),

  /**
   * The OFF has the highest possible rank and is intended to turn off logging.
   */
  OFF: _NS$m("OFF"),

  /**
   * The TRACE Level designates finer-grained informational events than the DEBUG.
   */
  TRACE: _NS$m("TRACE"),

  /**
   * The WARN level designates potentially harmful situations.
   */
  WARN: _NS$m("WARN"),

  /**
   * Outputs the fully qualified class name of the caller issuing the logging request.
   */
  className: _NS$m("className"),

  /**
   * The numerical value of the code, e.g. 200, 404 or 42.
   */
  codeId: _NS$m("codeId"),

  /**
   * Logging datetime (or just date)
   */
  date: _NS$m("date"),

  /**
   * Links a log message to a status code.
   */
  hasCode: _NS$m("hasCode"),

  /**
   * logLevel
   */
  level: _NS$m("level"),

  /**
   * Logging message
   */
  message: _NS$m("message"),

  /**
   * If we mix normal and log output, this can be used to refer to the resource in the RDF the error is connected to.
   */
  resource: _NS$m("resource")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.RLOG = RLOG;
var rdfFactory$l = new rdfDataFactory.DataFactory();

function _NS$l(localName) {
  return rdfFactory$l.namedNode("http://xmlns.com/foaf/0.1/" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Friend of a friend, v0.99
 */


var FOAF = {
  PREFIX: "foaf",
  NAMESPACE: "http://xmlns.com/foaf/0.1/",
  PREFIX_AND_NAMESPACE: {
    "foaf": "http://xmlns.com/foaf/0.1/"
  },
  NS: _NS$l,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An agent (eg. person, group, software or physical artifact).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Agent: _NS$l("Agent"),

  /**
   * A document.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Document: _NS$l("Document"),

  /**
   * An organization.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Organization: _NS$l("Organization"),

  /**
   * A project (a collective endeavour of some kind).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Project: _NS$l("Project"),

  /**
   * A class of Agents.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Group: _NS$l("Group"),

  /**
   * An image.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Image: _NS$l("Image"),

  /**
   * A foaf:LabelProperty is any RDF property with texual values that serve as labels.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  LabelProperty: _NS$l("LabelProperty"),

  /**
   * An online account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineAccount: _NS$l("OnlineAccount"),

  /**
   * An online chat account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineChatAccount: _NS$l("OnlineChatAccount"),

  /**
   * An online e-commerce account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineEcommerceAccount: _NS$l("OnlineEcommerceAccount"),

  /**
   * An online gaming account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  OnlineGamingAccount: _NS$l("OnlineGamingAccount"),

  /**
   * A person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  Person: _NS$l("Person"),

  /**
   * A personal profile RDF document.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  PersonalProfileDocument: _NS$l("PersonalProfileDocument"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates an account held by this agent.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  account: _NS$l("account"),

  /**
   * Indicates the name (identifier) associated with this online account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  accountName: _NS$l("accountName"),

  /**
   * Indicates a homepage of the service provide for this online account.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  accountServiceHomepage: _NS$l("accountServiceHomepage"),

  /**
   * The age in years of some agent.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  age: _NS$l("age"),

  /**
   * An AIM chat ID
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  aimChatID: _NS$l("aimChatID"),

  /**
   * A short informal nickname characterising an agent (includes login identifiers, IRC and other chat nicknames).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  nick: _NS$l("nick"),

  /**
   * A location that something is based near, for some broadly human notion of near.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  based_near: _NS$l("based_near"),

  /**
   * The birthday of this Agent, represented in mm-dd string form, eg. '12-31'.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  birthday: _NS$l("birthday"),

  /**
   * A current project this person works on.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  currentProject: _NS$l("currentProject"),

  /**
   * A depiction of some thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  depiction: _NS$l("depiction"),

  /**
   * A thing depicted in this representation.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  depicts: _NS$l("depicts"),

  /**
   * A checksum for the DNA of some thing. Joke.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  dnaChecksum: _NS$l("dnaChecksum"),

  /**
   * The family name of some person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  familyName: _NS$l("familyName"),

  /**
   * The family name of some person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  family_name: _NS$l("family_name"),

  /**
   * The first name of a person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  firstName: _NS$l("firstName"),

  /**
   * The underlying or 'focal' entity associated with some SKOS-described concept.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  focus: _NS$l("focus"),

  /**
   * An organization funding a project or person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  fundedBy: _NS$l("fundedBy"),

  /**
   * A textual geekcode for this person, see http://www.geekcode.com/geek.html
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  geekcode: _NS$l("geekcode"),

  /**
   * The gender of this Agent (typically but not necessarily 'male' or 'female').
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  gender: _NS$l("gender"),

  /**
   * The given name of some person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  givenName: _NS$l("givenName"),

  /**
   * The given name of some person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  givenname: _NS$l("givenname"),

  /**
   * Indicates an account held by this agent.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  holdsAccount: _NS$l("holdsAccount"),

  /**
   * A homepage for some thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  homepage: _NS$l("homepage"),

  /**
   * A page or document about this thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  page: _NS$l("page"),

  /**
   * A document that this thing is the primary topic of.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  isPrimaryTopicOf: _NS$l("isPrimaryTopicOf"),

  /**
   * An ICQ chat ID
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  icqChatID: _NS$l("icqChatID"),

  /**
   * An image that can be used to represent some thing (ie. those depictions which are particularly representative of something, eg. one's photo on a homepage).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  img: _NS$l("img"),

  /**
   * A page about a topic of interest to this person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  interest: _NS$l("interest"),

  /**
   * The primary topic of some page or document.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  primaryTopic: _NS$l("primaryTopic"),

  /**
   * A jabber ID for something.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  jabberID: _NS$l("jabberID"),

  /**
   * A person known by this person (indicating some level of reciprocated interaction between the parties).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  knows: _NS$l("knows"),

  /**
   * The last name of a person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  lastName: _NS$l("lastName"),

  /**
   * A logo representing some thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  logo: _NS$l("logo"),

  /**
   * Something that was made by this agent.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  made: _NS$l("made"),

  /**
   * An agent that made this thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  maker: _NS$l("maker"),

  /**
   * A personal mailbox, ie. an Internet mailbox associated with exactly one owner, the first owner of this mailbox. This is a 'static inverse functional property', in that there is (across time and change) at most one individual that ever has any particular value for foaf:mbox.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  mbox: _NS$l("mbox"),

  /**
   * The sha1sum of the URI of an Internet mailbox associated with exactly one owner, the first owner of the mailbox.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  mbox_sha1sum: _NS$l("mbox_sha1sum"),

  /**
   * Indicates a member of a Group
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  member: _NS$l("member"),

  /**
   * Indicates the class of individuals that are a member of a Group
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  membershipClass: _NS$l("membershipClass"),

  /**
   * An MSN chat ID
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  msnChatID: _NS$l("msnChatID"),

  /**
   * A Myers Briggs (MBTI) personality classification.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  myersBriggs: _NS$l("myersBriggs"),

  /**
   * A name for some thing.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  name: _NS$l("name"),

  /**
   * An OpenID for an Agent.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  openid: _NS$l("openid"),

  /**
   * A topic of some page or document.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  topic: _NS$l("topic"),

  /**
   * A project this person has previously worked on.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  pastProject: _NS$l("pastProject"),

  /**
   * A phone, specified using fully qualified tel: URI scheme (refs: http://www.w3.org/Addressing/schemes.html#tel).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  phone: _NS$l("phone"),

  /**
   * A .plan comment, in the tradition of finger and '.plan' files.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  plan: _NS$l("plan"),

  /**
   * A link to the publications of this person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  publications: _NS$l("publications"),

  /**
   * A homepage of a school attended by the person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  schoolHomepage: _NS$l("schoolHomepage"),

  /**
   * A sha1sum hash, in hex.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  sha1: _NS$l("sha1"),

  /**
   * A Skype ID
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  skypeID: _NS$l("skypeID"),

  /**
   * A string expressing what the user is happy for the general public (normally) to know about their current activity.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  status: _NS$l("status"),

  /**
   * The surname of some person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  surname: _NS$l("surname"),

  /**
   * A theme.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  theme: _NS$l("theme"),

  /**
   * A derived thumbnail image.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  thumbnail: _NS$l("thumbnail"),

  /**
   * A tipjar document for this agent, describing means for payment and reward.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  tipjar: _NS$l("tipjar"),

  /**
   * Title (Mr, Mrs, Ms, Dr. etc)
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  title: _NS$l("title"),

  /**
   * A thing of interest to this person.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  topic_interest: _NS$l("topic_interest"),

  /**
   * A weblog of some thing (whether person, group, company etc.).
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  weblog: _NS$l("weblog"),

  /**
   * A work info homepage of some person; a page about their work for some organization.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  workInfoHomepage: _NS$l("workInfoHomepage"),

  /**
   * A workplace homepage of some person; the homepage of an organization they work for.
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  workplaceHomepage: _NS$l("workplaceHomepage"),

  /**
   * A Yahoo chat ID
   *
   * Defined by the vocabulary: http://xmlns.com/foaf/0.1/
   */
  yahooChatID: _NS$l("yahooChatID")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.FOAF = FOAF;
var rdfFactory$k = new rdfDataFactory.DataFactory();

function _NS$k(localName) {
  return rdfFactory$k.namedNode("http://purl.org/linked-data/cube#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This vocabulary allows multi-dimensional data, such as statistics, to be published in RDF. It is based on the core information model from SDMX (and thus also DDI).
 */


var QB = {
  PREFIX: "qb",
  NAMESPACE: "http://purl.org/linked-data/cube#",
  PREFIX_AND_NAMESPACE: {
    "qb": "http://purl.org/linked-data/cube#"
  },
  NS: _NS$k,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Represents a collection of observations, possibly organized into various slices, conforming to some common dimensional structure.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DataSet: _NS$k("DataSet"),

  /**
   * Abstract superclass for everything that can have attributes and dimensions
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Attachable: _NS$k("Attachable"),

  /**
   * A single observation in the cube, may have one or more associated measured values
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Observation: _NS$k("Observation"),

  /**
   * A, possibly arbitrary, group of observations.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ObservationGroup: _NS$k("ObservationGroup"),

  /**
   * Denotes a subset of a DataSet defined by fixing a subset of the dimensional values, component properties on the Slice
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  Slice: _NS$k("Slice"),

  /**
   * Abstract super-property of all properties representing dimensions, attributes or measures
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentProperty: _NS$k("ComponentProperty"),

  /**
   * The class of components which represent the dimensions of the cube
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DimensionProperty: _NS$k("DimensionProperty"),

  /**
   * Superclass of all coded ComponentProperties
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  CodedProperty: _NS$k("CodedProperty"),

  /**
   * The class of components which represent the measured value of the phenomenon being observed
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  MeasureProperty: _NS$k("MeasureProperty"),

  /**
   * The class of components which represent attributes of observations in the cube, e.g. unit of measurement
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  AttributeProperty: _NS$k("AttributeProperty"),

  /**
   * Defines the structure of a DataSet or slice
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  DataStructureDefinition: _NS$k("DataStructureDefinition"),

  /**
   * Abstract class of things which reference one or more ComponentProperties
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentSet: _NS$k("ComponentSet"),

  /**
   * Used to define properties of a component (attribute, dimension etc) which are specific to its usage in a DSD.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  ComponentSpecification: _NS$k("ComponentSpecification"),

  /**
   * Denotes a subset of the component properties of a DataSet which are fixed in the corresponding slices
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  SliceKey: _NS$k("SliceKey"),

  /**
   * Represents a generalized hierarchy of concepts which can be used for coding. The hierarchy is defined by one or more roots together with a property which relates concepts in the hierarchy to thier child concept .  The same concepts may be members of multiple hierarchies provided that different qb:parentChildProperty values are used for each hierarchy.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  HierarchicalCodeList: _NS$k("HierarchicalCodeList"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * indicates the data set of which this observation is a part
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  dataSet: _NS$k("dataSet"),

  /**
   * indicates a observation contained within this slice of the data set
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  observation: _NS$k("observation"),

  /**
   * Indicates a group of observations. The domain of this property is left open so that a group may be attached to different resources and need not be restricted to a single DataSet
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  observationGroup: _NS$k("observationGroup"),

  /**
   * Indicates a subset of a DataSet defined by fixing a subset of the dimensional values
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  slice: _NS$k("slice"),

  /**
   * Generic measure dimension, the value of this dimension indicates which measure (from the set of measures in the DSD) is being given by the obsValue (or other primary measure)
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measureType: _NS$k("measureType"),

  /**
   * indicates the structure to which this data set conforms
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  structure: _NS$k("structure"),

  /**
   * indicates a component specification which is included in the structure of the dataset
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  component: _NS$k("component"),

  /**
   * indicates a ComponentProperty (i.e. attribute/dimension) expected on a DataSet, or a dimension fixed in a SliceKey
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentProperty: _NS$k("componentProperty"),

  /**
   * indicates a priority order for the components of sets with this structure, used to guide presentations - lower order numbers come before higher numbers, un-numbered components come last
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  order: _NS$k("order"),

  /**
   * Indicates whether a component property is required (true) or optional (false) in the context of a DSD. Only applicable
    to components correspond to an attribute. Defaults to false (optional).
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentRequired: _NS$k("componentRequired"),

  /**
   * Indicates the level at which the component property should be attached, this might an qb:DataSet, qb:Slice or qb:Observation, or a qb:MeasureProperty.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  componentAttachment: _NS$k("componentAttachment"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a dimension
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  dimension: _NS$k("dimension"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measure: _NS$k("measure"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a attribute
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  attribute: _NS$k("attribute"),

  /**
   * An alternative to qb:componentProperty which makes explicit that the component is a measure dimension
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  measureDimension: _NS$k("measureDimension"),

  /**
   * indicates the sub-key corresponding to this slice
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  sliceStructure: _NS$k("sliceStructure"),

  /**
   * indicates a slice key which is used for slices in this dataset
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  sliceKey: _NS$k("sliceKey"),

  /**
   * gives the concept which is being measured or indicated by a ComponentProperty
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  concept: _NS$k("concept"),

  /**
   * gives the code list associated with a CodedProperty
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  codeList: _NS$k("codeList"),

  /**
   * Specifies a root of the hierarchy. A hierarchy may have multiple roots but must have at least one.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  hierarchyRoot: _NS$k("hierarchyRoot"),

  /**
   * Specifies a property which relates a parent concept in the hierarchy to a child concept.
   *
   * Defined by the vocabulary: http://purl.org/linked-data/cube
   */
  parentChildProperty: _NS$k("parentChildProperty")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.QB = QB;
var rdfFactory$j = new rdfDataFactory.DataFactory();

function _NS$j(localName) {
  return rdfFactory$j.namedNode("http://purl.org/linked-data/sdmx/2009/dimension#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - SDMX Dimension Vocabulary
 */


var SDMX_DIMENSION = {
  PREFIX: "sdmx-dimension",
  NAMESPACE: "http://purl.org/linked-data/sdmx/2009/dimension#",
  PREFIX_AND_NAMESPACE: {
    "sdmx-dimension": "http://purl.org/linked-data/sdmx/2009/dimension#"
  },
  NS: _NS$j,
  // *******************
  // All the Properties.
  // *******************

  /**
   * The length of time that a person has lived or a thing has existed.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  age: _NS$j("age"),

  /**
   * Legal, conjugal status of each individual in relation to the marriage laws or customs of the country.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  civilStatus: _NS$j("civilStatus"),

  /**
   * Monetary denomination of the object being measured.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  currency: _NS$j("currency"),

  /**
   * The highest level of an educational programme the person has successfully completed.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  educationLev: _NS$j("educationLev"),

  /**
   * The time interval at which observations occur over a given time period.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  freq: _NS$j("freq"),

  /**
   * Job or position held by an individual who performs a set of tasks and duties.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  occupation: _NS$j("occupation"),

  /**
   * The country or geographic area to which the measured statistical phenomenon relates.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  refArea: _NS$j("refArea"),

  /**
   * The period of time or point in time to which the measured observation is intended to refer.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  refPeriod: _NS$j("refPeriod"),

  /**
   * The state of being male or female.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  sex: _NS$j("sex"),

  /**
   * The period of time or point in time to which the measured observation refers.
   *
   * Defined by the vocabulary: https://sdmx.org/wp-content/uploads/01_sdmx_cog_annex_1_cdc_2009.pdf
   */
  timePeriod: _NS$j("timePeriod")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SDMX_DIMENSION = SDMX_DIMENSION;
var rdfFactory$i = new rdfDataFactory.DataFactory();

function _NS$i(localName) {
  return rdfFactory$i.namedNode("http://www.w3.org/ns/shex#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Shape Expressions (ShEx) - for validating RDF
 */


var SHEX = {
  PREFIX: "shex",
  NAMESPACE: "http://www.w3.org/ns/shex#",
  PREFIX_AND_NAMESPACE: {
    "shex": "http://www.w3.org/ns/shex#"
  },
  NS: _NS$i,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Annotations provide a format-independent way to provide additional information about elements in a schema.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Annotation: _NS$i("Annotation"),

  /**
   * A TripleExpression composed of one or more sub-expressions, all of which must match.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  EachOf: _NS$i("EachOf"),

  /**
   * The abstract class of Triple Expressions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  TripleExpression: _NS$i("TripleExpression"),

  /**
   * An IRI prefix used for matching IRIs.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  IriStem: _NS$i("IriStem"),

  /**
   * Abstract class for Stems
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Stem: _NS$i("Stem"),

  /**
   * An IRI prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  IriStemRange: _NS$i("IriStemRange"),

  /**
   * Abstract Class for Stem Ranges
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  StemRange: _NS$i("StemRange"),

  /**
   * An Language tag used for matching Literal Languages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Language: _NS$i("Language"),

  /**
   * An Language prefix used for matching Literal Languages.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LanguageStem: _NS$i("LanguageStem"),

  /**
   * An Language prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LanguageStemRange: _NS$i("LanguageStemRange"),

  /**
   * An Literal prefix used for matching Literals.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LiteralStem: _NS$i("LiteralStem"),

  /**
   * An Literal prefix (or wildcard) along with a set of excluded values, used for node matching.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  LiteralStemRange: _NS$i("LiteralStemRange"),

  /**
   * A constraint on the type or value of an RDF Node.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  NodeConstraint: _NS$i("NodeConstraint"),

  /**
   * The abstract class of Shape Expressions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeExpression: _NS$i("ShapeExpression"),

  /**
   * The set of kinds of RDF Nodes.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  NodeKind: _NS$i("NodeKind"),

  /**
   * A TripleExpression composed of one or more sub-expressions, one of which must match.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  OneOf: _NS$i("OneOf"),

  /**
   * A Schema contains the set of shapes, used for matching a focus node.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Schema: _NS$i("Schema"),

  /**
   * A list of Semantic Actions that serve as an extension point for Shape Expressions. They appear in lists in Schema's startActs and Shape, OneOf, EachOf and TripleConstraint's semActs.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  SemAct: _NS$i("SemAct"),

  /**
   * A shapes schema is captured in a Schema object where shapes is a mapping from shape label to shape expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Shape: _NS$i("Shape"),

  /**
   * A ShapeExpression composed of one or more sub-expressions, all of which must match.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeAnd: _NS$i("ShapeAnd"),

  /**
   * A reference to a shape defined in some external Schema.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeExternal: _NS$i("ShapeExternal"),

  /**
   * A ShapeNot is satisfied when it’s included ShapeExpression is not satisfied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeNot: _NS$i("ShapeNot"),

  /**
   * A ShapeExpression composed of one or more sub-expressions, one of which must match.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  ShapeOr: _NS$i("ShapeOr"),

  /**
   * A constraint on a triple having a specific predicate and optionally a shape expression used for matching values.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  TripleConstraint: _NS$i("TripleConstraint"),

  /**
   * Indicates that a stem is a Wildcard, rather than a URI prefix.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  Wildcard: _NS$i("Wildcard"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Annotations on a TripleExpression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  annotation: _NS$i("annotation"),

  /**
   * Indicates that a Shape is closed, meaning that it may contain no property values other than those used within TripleConstraints.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  closed: _NS$i("closed"),

  /**
   * Code executed by Semantic Action.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  code: _NS$i("code"),

  /**
   * A datatype constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  datatype: _NS$i("datatype"),

  /**
   * Values that are excluded from value matching.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  exclusion: _NS$i("exclusion"),

  /**
   * Expression associated with the TripleExpression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  expression: _NS$i("expression"),

  /**
   * List of 2 or more expressions associated with the TripleExpression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  expressions: _NS$i("expressions"),

  /**
   * Properties which may have extra values beyond those matched through a constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  extra: _NS$i("extra"),

  /**
   * Regular expression flags
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  flags: _NS$i("flags"),

  /**
   * for "fractiondigits" constraints, v is less than or equals the number of digits to the right of the decimal place in the XML Schema canonical form[xmlschema-2] of the value of n, ignoring trailing zeros.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  fractiondigits: _NS$i("fractiondigits"),

  /**
   * Abstract property of numeric facets on a NodeConstraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  numericFacet: _NS$i("numericFacet"),

  /**
   * Constrains the subject of a triple, rather than the object.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  inverse: _NS$i("inverse"),

  /**
   * The value used to match the language tag of a language-tagged string.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  languageTag: _NS$i("languageTag"),

  /**
   * The exact length of the value of the cell.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  length: _NS$i("length"),

  /**
   * An abstract property of string facets on a NodeConstraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  stringFacet: _NS$i("stringFacet"),

  /**
   * Maximum number of times this TripleExpression may match; -1 for “*”
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  max: _NS$i("max"),

  /**
   * An atomic property that contains a single number that is the maximum valid value (exclusive).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxexclusive: _NS$i("maxexclusive"),

  /**
   * An atomic property that contains a single number that is the maximum valid value (inclusive).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxinclusive: _NS$i("maxinclusive"),

  /**
   * A numeric atomic property that contains a single integer that is the maximum length of the value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  maxlength: _NS$i("maxlength"),

  /**
   * Minimum number of times this TripleExpression may match.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  min: _NS$i("min"),

  /**
   * An atomic property that contains a single number that is the minimum valid value (exclusive).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  minexclusive: _NS$i("minexclusive"),

  /**
   * An atomic property that contains a single number that is the minimum valid value (inclusive).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  mininclusive: _NS$i("mininclusive"),

  /**
   * An atomic property that contains a single integer that is the minimum length of the value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  minlength: _NS$i("minlength"),

  /**
   * Identifier of SemAct extension.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  name: _NS$i("name"),

  /**
   * Restiction on the kind of node matched; restricted to the defined instances of NodeKind. One of shex:iri, shex:bnode, shex:literal, or shex:nonliteral.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  nodeKind: _NS$i("nodeKind"),

  /**
   * An abstract property of string and numeric facets on a NodeConstraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  xsFacet: _NS$i("xsFacet"),

  /**
   * The object of an Annotation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  object: _NS$i("object"),

  /**
   * A regular expression used for matching a value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  pattern: _NS$i("pattern"),

  /**
   * The predicate of a TripleConstraint or Annotation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  predicate: _NS$i("predicate"),

  /**
   * Semantic Actions on this TripleExpression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  semActs: _NS$i("semActs"),

  /**
   * Shape Expression referenced by this shape.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapeExpr: _NS$i("shapeExpr"),

  /**
   * A list of 2 or more Shape Expressions referenced by this shape.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapeExprs: _NS$i("shapeExprs"),

  /**
   * Shapes in this Schema.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  shapes: _NS$i("shapes"),

  /**
   * A ShapeExpression matched against the focus node prior to any other mapped expressions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  start: _NS$i("start"),

  /**
   * Semantic Actions run on the Schema.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  startActs: _NS$i("startActs"),

  /**
   * A stem value used for matching or excluding values.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  stem: _NS$i("stem"),

  /**
   * for "totaldigits" constraints, v equals the number of digits in the XML Schema canonical form[xmlschema-2] of the value of n
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  totaldigits: _NS$i("totaldigits"),

  /**
   * A ShapeExpression used for matching the object (or subject if inverted) of a TripleConstraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  valueExpr: _NS$i("valueExpr"),

  /**
   * A value restriction on a NodeConstraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/shex#
   */
  values: _NS$i("values")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SHEX = SHEX;
var rdfFactory$h = new rdfDataFactory.DataFactory();

function _NS$h(localName) {
  return rdfFactory$h.namedNode("http://www.w3.org/ns/auth/acl#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Web Access Control Vocabulary
 */


var ACL = {
  PREFIX: "acl",
  NAMESPACE: "http://www.w3.org/ns/auth/acl#",
  PREFIX_AND_NAMESPACE: {
    "acl": "http://www.w3.org/ns/auth/acl#"
  },
  NS: _NS$h,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Any kind of access to a resource. Don't use this, use R W and RW
   */
  Access: _NS$h("Access"),

  /**
   * Append accesses are specific write access which only add information, and do not remove information.
    For text files, for example, append access allows bytes to be added onto the end of the file.
    For RDF graphs, Append access allows adds triples to the graph but does not remove any.
    Append access is useful for dropbox functionality.
    Dropbox can be used for link notification, which the information added is a notification
    that a some link has been made elsewhere relevant to the given resource.
    
   */
  Append: _NS$h("Append"),

  /**
   * write
   */
  Write: _NS$h("Write"),

  /**
   * A class of agents who have been authenticated.
  In other words, anyone can access this resource, but not anonymously.
  The social expectation is that the authentication process will provide an
  identify and a name, or pseudonym.
  (A new ID should not be minted for every access: the intent is that the user
  is able to continue to use the ID for continues interactions with peers,
  and for example to develop a reputation)
      */
  AuthenticatedAgent: _NS$h("AuthenticatedAgent"),

  /**
   * An element of access control,
    allowing agent to agents access of some kind to resources or classes of resources
   */
  Authorization: _NS$h("Authorization"),

  /**
   * Allows read/write access to the ACL for the resource(s)
   */
  Control: _NS$h("Control"),

  /**
   * An Origin is basically a web site
        (Note WITHOUT the trailing slash after the domain name and port in its URI)
        and is the basis for controlling access to data by web apps
        in the Same Origin Model of web security.
        All scripts from the same origin are given the same right.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  Origin: _NS$h("Origin"),

  /**
   * The class of read operations
   */
  Read: _NS$h("Read"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The Access Control file for this information resource.
        This may of course be a virtual resource implemented by the access control system.
        Note also HTTP's header  Link:  foo.meta ;rel=meta can be used for this.
   */
  accessControl: _NS$h("accessControl"),

  /**
   * The information resource to which access is being granted.
   */
  accessTo: _NS$h("accessTo"),

  /**
   * A class of information resources to which access is being granted.
   */
  accessToClass: _NS$h("accessToClass"),

  /**
   * A person or social entity to being given the right
   */
  agent: _NS$h("agent"),

  /**
   * A class of persons or social entities to being given the right
   */
  agentClass: _NS$h("agentClass"),

  /**
   * A group of persons or social entities to being given the right.
          The right is given to any entity which is a vcard:member of the group,
          as defined by the document received when the Group is dereferenced.
   */
  agentGroup: _NS$h("agentGroup"),

  /**
   * If a resource has no ACL file (it is 404),
        then access to the resource if given by the ACL of the immediately
        containing directory, or failing that (404) the ACL of the recursively next
        containing directory which has an ACL file.
        Within that ACL file,
        any Authentication which has that directory as its acl:default applies to the
        resource. (The highest directory must have an ACL file.)
      */
  default: _NS$h("default"),

  /**
   * THIS IS OBSOLETE AS OF 2017-08-01.   See 'default'.
        Was: A directory for which this authorization is used for new files in the directory.
   */
  defaultForNew: _NS$h("defaultForNew"),

  /**
   * Delegates a person or another agent to act on behalf of the agent.
    For example, Alice delegates Bob to act on behalf of Alice for ACL purposes.
   */
  delegates: _NS$h("delegates"),

  /**
   * A mode of access such as read or write.
   */
  mode: _NS$h("mode"),

  /**
   * A web application, identified by its Origin, such as
        <https://scripts.example.com>, being given the right.
        When a user of the web application at a certain origin accesses the server,
        then the browser sets the Origin: header to warn that a possibly untrusted webapp
        is being used.
        Then, BOTH the user AND the origin must have the required access.
   *
   * See also:
   *  - https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin
   */
  origin: _NS$h("origin"),

  /**
   * The person or other agent which owns this.
    For example, the owner of a file in a filesystem.
    There is a sense of right to control.   Typically defaults to the agent who craeted
    something but can be changed.
   */
  owner: _NS$h("owner")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.ACL = ACL;
var rdfFactory$g = new rdfDataFactory.DataFactory();

function _NS$g(localName) {
  return rdfFactory$g.namedNode("http://www.w3.org/ns/posix/stat#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * A vocabulary for the basic POSIX terms.
 */


var POSIX = {
  PREFIX: "posix",
  NAMESPACE: "http://www.w3.org/ns/posix/stat#",
  PREFIX_AND_NAMESPACE: {
    "posix": "http://www.w3.org/ns/posix/stat#"
  },
  NS: _NS$g,
  // *******************
  // All the Properties.
  // *******************

  /**
   * Time of last access
   */
  atime: _NS$g("atime"),

  /**
   * Blocksize for file system I/O
   */
  blksize: _NS$g("blksize"),

  /**
   * Number of 512B blocks allocated
   */
  blocks: _NS$g("blocks"),

  /**
   * Time of last status change
   */
  ctime: _NS$g("ctime"),

  /**
   * ID of device containing file
   */
  dev: _NS$g("dev"),

  /**
   * Group ID of owner
   */
  gid: _NS$g("gid"),

  /**
   * inode number
   */
  ino: _NS$g("ino"),

  /**
   * Protection
   */
  mode: _NS$g("mode"),

  /**
   * Time of last modification
   */
  mtime: _NS$g("mtime"),

  /**
   * Number of hard links
   */
  nlink: _NS$g("nlink"),

  /**
   * Device ID (if special file)
   */
  rdev: _NS$g("rdev"),

  /**
   * Total size, in bytes
   */
  size: _NS$g("size"),

  /**
   * User ID of owner
   */
  uid: _NS$g("uid")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.POSIX = POSIX;
var rdfFactory$f = new rdfDataFactory.DataFactory();

function _NS$f(localName) {
  return rdfFactory$f.namedNode("https://www.w3.org/2002/12/cal/ical#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - iCal - a vocabulary for description of events and calendars
 */


var ICAL = {
  PREFIX: "ical",
  NAMESPACE: "https://www.w3.org/2002/12/cal/ical#",
  PREFIX_AND_NAMESPACE: {
    "ical": "https://www.w3.org/2002/12/cal/ical#"
  },
  NS: _NS$f,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Provide a grouping of component properties that define an alarm.
   */
  Valarm: _NS$f("Valarm"),

  /**
   *
   */
  Value_CAL_ADDRESS: _NS$f("Value_CAL-ADDRESS"),

  /**
   *
   */
  Value_DATE: _NS$f("Value_DATE"),

  /**
   *
   */
  Value_DATE_TIME: _NS$f("Value_DATE-TIME"),

  /**
   *
   */
  Value_DURATION: _NS$f("Value_DURATION"),

  /**
   *
   */
  Value_PERIOD: _NS$f("Value_PERIOD"),

  /**
   *
   */
  Value_RECUR: _NS$f("Value_RECUR"),

  /**
   * Provide a grouping of component properties that describe an event.
   */
  Vevent: _NS$f("Vevent"),

  /**
   * Provide a grouping of component properties that describe either a request for free/busy time, describe a response to a request for free/busy time or describe a published set of busy time.
   */
  Vfreebusy: _NS$f("Vfreebusy"),

  /**
   * Provide a grouping of component properties that describe a journal entry.
   */
  Vjournal: _NS$f("Vjournal"),

  /**
   * Provide a grouping of component properties that defines a time zone.
   */
  Vtimezone: _NS$f("Vtimezone"),

  /**
   * Provide a grouping of calendar properties that describe a to-do.
   */
  Vtodo: _NS$f("Vtodo"),
  // *******************
  // All the Properties.
  // *******************

  /**
   *
        default value type: URI
   */
  attach: _NS$f("attach"),

  /**
   *
        value type: TEXT
   */
  description: _NS$f("description"),

  /**
   *
        value type: TEXT
   */
  summary: _NS$f("summary"),

  /**
   *
        value type: DURATION
   */
  duration: _NS$f("duration"),

  /**
   *
        value type: CAL-ADDRESS
   */
  attendee: _NS$f("attendee"),

  /**
   *
        value type: TEXT
   */
  action: _NS$f("action"),

  /**
   *
        value type: INTEGER
   */
  repeat: _NS$f("repeat"),

  /**
   *
        default value type: DURATION
   */
  trigger: _NS$f("trigger"),

  /**
   *
        value type: TEXT
   */
  categories: _NS$f("categories"),

  /**
   *
        value type: TEXT
   */
  class: _NS$f("class"),

  /**
   *
        value type: TEXT
   */
  comment: _NS$f("comment"),

  /**
   * This property specifies information related to the global position for the activity specified by a calendar component.
   */
  geo: _NS$f("geo"),

  /**
   *
        value type: TEXT
   */
  location: _NS$f("location"),

  /**
   *
        value type: INTEGER
   */
  priority: _NS$f("priority"),

  /**
   *
        value type: TEXT
   */
  resources: _NS$f("resources"),

  /**
   *
        value type: TEXT
   */
  status: _NS$f("status"),

  /**
   *
        default value type: DATE-TIME
   */
  dtend: _NS$f("dtend"),

  /**
   *
        default value type: DATE-TIME
   */
  dtstart: _NS$f("dtstart"),

  /**
   *
        value type: TEXT
   */
  transp: _NS$f("transp"),

  /**
   *
        value type: TEXT
   */
  contact: _NS$f("contact"),

  /**
   *
        value type: CAL-ADDRESS
   */
  organizer: _NS$f("organizer"),

  /**
   *
        value type: TEXT
   */
  relatedTo: _NS$f("relatedTo"),

  /**
   *
        value type: URI
   */
  url: _NS$f("url"),

  /**
   *
        value type: TEXT
   */
  uid: _NS$f("uid"),

  /**
   *
        value type: RECUR
   */
  exrule: _NS$f("exrule"),

  /**
   *
        default value type: DATE-TIME
   */
  rdate: _NS$f("rdate"),

  /**
   *
        value type: RECUR
   */
  rrule: _NS$f("rrule"),

  /**
   *
        value type: DATE-TIME
   */
  created: _NS$f("created"),

  /**
   *
        value type: DATE-TIME
   */
  dtstamp: _NS$f("dtstamp"),

  /**
   *
        value type: DATE-TIME
   */
  lastModified: _NS$f("lastModified"),

  /**
   *
        value type: integer
   */
  sequence: _NS$f("sequence"),

  /**
   *
        value type: TEXT
   */
  requestStatus: _NS$f("requestStatus"),

  /**
   *
        value type: PERIOD
   */
  freebusy: _NS$f("freebusy"),

  /**
   *
        value type: TEXT
   */
  tzid: _NS$f("tzid"),

  /**
   *
        value type: TEXT
   */
  tzname: _NS$f("tzname"),

  /**
   *
        value type: UTC-OFFSET
   */
  tzoffsetfrom: _NS$f("tzoffsetfrom"),

  /**
   *
        value type: UTC-OFFSET
   */
  tzoffsetto: _NS$f("tzoffsetto"),

  /**
   *
        value type: URI
   */
  tzurl: _NS$f("tzurl"),

  /**
   *
        value type: INTEGER
   */
  percentComplete: _NS$f("percentComplete"),

  /**
   *
        value type: DATE-TIME
   */
  completed: _NS$f("completed"),

  /**
   *
        default value type: DATE-TIME
   */
  due: _NS$f("due"),

  /**
   *
        value type: TEXT
   */
  X_: _NS$f("X-"),

  /**
   *
        value type: TEXT
   */
  calscale: _NS$f("calscale"),

  /**
   *
        default value type: DATE-TIME
   */
  exdate: _NS$f("exdate"),

  /**
   *
        value type: TEXT
   */
  method: _NS$f("method"),

  /**
   *
        value type: TEXT
   */
  prodid: _NS$f("prodid"),

  /**
   *
        default value type: DATE-TIME
   */
  recurrenceId: _NS$f("recurrenceId"),

  /**
   *
        value type: TEXT
   */
  version: _NS$f("version")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.ICAL = ICAL;
var rdfFactory$e = new rdfDataFactory.DataFactory();

function _NS$e(localName) {
  return rdfFactory$e.namedNode("http://www.w3.org/ns/prov#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This document is published by the Provenance Working Group (http://www.w3.org/2011/prov/wiki/Main_Page).

If you wish to make comments regarding this document, please send them to public-prov-comments@w3.org (subscribe public-prov-comments-request@w3.org, archives http://lists.w3.org/Archives/Public/public-prov-comments/). All feedback is welcome.
 */


var PROV_O = {
  PREFIX: "prov-o",
  NAMESPACE: "http://www.w3.org/ns/prov#",
  PREFIX_AND_NAMESPACE: {
    "prov-o": "http://www.w3.org/ns/prov#"
  },
  NS: _NS$e,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Activity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Activity: _NS$e("Activity"),

  /**
   * Entity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Entity: _NS$e("Entity"),

  /**
   * ActivityInfluence provides additional descriptions of an Activity's binary influence upon any other kind of resource. Instances of ActivityInfluence use the prov:activity property to cite the influencing Activity.
   *
   * See also:
   *  - http://www.w3.org/ns/prov#activity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  ActivityInfluence: _NS$e("ActivityInfluence"),

  /**
   * An instance of prov:Influence provides additional descriptions about the binary prov:wasInfluencedBy relation from some influenced Activity, Entity, or Agent to the influencing Activity, Entity, or Agent. For example, :stomach_ache prov:wasInfluencedBy :spoon; prov:qualifiedInfluence [ a prov:Influence; prov:entity :spoon; :foo :bar ] . Because prov:Influence is a broad relation, the more specific relations (Communication, Delegation, End, etc.) should be used when applicable.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Influence: _NS$e("Influence"),

  /**
   * EntityInfluence provides additional descriptions of an Entity's binary influence upon any other kind of resource. Instances of EntityInfluence use the prov:entity property to cite the influencing Entity.
   *
   * See also:
   *  - http://www.w3.org/ns/prov#entity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  EntityInfluence: _NS$e("EntityInfluence"),

  /**
   * Agent
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Agent: _NS$e("Agent"),

  /**
   * An instantaneous event, or event for short, happens in the world and marks a change in the world, in its activities and in its entities. The term 'event' is commonly used in process algebra with a similar meaning. Events represent communications or interactions; they are assumed to be atomic and instantaneous.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  InstantaneousEvent: _NS$e("InstantaneousEvent"),

  /**
   * AgentInfluence provides additional descriptions of an Agent's binary influence upon any other kind of resource. Instances of AgentInfluence use the prov:agent property to cite the influencing Agent.
   *
   * See also:
   *  - http://www.w3.org/ns/prov#agent
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  AgentInfluence: _NS$e("AgentInfluence"),

  /**
   * An instance of prov:Association provides additional descriptions about the binary prov:wasAssociatedWith relation from an prov:Activity to some prov:Agent that had some responsiblity for it. For example, :baking prov:wasAssociatedWith :baker; prov:qualifiedAssociation [ a prov:Association; prov:agent :baker; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Association: _NS$e("Association"),

  /**
   * An instance of prov:Attribution provides additional descriptions about the binary prov:wasAttributedTo relation from an prov:Entity to some prov:Agent that had some responsible for it. For example, :cake prov:wasAttributedTo :baker; prov:qualifiedAttribution [ a prov:Attribution; prov:entity :baker; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Attribution: _NS$e("Attribution"),

  /**
   * Note that there are kinds of bundles (e.g. handwritten letters, audio recordings, etc.) that are not expressed in PROV-O, but can be still be described by PROV-O.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Bundle: _NS$e("Bundle"),

  /**
   * Collection
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Collection: _NS$e("Collection"),

  /**
   * An instance of prov:Communication provides additional descriptions about the binary prov:wasInformedBy relation from an informed prov:Activity to the prov:Activity that informed it. For example, :you_jumping_off_bridge prov:wasInformedBy :everyone_else_jumping_off_bridge; prov:qualifiedCommunication [ a prov:Communication; prov:activity :everyone_else_jumping_off_bridge; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Communication: _NS$e("Communication"),

  /**
   * An instance of prov:Delegation provides additional descriptions about the binary prov:actedOnBehalfOf relation from a performing prov:Agent to some prov:Agent for whom it was performed. For example, :mixing prov:wasAssociatedWith :toddler . :toddler prov:actedOnBehalfOf :mother; prov:qualifiedDelegation [ a prov:Delegation; prov:entity :mother; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Delegation: _NS$e("Delegation"),

  /**
   * An instance of prov:Derivation provides additional descriptions about the binary prov:wasDerivedFrom relation from some derived prov:Entity to another prov:Entity from which it was derived. For example, :chewed_bubble_gum prov:wasDerivedFrom :unwrapped_bubble_gum; prov:qualifiedDerivation [ a prov:Derivation; prov:entity :unwrapped_bubble_gum; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Derivation: _NS$e("Derivation"),

  /**
   * EmptyCollection
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  EmptyCollection: _NS$e("EmptyCollection"),

  /**
   * An instance of prov:End provides additional descriptions about the binary prov:wasEndedBy relation from some ended prov:Activity to an prov:Entity that ended it. For example, :ball_game prov:wasEndedBy :buzzer; prov:qualifiedEnd [ a prov:End; prov:entity :buzzer; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  End: _NS$e("End"),

  /**
   * An instance of prov:Generation provides additional descriptions about the binary prov:wasGeneratedBy relation from a generated prov:Entity to the prov:Activity that generated it. For example, :cake prov:wasGeneratedBy :baking; prov:qualifiedGeneration [ a prov:Generation; prov:activity :baking; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Generation: _NS$e("Generation"),

  /**
   * An instance of prov:Invalidation provides additional descriptions about the binary prov:wasInvalidatedBy relation from an invalidated prov:Entity to the prov:Activity that invalidated it. For example, :uncracked_egg prov:wasInvalidatedBy :baking; prov:qualifiedInvalidation [ a prov:Invalidation; prov:activity :baking; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Invalidation: _NS$e("Invalidation"),

  /**
   * Location
   *
   * See also:
   *  - http://www.w3.org/ns/prov#atLocation
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Location: _NS$e("Location"),

  /**
   * Organization
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Organization: _NS$e("Organization"),

  /**
   * Person
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Person: _NS$e("Person"),

  /**
   * There exist no prescriptive requirement on the nature of plans, their representation, the actions or steps they consist of, or their intended goals. Since plans may evolve over time, it may become necessary to track their provenance, so plans themselves are entities. Representing the plan explicitly in the provenance can be useful for various tasks: for example, to validate the execution as represented in the provenance record, to manage expectation failures, or to provide explanations.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Plan: _NS$e("Plan"),

  /**
   * An instance of prov:PrimarySource provides additional descriptions about the binary prov:hadPrimarySource relation from some secondary prov:Entity to an earlier, primary prov:Entity. For example, :blog prov:hadPrimarySource :newsArticle; prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :newsArticle; :foo :bar ] .
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  PrimarySource: _NS$e("PrimarySource"),

  /**
   * An instance of prov:Quotation provides additional descriptions about the binary prov:wasQuotedFrom relation from some taken prov:Entity from an earlier, larger prov:Entity. For example, :here_is_looking_at_you_kid prov:wasQuotedFrom :casablanca_script; prov:qualifiedQuotation [ a prov:Quotation; prov:entity :casablanca_script; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Quotation: _NS$e("Quotation"),

  /**
   * An instance of prov:Revision provides additional descriptions about the binary prov:wasRevisionOf relation from some newer prov:Entity to an earlier prov:Entity. For example, :draft_2 prov:wasRevisionOf :draft_1; prov:qualifiedRevision [ a prov:Revision; prov:entity :draft_1; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Revision: _NS$e("Revision"),

  /**
   * Role
   *
   * See also:
   *  - http://www.w3.org/ns/prov#hadRole
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Role: _NS$e("Role"),

  /**
   * SoftwareAgent
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  SoftwareAgent: _NS$e("SoftwareAgent"),

  /**
   * An instance of prov:Start provides additional descriptions about the binary prov:wasStartedBy relation from some started prov:Activity to an prov:Entity that started it. For example, :foot_race prov:wasStartedBy :bang; prov:qualifiedStart [ a prov:Start; prov:entity :bang; :foo :bar; prov:atTime '2012-03-09T08:05:08-05:00'^^xsd:dateTime ] .
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Start: _NS$e("Start"),

  /**
   * An instance of prov:Usage provides additional descriptions about the binary prov:used relation from some prov:Activity to an prov:Entity that it used. For example, :keynote prov:used :podium; prov:qualifiedUsage [ a prov:Usage; prov:entity :podium; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  Usage: _NS$e("Usage"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Classify prov-o terms into three categories, including 'starting-point', 'qualifed', and 'extended'. This classification is used by the prov-o html document to gently introduce prov-o terms to its users.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  category: _NS$e("category"),

  /**
   * Classify prov-o terms into six components according to prov-dm, including 'agents-responsibility', 'alternate', 'annotations', 'collections', 'derivations', and 'entities-activities'. This classification is used so that readers of prov-o specification can find its correspondence with the prov-dm specification.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  component: _NS$e("component"),

  /**
   * A reference to the principal section of the PROV-CONSTRAINTS document that describes this concept.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  constraints: _NS$e("constraints"),

  /**
   * A definition quoted from PROV-DM or PROV-CONSTRAINTS that describes the concept expressed with this OWL term.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  definition: _NS$e("definition"),

  /**
   * A reference to the principal section of the PROV-DM document that describes this concept.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  dm: _NS$e("dm"),

  /**
   * A reference to the principal section of the PROV-DM document that describes this concept.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  n: _NS$e("n"),

  /**
   * activity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  activity: _NS$e("activity"),

  /**
   * The _optional_ Activity of an Influence, which used, generated, invalidated, or was the responsibility of some Entity. This property is _not_ used by ActivityInfluence (use prov:activity instead).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadActivity: _NS$e("hadActivity"),

  /**
   * When the prov-o term does not have a definition drawn from prov-dm, and the prov-o editor provides one.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  editorsDefinition: _NS$e("editorsDefinition"),

  /**
   * agent
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  agent: _NS$e("agent"),

  /**
   * Classes and properties used to qualify relationships are annotated with prov:unqualifiedForm to indicate the property used to assert an unqualified provenance relation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  unqualifiedForm: _NS$e("unqualifiedForm"),

  /**
   * An prov:Agent that had some (unspecified) responsibility for the occurrence of this prov:Activity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasAssociatedWith: _NS$e("wasAssociatedWith"),

  /**
   * Attribution is the ascribing of an entity to an agent.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasAttributedTo: _NS$e("wasAttributedTo"),

  /**
   * An activity a2 is dependent on or informed by another activity a1, by way of some unspecified entity that is generated by a1 and used by a2.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInformedBy: _NS$e("wasInformedBy"),

  /**
   * An object property to express the accountability of an agent towards another agent. The subordinate agent acted on behalf of the responsible agent in an actual activity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  actedOnBehalfOf: _NS$e("actedOnBehalfOf"),

  /**
   * The more specific subproperties of prov:wasDerivedFrom (i.e., prov:wasQuotedFrom, prov:wasRevisionOf, prov:hadPrimarySource) should be used when applicable.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasDerivedFrom: _NS$e("wasDerivedFrom"),

  /**
   * End is when an activity is deemed to have ended. An end may refer to an entity, known as trigger, that terminated the activity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasEndedBy: _NS$e("wasEndedBy"),

  /**
   * entity
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  entity: _NS$e("entity"),

  /**
   * wasGeneratedBy
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasGeneratedBy: _NS$e("wasGeneratedBy"),

  /**
   * Because prov:wasInfluencedBy is a broad relation, its more specific subproperties (e.g. prov:wasInformedBy, prov:actedOnBehalfOf, prov:wasEndedBy, etc.) should be used when applicable.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInfluencedBy: _NS$e("wasInfluencedBy"),

  /**
   * wasInvalidatedBy
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasInvalidatedBy: _NS$e("wasInvalidatedBy"),

  /**
   * The Location of any resource.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  atLocation: _NS$e("atLocation"),

  /**
   * hadPrimarySource
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadPrimarySource: _NS$e("hadPrimarySource"),

  /**
   * An entity is derived from an original entity by copying, or 'quoting', some or all of it.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasQuotedFrom: _NS$e("wasQuotedFrom"),

  /**
   * A revision is a derivation that revises an entity into a revised version.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasRevisionOf: _NS$e("wasRevisionOf"),

  /**
   * The _optional_ Role that an Entity assumed in the context of an Activity. For example, :baking prov:used :spoon; prov:qualified [ a prov:Usage; prov:entity :spoon; prov:hadRole roles:mixing_implement ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadRole: _NS$e("hadRole"),

  /**
   * Start is when an activity is deemed to have started. A start may refer to an entity, known as trigger, that initiated the activity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  wasStartedBy: _NS$e("wasStartedBy"),

  /**
   * A prov:Entity that was used by this prov:Activity. For example, :baking prov:used :spoon, :egg, :oven .
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  used: _NS$e("used"),

  /**
   * If this Agent prov:actedOnBehalfOf Agent :ag, then it can qualify how with prov:qualifiedResponsibility [ a prov:Responsibility;  prov:agent :ag; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedDelegation: _NS$e("qualifiedDelegation"),

  /**
   * PROV-O does not define all property inverses. The directionalities defined in PROV-O should be given preference over those not defined. However, if users wish to name the inverse of a PROV-O property, the local name given by prov:inverse should be used.
   *
   * See also:
   *  - http://www.w3.org/TR/prov-o/#names-of-inverse-properties
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  inverse: _NS$e("inverse"),

  /**
   * This annotation property links a subproperty of prov:wasInfluencedBy with the subclass of prov:Influence and the qualifying property that are used to qualify it.
   Example annotation:
       prov:wasGeneratedBy prov:qualifiedForm prov:qualifiedGeneration, prov:Generation .
   Then this unqualified assertion:
       :entity1 prov:wasGeneratedBy :activity1 .
   can be qualified by adding:
      :entity1 prov:qualifiedGeneration :entity1Gen .
   :entity1Gen
       a prov:Generation, prov:Influence;
       prov:activity :activity1;
       :customValue 1337 .
   Note how the value of the unqualified influence (prov:wasGeneratedBy :activity1) is mirrored as the value of the prov:activity (or prov:entity, or prov:agent) property on the influence class.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedForm: _NS$e("qualifiedForm"),

  /**
   * Subproperties of prov:influencer are used to cite the object of an unqualified PROV-O triple whose predicate is a subproperty of prov:wasInfluencedBy (e.g. prov:used, prov:wasGeneratedBy). prov:influencer is used much like rdf:object is used.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  influencer: _NS$e("influencer"),

  /**
   * A note by the OWL development team about how this term expresses the PROV-DM concept, or how it should be used in context of semantic web or linked data.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  editorialNote: _NS$e("editorialNote"),

  /**
   * alternateOf
   *
   * See also:
   *  - http://www.w3.org/ns/prov#specializationOf
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  alternateOf: _NS$e("alternateOf"),

  /**
   * specializationOf
   *
   * See also:
   *  - http://www.w3.org/ns/prov#alternateOf
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  specializationOf: _NS$e("specializationOf"),

  /**
   *
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  aq: _NS$e("aq"),

  /**
   *
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  sharesDefinitionWith: _NS$e("sharesDefinitionWith"),

  /**
   * The time at which an InstantaneousEvent occurred, in the form of xsd:dateTime.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  atTime: _NS$e("atTime"),

  /**
   * The time at which an activity ended. See also prov:startedAtTime.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  endedAtTime: _NS$e("endedAtTime"),

  /**
   * The time at which an entity was completely created and is available for use.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  generatedAtTime: _NS$e("generatedAtTime"),

  /**
   * The time at which an entity was invalidated (i.e., no longer usable).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  invalidatedAtTime: _NS$e("invalidatedAtTime"),

  /**
   * The time at which an activity started. See also prov:endedAtTime.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  startedAtTime: _NS$e("startedAtTime"),

  /**
   * generated
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  generated: _NS$e("generated"),

  /**
   * influenced
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  influenced: _NS$e("influenced"),

  /**
   * The _optional_ Generation involved in an Entity's Derivation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadGeneration: _NS$e("hadGeneration"),

  /**
   * hadMember
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadMember: _NS$e("hadMember"),

  /**
   * The _optional_ Plan adopted by an Agent in Association with some Activity. Plan specifications are out of the scope of this specification.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadPlan: _NS$e("hadPlan"),

  /**
   * If this Entity prov:hadPrimarySource Entity :e, then it can qualify how using prov:qualifiedPrimarySource [ a prov:PrimarySource; prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedPrimarySource: _NS$e("qualifiedPrimarySource"),

  /**
   * The _optional_ Usage involved in an Entity's Derivation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  hadUsage: _NS$e("hadUsage"),

  /**
   * invalidated
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  invalidated: _NS$e("invalidated"),

  /**
   * The position that this OWL term should be listed within documentation. The scope of the documentation (e.g., among all terms, among terms within a prov:category, among properties applying to a particular class, etc.) is unspecified.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  order: _NS$e("order"),

  /**
   * If this Activity prov:wasAssociatedWith Agent :ag, then it can qualify the Association using prov:qualifiedAssociation [ a prov:Association;  prov:agent :ag; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedAssociation: _NS$e("qualifiedAssociation"),

  /**
   * Because prov:qualifiedInfluence is a broad relation, the more specific relations (qualifiedCommunication, qualifiedDelegation, qualifiedEnd, etc.) should be used when applicable.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedInfluence: _NS$e("qualifiedInfluence"),

  /**
   * If this Entity prov:wasAttributedTo Agent :ag, then it can qualify how it was influenced using prov:qualifiedAttribution [ a prov:Attribution;  prov:agent :ag; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedAttribution: _NS$e("qualifiedAttribution"),

  /**
   * If this Activity prov:wasInformedBy Activity :a, then it can qualify how it was influenced using prov:qualifiedCommunication [ a prov:Communication;  prov:activity :a; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedCommunication: _NS$e("qualifiedCommunication"),

  /**
   * If this Entity prov:wasDerivedFrom Entity :e, then it can qualify how it was derived using prov:qualifiedDerivation [ a prov:Derivation;  prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedDerivation: _NS$e("qualifiedDerivation"),

  /**
   * If this Activity prov:wasEndedBy Entity :e1, then it can qualify how it was ended using prov:qualifiedEnd [ a prov:End;  prov:entity :e1; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedEnd: _NS$e("qualifiedEnd"),

  /**
   * If this Activity prov:generated Entity :e, then it can qualify how it performed the Generation using prov:qualifiedGeneration [ a prov:Generation;  prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedGeneration: _NS$e("qualifiedGeneration"),

  /**
   * If this Entity prov:wasInvalidatedBy Activity :a, then it can qualify how it was invalidated using prov:qualifiedInvalidation [ a prov:Invalidation;  prov:activity :a; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedInvalidation: _NS$e("qualifiedInvalidation"),

  /**
   * If this Entity prov:wasQuotedFrom Entity :e, then it can qualify how using prov:qualifiedQuotation [ a prov:Quotation;  prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedQuotation: _NS$e("qualifiedQuotation"),

  /**
   * If this Entity prov:wasRevisionOf Entity :e, then it can qualify how it was revised using prov:qualifiedRevision [ a prov:Revision;  prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedRevision: _NS$e("qualifiedRevision"),

  /**
   * If this Activity prov:wasStartedBy Entity :e1, then it can qualify how it was started using prov:qualifiedStart [ a prov:Start;  prov:entity :e1; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedStart: _NS$e("qualifiedStart"),

  /**
   * If this Activity prov:used Entity :e, then it can qualify how it used it using prov:qualifiedUsage [ a prov:Usage; prov:entity :e; :foo :bar ].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  qualifiedUsage: _NS$e("qualifiedUsage"),

  /**
   *
   */
  todo: _NS$e("todo"),

  /**
   * value
   *
   * Defined by the vocabulary: http://www.w3.org/ns/prov-o#
   */
  value: _NS$e("value")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.PROV_O = PROV_O;
var rdfFactory$d = new rdfDataFactory.DataFactory();

function _NS$d(localName) {
  return rdfFactory$d.namedNode("http://www.w3.org/ns/dx/conneg/altr#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This ontology allows for the description of representations of Internet resources.

Representations may conform to prof:Profile instances and may have the format of a particular dct:MediaType.
 */


var ALTR = {
  PREFIX: "altr",
  NAMESPACE: "http://www.w3.org/ns/dx/conneg/altr#",
  PREFIX_AND_NAMESPACE: {
    "altr": "http://www.w3.org/ns/dx/conneg/altr#"
  },
  NS: _NS$d,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An abstraction of the current or desired state of a thing in HTTP communications.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/dx/connegp/altp
   */
  Representation: _NS$d("Representation"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Indicates a Representation of a Resource.
   */
  hasRepresentation: _NS$d("hasRepresentation"),

  /**
   * Indicates the default Representation of a Resource.
   */
  hasDefaultRepresentation: _NS$d("hasDefaultRepresentation")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.ALTR = ALTR;
var rdfFactory$c = new rdfDataFactory.DataFactory();

function _NS$c(localName) {
  return rdfFactory$c.namedNode("http://www.w3.org/ns/hydra/core#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * The Hydra Core Vocabulary is a lightweight vocabulary to create hypermedia-driven Web APIs. By specifying a number of concepts commonly used in Web APIs it enables the creation of generic API clients.
 */


var HYDRA = {
  PREFIX: "hydra",
  NAMESPACE: "http://www.w3.org/ns/hydra/core#",
  PREFIX_AND_NAMESPACE: {
    "hydra": "http://www.w3.org/ns/hydra/core#"
  },
  NS: _NS$c,
  // *****************
  // All the Classes.
  // *****************

  /**
   * The class of Hydra classes.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Class: _NS$c("Class"),

  /**
   * The class of properties representing links.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Link: _NS$c("Link"),

  /**
   * The Hydra API documentation class
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  ApiDocumentation: _NS$c("ApiDocumentation"),

  /**
   * A templated link.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  TemplatedLink: _NS$c("TemplatedLink"),

  /**
   * A runtime error, used to report information beyond the returned status code.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Error: _NS$c("Error"),

  /**
   * A collection holding references to a number of related resources.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Collection: _NS$c("Collection"),

  /**
   * A PartialCollectionView describes a partial view of a Collection. Multiple PartialCollectionViews can be connected with the the next/previous properties to allow a client to retrieve all members of the collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  PartialCollectionView: _NS$c("PartialCollectionView"),

  /**
   * Provides a base abstract for base Uri source for Iri template resolution.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  BaseUriSource: _NS$c("BaseUriSource"),

  /**
   * Specifies a possible either expected or returned header values
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  HeaderSpecification: _NS$c("HeaderSpecification"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A property
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  property: _NS$c("property"),

  /**
   * True if the property is required, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  required: _NS$c("required"),

  /**
   * True if the client can retrieve the property's value, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  readable: _NS$c("readable"),

  /**
   * True if the client can change the property's value, false otherwise.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writable: _NS$c("writable"),

  /**
   * This property is left for compatibility purposes and hydra:writable should be used instead.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  writeable: _NS$c("writeable"),

  /**
   * The HTTP method.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  method: _NS$c("method"),

  /**
   * The HTTP status code. Please note it may happen this value will be different to actual status code received.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  statusCode: _NS$c("statusCode"),

  /**
   * A title, often used along with a description.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  title: _NS$c("title"),

  /**
   * A description.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  description: _NS$c("description"),

  /**
   * This predicate is left for compatibility purposes and hydra:memberAssertion should be used instead.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  manages: _NS$c("manages"),

  /**
   * The total number of items referenced by a collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  totalItems: _NS$c("totalItems"),

  /**
   * A property representing a freetext query.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  freetextQuery: _NS$c("freetextQuery"),

  /**
   * A templated string with placeholders. The literal's datatype indicates the template syntax; if not specified, hydra:Rfc6570Template is assumed.
   *
   * See also:
   *  - http://www.w3.org/ns/hydra/core#Rfc6570Template
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  template: _NS$c("template"),

  /**
   * An IRI template as defined by RFC6570.
   *
   * See also:
   *  - http://tools.ietf.org/html/rfc6570
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  Rfc6570Template: _NS$c("Rfc6570Template"),

  /**
   * The representation format to use when expanding the IRI template.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variableRepresentation: _NS$c("variableRepresentation"),

  /**
   * A variable-to-property mapping of the IRI template.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  mapping: _NS$c("mapping"),

  /**
   * An IRI template variable
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  variable: _NS$c("variable"),

  /**
   * relative Uri resolution
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  resolveRelativeUsing: _NS$c("resolveRelativeUsing"),

  /**
   * Instructs to skip N elements of the set.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  offset: _NS$c("offset"),

  /**
   * Instructs to limit set only to N elements.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  limit: _NS$c("limit"),

  /**
   * Instructs to provide a specific page of the collection at a given index.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageIndex: _NS$c("pageIndex"),

  /**
   * Instructs to provide a specific page reference of the collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  pageReference: _NS$c("pageReference"),

  /**
   * Name of the header returned by the operation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  returnsHeader: _NS$c("returnsHeader"),

  /**
   * Specification of the header expected by the operation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  expectsHeader: _NS$c("expectsHeader"),

  /**
   * Name of the header.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  headerName: _NS$c("headerName"),

  /**
   * Possible value of the header.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  possibleValue: _NS$c("possibleValue"),

  /**
   * Determines whether the provided set of header values is closed or not.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  closedSet: _NS$c("closedSet"),

  /**
   * Hint on what kind of extensions are in use.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/hydra/core
   */
  extension: _NS$c("extension")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.HYDRA = HYDRA;
var rdfFactory$b = new rdfDataFactory.DataFactory();

function _NS$b(localName) {
  return rdfFactory$b.namedNode("http://www.w3.org/ns/dcat#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * DCAT es un vocabulario RDF diseñado para facilitar la interoperabilidad entre catálogos de datos publicados en la Web. Utilizando DCAT para describir datos disponibles en catálogos se aumenta la posibilidad de que sean descubiertos y se permite que las aplicaciones consuman fácilmente los metadatos de varios catálogos.
 */


var DCAT = {
  PREFIX: "dcat",
  NAMESPACE: "http://www.w3.org/ns/dcat#",
  PREFIX_AND_NAMESPACE: {
    "dcat": "http://www.w3.org/ns/dcat#"
  },
  NS: _NS$b,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A curated collection of metadata about resources (e.g., datasets and data services in the context of a data catalog).
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Catalog: _NS$b("Catalog"),

  /**
   * A collection of data, published or curated by a single source, and available for access or download in one or more representations.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Dataset: _NS$b("Dataset"),

  /**
   * Resource published or curated by a single agent.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  Resource: _NS$b("Resource"),

  /**
   * A record in a data catalog, describing the registration of a single dataset or data service.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [8] labels in languages [ar, cs, da, el, es, fr, it, ja], but [7] comments in languages [cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  CatalogRecord: _NS$b("CatalogRecord"),

  /**
   * A site or end-point providing operations related to the discovery of, access to, or processing functions on, data or related resources.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [3] labels in languages [da, es, it], but [4] comments in languages [cs, da, es, it].
   */
  DataService: _NS$b("DataService"),

  /**
   * A specific representation of a dataset. A dataset might be available in multiple serializations that may differ in various ways, including natural language, media-type or format, schematic organization, temporal and spatial resolution, level of detail or profiles (which might specify any or all of the above).
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  Distribution: _NS$b("Distribution"),

  /**
   * An association class for attaching additional information to a relationship between DCAT Resources.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  Relationship: _NS$b("Relationship"),

  /**
   * A role is the function of a resource or agent with respect to another resource, in the context of resource attribution or resource relationships.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   *
   * See also:
   *  - http://www.w3.org/ns/dcat#hadRole
   */
  Role: _NS$b("Role"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The root location or primary endpoint of the service (a web-resolvable IRI).
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  endpointURL: _NS$b("endpointURL"),

  /**
   * The function of an entity or agent with respect to another entity or resource.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [3] labels in languages [cs, da, it], but [4] comments in languages [cs, da, es, it].
   */
  hadRole: _NS$b("hadRole"),

  /**
   * A site or end-point that gives access to the distribution of the dataset.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  accessService: _NS$b("accessService"),

  /**
   * A URL of a resource that gives access to a distribution of the dataset. E.g. landing page, feed, SPARQL endpoint. Use for all cases except a simple download link, in which case downloadURL is preferred.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  accessURL: _NS$b("accessURL"),

  /**
   * The geographic bounding box of a resource.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [4] labels in languages [cs, da, es, it], but [0] comments.
   */
  bbox: _NS$b("bbox"),

  /**
   * The size of a distribution in bytes.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  byteSize: _NS$b("byteSize"),

  /**
   * A catalog whose contents are of interest in the context of this catalog.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  catalog: _NS$b("catalog"),

  /**
   * The geographic center (centroid) of a resource.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [4] labels in languages [cs, da, es, it], but [0] comments.
   */
  centroid: _NS$b("centroid"),

  /**
   * The compression format of the distribution in which the data is contained in a compressed form, e.g. to reduce the size of the downloadable file.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   *
   * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
   */
  compressFormat: _NS$b("compressFormat"),

  /**
   * Relevant contact information for the catalogued resource. Use of vCard is recommended.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  contactPoint: _NS$b("contactPoint"),

  /**
   * A collection of data that is listed in the catalog.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  dataset: _NS$b("dataset"),

  /**
   * An available distribution of the dataset.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  distribution: _NS$b("distribution"),

  /**
   * The URL of the downloadable file in a given format. E.g. CSV file or RDF file. The format is indicated by the distribution's dct:format and/or dcat:mediaType.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  downloadURL: _NS$b("downloadURL"),

  /**
   * The end of the period.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [4] labels in languages [cs, da, es, it], but [0] comments.
   */
  endDate: _NS$b("endDate"),

  /**
   * A description of the service end-point, including its operations, parameters etc.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  endpointDescription: _NS$b("endpointDescription"),

  /**
   * A keyword or tag describing a resource.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  keyword: _NS$b("keyword"),

  /**
   * A Web page that can be navigated to in a Web browser to gain access to the catalog, a dataset, its distributions and/or additional information.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  landingPage: _NS$b("landingPage"),

  /**
   * The media type of the distribution as defined by IANA
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  mediaType: _NS$b("mediaType"),

  /**
   * The package format of the distribution in which one or more data files are grouped together, e.g. to enable a set of related files to be downloaded together.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   *
   * Defined by the vocabulary: https://www.w3.org/TR/vocab-dcat-2/
   */
  packageFormat: _NS$b("packageFormat"),

  /**
   * Link to a description of a relationship with another resource.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  qualifiedRelation: _NS$b("qualifiedRelation"),

  /**
   * A record describing the registration of a single dataset or data service that is part of the catalog.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  record: _NS$b("record"),

  /**
   * A collection of data that this DataService can distribute.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  servesDataset: _NS$b("servesDataset"),

  /**
   * A site or endpoint that is listed in the catalog.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  service: _NS$b("service"),

  /**
   * minimum spatial separation resolvable in a dataset, measured in meters.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  spatialResolutionInMeters: _NS$b("spatialResolutionInMeters"),

  /**
   * The start of the period
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [3] labels in languages [cs, da, it], but [0] comments.
   */
  startDate: _NS$b("startDate"),

  /**
   * minimum time period resolvable in a dataset.
   *
   * This term has [4] labels and comments, in the languages [cs, da, es, it].
   */
  temporalResolution: _NS$b("temporalResolution"),

  /**
   * A main category of the resource. A resource can have multiple themes.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  theme: _NS$b("theme"),

  /**
   * The knowledge organization system (KOS) used to classify catalog's datasets.
   *
   * This term has [8] labels and comments, in the languages [ar, cs, da, el, es, fr, it, ja].
   *
   * Defined by the vocabulary: http://www.w3.org/TR/vocab-dcat/
   */
  themeTaxonomy: _NS$b("themeTaxonomy")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.DCAT = DCAT;
var rdfFactory$a = new rdfDataFactory.DataFactory();

function _NS$a(localName) {
  return rdfFactory$a.namedNode("http://www.w3.org/2002/01/bookmark#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - W3C Bookmark vocabulary
 */


var BOOKMARK = {
  PREFIX: "bookmark",
  NAMESPACE: "http://www.w3.org/2002/01/bookmark#",
  PREFIX_AND_NAMESPACE: {
    "bookmark": "http://www.w3.org/2002/01/bookmark#"
  },
  NS: _NS$a,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Topic
   */
  Topic: _NS$a("Topic"),

  /**
   * Specifies a behavior; when the
                object of type 'Shortcut' is activated, the
                client follows the 'recalls' property and
                activates the object at the end of that
                'recalls' property.  The target object may
                be another Bookmark or may be a Topic.
   */
  Shortcut: _NS$a("Shortcut"),

  /**
   * The class to which all bookmarks belong.
   */
  Bookmark: _NS$a("Bookmark"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * relates a bookmark to a topic.
                A bookmark must have at least one hasTopic property.
                The typical user operation of following a bookmark link
                will use the value of the b:recalls property. This property
                corresponds to XBEL:href property.
   */
  hasTopic: _NS$a("hasTopic"),

  /**
   * connects a Shortcut to the bookmark or topic that is
  being included by reference in some other topic
   */
  leadsTo: _NS$a("leadsTo"),

  /**
   * This corresponds to XBEL:href an
                object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked.  The 'bookmarks' property is an older
                name for the 'recalls' relationship.
   */
  bookmarks: _NS$a("bookmarks"),

  /**
   * Relates a bookmark with the resource that
                has been bookmarked.  This corresponds to XBEL:href;
                an object of type Bookmark is expected to have a
                'recalls' relationship to the document being
                bookmarked
   */
  recalls: _NS$a("recalls"),

  /**
   * Describes a relationship between Topics.
        When a topic T is a sub-topic of a topic U then all
        bookmarks that have topic T are also considered to have
        topic U. A topic may be a sub-topic of one or more
        topics; trivially, every topic is a sub-topic of itself.
        More formally; for all B, T, and U: b b:hasTopic T,
        T b:subTopicOf U implies B b:hasTopic U.
   */
  subTopicOf: _NS$a("subTopicOf")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.BOOKMARK = BOOKMARK;
var rdfFactory$9 = new rdfDataFactory.DataFactory();

function _NS$9(localName) {
  return rdfFactory$9.namedNode("http://www.w3.org/ns/sparql-service-description#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - SPARQL Service Description vocabulary
 */


var SD = {
  PREFIX: "sd",
  NAMESPACE: "http://www.w3.org/ns/sparql-service-description#",
  PREFIX_AND_NAMESPACE: {
    "sd": "http://www.w3.org/ns/sparql-service-description#"
  },
  NS: _NS$9,
  // *****************
  // All the Classes.
  // *****************

  /**
   * An instance of sd:Service represents a SPARQL service made available via the SPARQL Protocol.
   */
  Service: _NS$9("Service"),

  /**
   * An instance of sd:Feature represents a feature of a SPARQL service. Specific types of features include functions, aggregates, languages, and entailment regimes and profiles. This document defines five instances of sd:Feature: sd:DereferencesURIs, sd:UnionDefaultGraph, sd:RequiresDataset, sd:EmptyGraphs, and sd:BasicFederatedQuery.
   */
  Feature: _NS$9("Feature"),

  /**
   * An instance of sd:EntailmentRegime represents an entailment regime used in basic graph pattern matching (as described by SPARQL 1.1 Query Language).
   */
  EntailmentRegime: _NS$9("EntailmentRegime"),

  /**
   * An instance of sd:NamedGraph represents a named graph having a name (via sd:name) and an optional graph description (via sd:graph).
   */
  NamedGraph: _NS$9("NamedGraph"),

  /**
   * An instance of sd:EntailmentProfile represents a profile of an entailment regime. An entailment profile MAY impose restrictions on what constitutes valid RDF with respect to entailment.
   */
  EntailmentProfile: _NS$9("EntailmentProfile"),

  /**
   * An instance of sd:Function represents a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
   */
  Function: _NS$9("Function"),

  /**
   * An instance of sd:Aggregate represents an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE.
   */
  Aggregate: _NS$9("Aggregate"),

  /**
   * An instance of sd:Language represents one of the SPARQL languages, including specific configurations providing particular features or extensions. This document defines three instances of sd:Language: sd:SPARQL10Query, sd:SPARQL11Query, and sd:SPARQL11Update.
   */
  Language: _NS$9("Language"),

  /**
   * An instance of sd:Dataset represents a RDF Dataset comprised of a default graph and zero or more named graphs.
   */
  Dataset: _NS$9("Dataset"),

  /**
   * An instance of sd:GraphCollection represents a collection of zero or more named graph descriptions. Each named graph description belonging to an sd:GraphCollection MUST be linked with the sd:namedGraph predicate.
   */
  GraphCollection: _NS$9("GraphCollection"),

  /**
   * An instance of sd:Graph represents the description of an RDF graph.
   */
  Graph: _NS$9("Graph"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The SPARQL endpoint of an sd:Service that implements the SPARQL Protocol service. The object of the sd:endpoint property is an IRI.
   */
  endpoint: _NS$9("endpoint"),

  /**
   * Relates an instance of sd:Service with a resource representing a supported feature.
   */
  feature: _NS$9("feature"),

  /**
   * Relates an instance of sd:Service with a resource representing an entailment regime used for basic graph pattern matching. This property is intended for use when a single entailment regime by default applies to all graphs in the default dataset of the service. In situations where a different entailment regime applies to a specific graph in the dataset, the sd:entailmentRegime property should be used to indicate this fact in the description of that graph.
   */
  defaultEntailmentRegime: _NS$9("defaultEntailmentRegime"),

  /**
   * Relates a named graph description with a resource representing an entailment regime used for basic graph pattern matching over that graph.
   */
  entailmentRegime: _NS$9("entailmentRegime"),

  /**
   * Relates an instance of sd:Service with a resource representing a supported profile of the default entailment regime (as declared by sd:defaultEntailmentRegime).
   */
  defaultSupportedEntailmentProfile: _NS$9("defaultSupportedEntailmentProfile"),

  /**
   * Relates a named graph description with a resource representing a supported profile of the entailment regime (as declared by sd:entailmentRegime) used for basic graph pattern matching over that graph.
   */
  supportedEntailmentProfile: _NS$9("supportedEntailmentProfile"),

  /**
   * Relates an instance of sd:Service to a function that may be used in a SPARQL SELECT expression or a FILTER, HAVING, GROUP BY, ORDER BY, or BIND clause.
   */
  extensionFunction: _NS$9("extensionFunction"),

  /**
   * Relates an instance of sd:Service to an aggregate that may be used in a SPARQL aggregate query (for instance in a HAVING clause or SELECT expression) besides the standard list of supported aggregates COUNT, SUM, MIN, MAX, AVG, GROUP_CONCAT, and SAMPLE
   */
  extensionAggregate: _NS$9("extensionAggregate"),

  /**
   * Relates an instance of sd:Service to a resource representing an implemented extension to the SPARQL Query or Update language.
   */
  languageExtension: _NS$9("languageExtension"),

  /**
   * Relates an instance of sd:Service to a SPARQL language (e.g. Query and Update) that it implements.
   */
  supportedLanguage: _NS$9("supportedLanguage"),

  /**
   * Relates an instance of sd:Service to a resource representing an implemented feature that extends the SPARQL Query or Update language and that is accessed by using the named property.
   */
  propertyFeature: _NS$9("propertyFeature"),

  /**
   * Relates an instance of sd:Service to a description of the default dataset available when no explicit dataset is specified in the query, update request or via protocol parameters.
   */
  defaultDataset: _NS$9("defaultDataset"),

  /**
   * Relates an instance of sd:Service to a description of the graphs which are allowed in the construction of a dataset either via the SPARQL Protocol, with FROM/FROM NAMED clauses in a query, or with USING/USING NAMED in an update request, if the service limits the scope of dataset construction.
   */
  availableGraphs: _NS$9("availableGraphs"),

  /**
   * Relates an instance of sd:Service to a format that is supported for serializing query results.
   */
  resultFormat: _NS$9("resultFormat"),

  /**
   * Relates an instance of sd:Service to a format that is supported for parsing RDF input; for example, via a SPARQL 1.1 Update LOAD statement, or when URIs are dereferenced in FROM/FROM NAMED/USING/USING NAMED clauses.
   */
  inputFormat: _NS$9("inputFormat"),

  /**
   * Relates an instance of sd:Dataset to the description of its default graph.
   */
  defaultGraph: _NS$9("defaultGraph"),

  /**
   * Relates an instance of sd:GraphCollection (or its subclass sd:Dataset) to the description of one of its named graphs. The description of such a named graph MUST include the sd:name property and MAY include the sd:graph property.
   */
  namedGraph: _NS$9("namedGraph"),

  /**
   * Relates a named graph to the name by which it may be referenced in a FROM/FROM NAMED clause. The object of the sd:name property is an IRI.
   */
  name: _NS$9("name"),

  /**
   * Relates a named graph to its graph description.
   */
  graph: _NS$9("graph")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SD = SD;
var rdfFactory$8 = new rdfDataFactory.DataFactory();

function _NS$8(localName) {
  return rdfFactory$8.namedNode("http://rdfs.org/ns/void#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * The Vocabulary of Interlinked Datasets (VoID) is an RDF Schema vocabulary for expressing metadata about RDF datasets. It is intended as a bridge between the publishers and users of RDF data, with applications ranging from data discovery to cataloging and archiving of datasets. This document provides a formal definition of the new RDF classes and properties introduced for VoID. It is a companion to the main specification document for VoID, <em><a href="http://www.w3.org/TR/void/">Describing Linked Datasets with the VoID Vocabulary</a></em>.
 */


var VOID = {
  PREFIX: "void",
  NAMESPACE: "http://rdfs.org/ns/void#",
  PREFIX_AND_NAMESPACE: {
    "void": "http://rdfs.org/ns/void#"
  },
  NS: _NS$8,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A set of RDF triples that are published, maintained or aggregated by a single provider.
   */
  Dataset: _NS$8("Dataset"),

  /**
   * A collection of RDF links between two void:Datasets.
   */
  Linkset: _NS$8("Linkset"),

  /**
   * A technical feature of a void:Dataset, such as a supported RDF serialization format.
   */
  TechnicalFeature: _NS$8("TechnicalFeature"),

  /**
   * A web resource whose foaf:primaryTopic or foaf:topics include void:Datasets.
   */
  DatasetDescription: _NS$8("DatasetDescription"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * feature
   */
  feature: _NS$8("feature"),

  /**
   * has subset
   */
  subset: _NS$8("subset"),

  /**
   * One of the two datasets linked by the Linkset.
   */
  target: _NS$8("target"),

  /**
   * has a SPARQL endpoint at
   */
  sparqlEndpoint: _NS$8("sparqlEndpoint"),

  /**
   * a link predicate
   */
  linkPredicate: _NS$8("linkPredicate"),

  /**
   * example resource of dataset
   */
  exampleResource: _NS$8("exampleResource"),

  /**
   * A vocabulary that is used in the dataset.
   */
  vocabulary: _NS$8("vocabulary"),

  /**
   * The dataset describing the subjects of triples contained in the Linkset.
   */
  subjectsTarget: _NS$8("subjectsTarget"),

  /**
   * The dataset describing the objects of the triples contained in the Linkset.
   */
  objectsTarget: _NS$8("objectsTarget"),

  /**
   * An RDF dump, partial or complete, of a void:Dataset.
   */
  dataDump: _NS$8("dataDump"),

  /**
   * Defines a simple URI look-up protocol for accessing a dataset.
   */
  uriLookupEndpoint: _NS$8("uriLookupEndpoint"),

  /**
   * Defines a regular expression pattern matching URIs in the dataset.
   */
  uriRegexPattern: _NS$8("uriRegexPattern"),

  /**
   * The rdfs:Class that is the rdf:type of all entities in a class-based partition.
   */
  class: _NS$8("class"),

  /**
   * The total number of distinct classes in a void:Dataset. In other words, the number of distinct resources occuring as objects of rdf:type triples in the dataset.
   */
  classes: _NS$8("classes"),

  /**
   * A subset of a void:Dataset that contains only the entities of a certain rdfs:Class.
   */
  classPartition: _NS$8("classPartition"),

  /**
   * The total number of distinct objects in a void:Dataset. In other words, the number of distinct resources that occur in the object position of triples in the dataset. Literals are included in this count.
   */
  distinctObjects: _NS$8("distinctObjects"),

  /**
   * The total number of distinct subjects in a void:Dataset. In other words, the number of distinct resources that occur in the subject position of triples in the dataset.
   */
  distinctSubjects: _NS$8("distinctSubjects"),

  /**
   * The total number of documents, for datasets that are published as a set of individual documents, such as RDF/XML documents or RDFa-annotated web pages. Non-RDF documents, such as web pages in HTML or images, are usually not included in this count. This property is intended for datasets where the total number of triples or entities is hard to determine. void:triples or void:entities should be preferred where practical.
   */
  documents: _NS$8("documents"),

  /**
   * The total number of entities that are described in a void:Dataset.
   */
  entities: _NS$8("entities"),

  /**
   * Points to the void:Dataset that a document is a part of.
   */
  inDataset: _NS$8("inDataset"),

  /**
   * An OpenSearch description document for a free-text search service over a void:Dataset.
   */
  openSearchDescription: _NS$8("openSearchDescription"),

  /**
   * The total number of distinct properties in a void:Dataset. In other words, the number of distinct resources that occur in the predicate position of triples in the dataset.
   */
  properties: _NS$8("properties"),

  /**
   * The rdf:Property that is the predicate of all triples in a property-based partition.
   */
  property: _NS$8("property"),

  /**
   * A subset of a void:Dataset that contains only the triples of a certain rdf:Property.
   */
  propertyPartition: _NS$8("propertyPartition"),

  /**
   * A top concept or entry point for a void:Dataset that is structured in a tree-like fashion. All resources in a dataset can be reached by following links from its root resources in a small number of steps.
   */
  rootResource: _NS$8("rootResource"),

  /**
   * The total number of triples contained in a void:Dataset.
   */
  triples: _NS$8("triples"),

  /**
   * A URI that is a common string prefix of all the entity URIs in a void:Dataset.
   */
  uriSpace: _NS$8("uriSpace")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.VOID = VOID;
var rdfFactory$7 = new rdfDataFactory.DataFactory();

function _NS$7(localName) {
  return rdfFactory$7.namedNode("http://www.w3.org/2006/time#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Time Ontology in OWL
 */


var TIME = {
  PREFIX: "time",
  NAMESPACE: "http://www.w3.org/2006/time#",
  PREFIX_AND_NAMESPACE: {
    "time": "http://www.w3.org/2006/time#"
  },
  NS: _NS$7,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Description of date and time structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of year, month, day properties restricted to corresponding XML Schema types xsd:gYear, xsd:gMonth and xsd:gDay, respectively.
   *
   * This term has [1] label and comment, in the language [es].
   */
  DateTimeDescription: _NS$7("DateTimeDescription"),

  /**
   * Description of date and time structured with separate values for the various elements of a calendar-clock system
   *
   * This term has [1] label and comment, in the language [es].
   */
  GeneralDateTimeDescription: _NS$7("GeneralDateTimeDescription"),

  /**
   * DateTimeInterval is a subclass of ProperInterval, defined using the multi-element DateTimeDescription.
   *
   * This term has [1] label and comment, in the language [es].
   */
  DateTimeInterval: _NS$7("DateTimeInterval"),

  /**
   * A temporal entity with non-zero extent or duration, i.e. for which the value of the beginning and end are different
   *
   * This term has [1] label and comment, in the language [es].
   */
  ProperInterval: _NS$7("ProperInterval"),

  /**
   * The day of week
   *
   * This term has [1] label and comment, in the language [es].
   */
  DayOfWeek: _NS$7("DayOfWeek"),

  /**
   * Duration of a temporal extent expressed as a number scaled by a temporal unit
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  Duration: _NS$7("Duration"),

  /**
   * Time extent; duration of a time interval separate from its particular start position
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalDuration: _NS$7("TemporalDuration"),

  /**
   * Description of temporal extent structured with separate values for the various elements of a calendar-clock system. The temporal reference system is fixed to Gregorian Calendar, and the range of each of the numeric properties is restricted to xsd:decimal
   *
   * This term has [1] label and comment, in the language [es].
   */
  DurationDescription: _NS$7("DurationDescription"),

  /**
   * Description of temporal extent structured with separate values for the various elements of a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  GeneralDurationDescription: _NS$7("GeneralDurationDescription"),

  /**
   * A position on a time-line
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalPosition: _NS$7("TemporalPosition"),

  /**
   * A temporal entity with zero extent or duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  Instant: _NS$7("Instant"),

  /**
   * A temporal interval or instant.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalEntity: _NS$7("TemporalEntity"),

  /**
   * A temporal entity with an extent or duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  Interval: _NS$7("Interval"),

  /**
   * January
   */
  January: _NS$7("January"),

  /**
   * The month of the year
   *
   * This term has [1] label and comment, in the language [es].
   */
  MonthOfYear: _NS$7("MonthOfYear"),

  /**
   * A temporal reference system, such as a temporal coordinate system (with an origin, direction, and scale), a calendar-clock combination, or a (possibly hierarchical) ordinal system.
   This is a stub class, representing the set of all temporal reference systems.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TRS: _NS$7("TRS"),

  /**
   * A standard duration, which provides a scale factor for a time extent, or the granularity or precision for a time position.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TemporalUnit: _NS$7("TemporalUnit"),

  /**
   * A temporal position described using either a (nominal) value from an ordinal reference system, or a (numeric) value in a temporal coordinate system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TimePosition: _NS$7("TimePosition"),

  /**
   * A Time Zone specifies the amount by which the local time is offset from UTC.
    A time zone is usually denoted geographically (e.g. Australian Eastern Daylight Time), with a constant value in a given region.
  The region where it applies and the offset from UTC are specified by a locally recognised governing authority.
   *
   * This term has [1] label and comment, in the language [es].
   */
  TimeZone: _NS$7("TimeZone"),

  /**
   * Year duration
   */
  Year: _NS$7("Year"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * Day position in a calendar-clock system.
   The range of this property is not specified, so can be replaced by any specific representation of a calendar day from any calendar.
   *
   * This term has [1] label and comment, in the language [es].
   */
  day: _NS$7("day"),

  /**
   * Month position in a calendar-clock system.
   The range of this property is not specified, so can be replaced by any specific representation of a calendar month from any calendar.
   *
   * This term has [1] label and comment, in the language [es].
   */
  month: _NS$7("month"),

  /**
   * Year position in a calendar-clock system.
   The range of this property is not specified, so can be replaced by any specific representation of a calendar year from any calendar.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  year: _NS$7("year"),

  /**
   * The temporal reference system used by a temporal position or extent description.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTRS: _NS$7("hasTRS"),

  /**
   * Value of a temporal extent expressed as a decimal number scaled by a temporal unit
   *
   * This term has [1] label and comment, in the language [es].
   */
  numericDuration: _NS$7("numericDuration"),

  /**
   * The temporal unit which provides the precision of a date-time value or scale of a temporal extent
   *
   * This term has [1] label and comment, in the language [es].
   */
  unitType: _NS$7("unitType"),

  /**
   * length of, or element of the length of, a temporal extent expressed in days
   *
   * This term has [1] label and comment, in the language [es].
   */
  days: _NS$7("days"),

  /**
   * length of, or element of the length of, a temporal extent expressed in hours
   *
   * This term has [1] label and comment, in the language [es].
   */
  hours: _NS$7("hours"),

  /**
   * length, or element of, a temporal extent expressed in minutes
   *
   * This term has [1] label and comment, in the language [es].
   */
  minutes: _NS$7("minutes"),

  /**
   * length of, or element of the length of, a temporal extent expressed in months
   *
   * This term has [1] label and comment, in the language [es].
   */
  months: _NS$7("months"),

  /**
   * length of, or element of the length of, a temporal extent expressed in seconds
   *
   * This term has [1] label and comment, in the language [es].
   *
   * See also:
   *  - http://www.bipm.org/en/publications/si-brochure/second.html
   */
  seconds: _NS$7("seconds"),

  /**
   * length of, or element of the length of, a temporal extent expressed in weeks
   *
   * This term has [1] label and comment, in the language [es].
   */
  weeks: _NS$7("weeks"),

  /**
   * length of, or element of the length of, a temporal extent expressed in years
   *
   * This term has [1] label and comment, in the language [es].
   */
  years: _NS$7("years"),

  /**
   * The day of week, whose value is a member of the class time:DayOfWeek
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  dayOfWeek: _NS$7("dayOfWeek"),

  /**
   * The number of the day within the year
   *
   * This term has [1] label and comment, in the language [es].
   */
  dayOfYear: _NS$7("dayOfYear"),

  /**
   * Hour position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hour: _NS$7("hour"),

  /**
   * Minute position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  minute: _NS$7("minute"),

  /**
   * The month of the year, whose value is a member of the class time:MonthOfYear
   *
   * This term has [1] label and comment, in the language [es].
   */
  monthOfYear: _NS$7("monthOfYear"),

  /**
   * Second position in a calendar-clock system.
   *
   * This term has [1] label and comment, in the language [es].
   */
  second: _NS$7("second"),

  /**
   * The time zone for clock elements in the temporal position
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  timeZone: _NS$7("timeZone"),

  /**
   * Week number within the year.
   *
   * This term has [1] label and comment, in the language [es].
   */
  week: _NS$7("week"),

  /**
   * The (numeric) value indicating position within a temporal coordinate system
   *
   * This term has [1] label and comment, in the language [es].
   */
  numericPosition: _NS$7("numericPosition"),

  /**
   * The (nominal) value indicating temporal position in an ordinal reference system
   *
   * This term has [1] label and comment, in the language [es].
   */
  nominalPosition: _NS$7("nominalPosition"),

  /**
   * Gives directionality to time. If a temporal entity T1 is after another temporal entity T2, then the beginning of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  after: _NS$7("after"),

  /**
   * Gives directionality to time. If a temporal entity T1 is before another temporal entity T2, then the end of T1 is before the beginning of T2. Thus, "before" can be considered to be basic to instants and derived for intervals.
   *
   * This term has [1] label and comment, in the language [es].
   */
  before: _NS$7("before"),

  /**
   * Day of month - formulated as a text string with a pattern constraint to reproduce the same lexical form as gDay, except that values up to 99 are permitted, in order to support calendars with more than 31 days in a month.
  Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalDay: _NS$7("generalDay"),

  /**
   * Month of year - formulated as a text string with a pattern constraint to reproduce the same lexical form as gMonth, except that values up to 20 are permitted, in order to support calendars with more than 12 months in the year.
  Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalMonth: _NS$7("generalMonth"),

  /**
   * Year number - formulated as a text string with a pattern constraint to reproduce the same lexical form as gYear, but not restricted to values from the Gregorian calendar.
  Note that the value-space is not defined, so a generic OWL2 processor cannot compute ordering relationships of values of this type.
   *
   * This term has [1] label and comment, in the language [es].
   */
  generalYear: _NS$7("generalYear"),

  /**
   * Beginning of a temporal entity
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasBeginning: _NS$7("hasBeginning"),

  /**
   * Supports the association of a temporal entity (instant or interval) to any thing
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTime: _NS$7("hasTime"),

  /**
   * Value of DateTimeInterval expressed as a structured value. The beginning and end of the interval coincide with the limits of the shortest element in the description.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDateTimeDescription: _NS$7("hasDateTimeDescription"),

  /**
   * Duration of a temporal entity, expressed as a scaled value or nominal value
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDuration: _NS$7("hasDuration"),

  /**
   * Duration of a temporal entity.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasTemporalDuration: _NS$7("hasTemporalDuration"),

  /**
   * Duration of a temporal entity, expressed using a structured description
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasDurationDescription: _NS$7("hasDurationDescription"),

  /**
   * End of a temporal entity.
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasEnd: _NS$7("hasEnd"),

  /**
   * Extent of a temporal entity, expressed using xsd:duration
   *
   * This term has [1] label and comment, in the language [es].
   */
  hasXSDDuration: _NS$7("hasXSDDuration"),

  /**
   * Position of an instant, expressed using a structured description
   *
   * This term has [1] label and comment, in the language [es].
   */
  inDateTime: _NS$7("inDateTime"),

  /**
   * Position of a time instant
   *
   * This term has [1] label and comment, in the language [es].
   */
  inTemporalPosition: _NS$7("inTemporalPosition"),

  /**
   * Position of an instant, expressed as a temporal coordinate or nominal value
   *
   * This term has [1] label and comment, in the language [es].
   */
  inTimePosition: _NS$7("inTimePosition"),

  /**
   * Position of an instant, expressed using xsd:date
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDate: _NS$7("inXSDDate"),

  /**
   * Position of an instant, expressed using xsd:dateTime
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDateTime: _NS$7("inXSDDateTime"),

  /**
   * Position of an instant, expressed using xsd:dateTimeStamp
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDDateTimeStamp: _NS$7("inXSDDateTimeStamp"),

  /**
   * Position of an instant, expressed using xsd:gYear
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDgYear: _NS$7("inXSDgYear"),

  /**
   * Position of an instant, expressed using xsd:gYearMonth
   *
   * This term has [1] label and comment, in the language [es].
   */
  inXSDgYearMonth: _NS$7("inXSDgYearMonth"),

  /**
   * An instant that falls inside the interval. It is not intended to include beginnings and ends of intervals.
   *
   * This term has [1] label and comment, in the language [es].
   */
  inside: _NS$7("inside"),

  /**
   * If a proper interval T1 is intervalAfter another proper interval T2, then the beginning of T1 is after the end of T2.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [1] label in the language [es], but [0] comments.
   */
  intervalAfter: _NS$7("intervalAfter"),

  /**
   * If a proper interval T1 is intervalDisjoint another proper interval T2, then the beginning of T1 is after the end of T2, or the end of T1 is before the beginning of T2, i.e. the intervals do not overlap in any way, but their ordering relationship is not known.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalDisjoint: _NS$7("intervalDisjoint"),

  /**
   * If a proper interval T1 is intervalBefore another proper interval T2, then the end of T1 is before the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalBefore: _NS$7("intervalBefore"),

  /**
   * If a proper interval T1 is intervalContains another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalContains: _NS$7("intervalContains"),

  /**
   * If a proper interval T1 is intervalDuring another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalDuring: _NS$7("intervalDuring"),

  /**
   * If a proper interval T1 is intervalIn another proper interval T2, then the beginning of T1 is after the beginning of T2 or is coincident with the beginning of T2, and the end of T1 is before the end of T2, or is coincident with the end of T2, except that end of T1 may not be coincident with the end of T2 if the beginning of T1 is coincident with the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalIn: _NS$7("intervalIn"),

  /**
   * If a proper interval T1 is intervalEquals another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalEquals: _NS$7("intervalEquals"),

  /**
   * If a proper interval T1 is intervalFinishedBy another proper interval T2, then the beginning of T1 is before the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalFinishedBy: _NS$7("intervalFinishedBy"),

  /**
   * If a proper interval T1 is intervalFinishes another proper interval T2, then the beginning of T1 is after the beginning of T2, and the end of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalFinishes: _NS$7("intervalFinishes"),

  /**
   * If a proper interval T1 is intervalMeets another proper interval T2, then the end of T1 is coincident with the beginning of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalMeets: _NS$7("intervalMeets"),

  /**
   * If a proper interval T1 is intervalMetBy another proper interval T2, then the beginning of T1 is coincident with the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalMetBy: _NS$7("intervalMetBy"),

  /**
   * If a proper interval T1 is intervalOverlappedBy another proper interval T2, then the beginning of T1 is after the beginning of T2, the beginning of T1 is before the end of T2, and the end of T1 is after the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalOverlappedBy: _NS$7("intervalOverlappedBy"),

  /**
   * If a proper interval T1 is intervalOverlaps another proper interval T2, then the beginning of T1 is before the beginning of T2, the end of T1 is after the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalOverlaps: _NS$7("intervalOverlaps"),

  /**
   * If a proper interval T1 is intervalStarted another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is after the end of T2.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [0] labels, but [1] comment in the language [es].
   */
  intervalStartedBy: _NS$7("intervalStartedBy"),

  /**
   * If a proper interval T1 is intervalStarts another proper interval T2, then the beginning of T1 is coincident with the beginning of T2, and the end of T1 is before the end of T2.
   *
   * This term has [1] label and comment, in the language [es].
   */
  intervalStarts: _NS$7("intervalStarts"),

  /**
   * Value of DateTimeInterval expressed as a compact value.
   *
   * This term has [1] label and comment, in the language [es].
   */
  xsdDateTime: _NS$7("xsdDateTime")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.TIME = TIME;
var rdfFactory$6 = new rdfDataFactory.DataFactory();

function _NS$6(localName) {
  return rdfFactory$6.namedNode("http://www.w3.org/ns/odrl/2/" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * The ODRL Vocabulary and Expression defines a set of concepts and terms (the vocabulary) and encoding mechanism (the expression) for permissions and obligations statements describing digital content usage based on the ODRL Information Model.
 */


var ODRL = {
  PREFIX: "odrl",
  NAMESPACE: "http://www.w3.org/ns/odrl/2/",
  PREFIX_AND_NAMESPACE: {
    "odrl": "http://www.w3.org/ns/odrl/2/"
  },
  NS: _NS$6,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A non-empty group of Permissions and/or Prohibitions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Policy: _NS$6("Policy"),

  /**
   * An unambiguous identifier
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  uid: _NS$6("uid"),

  /**
   * The identifier(s) of an ODRL Profile that the Policy conforms to.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  profile: _NS$6("profile"),

  /**
   * Relates a (child) policy to another (parent) policy from which terms are inherited.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritFrom: _NS$6("inheritFrom"),

  /**
   * An abstract concept that represents the common characteristics of Permissions, Prohibitions, and Duties.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Rule: _NS$6("Rule"),

  /**
   * Relation is an abstract property which creates an explicit link between an Action and an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relation: _NS$6("relation"),

  /**
   * Function is an abstract property whose sub-properties define the functional roles which may be fulfilled by a party in relation to a Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  function: _NS$6("function"),

  /**
   * Failure is an abstract property that defines the violation (or unmet) relationship between Rules.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  failure: _NS$6("failure"),

  /**
   * Used to establish strategies to resolve conflicts that arise from the merging of Policies or conflicts between Permissions and Prohibitions in the same Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ConflictTerm: _NS$6("ConflictTerm"),

  /**
   * The conflict-resolution strategy for a Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  conflict: _NS$6("conflict"),

  /**
   * Permissions take preference over prohibitions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  perm: _NS$6("perm"),

  /**
   * Prohibitions take preference over permissions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  prohibit: _NS$6("prohibit"),

  /**
   * The policy is void.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  invalid: _NS$6("invalid"),

  /**
   * A Policy that grants the assignee a Rule over an Asset from an assigner.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Agreement: _NS$6("Agreement"),

  /**
   * A Policy that proposes a Rule over an Asset from an assigner.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Offer: _NS$6("Offer"),

  /**
   * A Policy that expresses a Rule over an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Set: _NS$6("Set"),

  /**
   * A Policy that asserts a Rule over an Asset from parties.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Assertion: _NS$6("Assertion"),

  /**
   * A Policy that expresses a Rule over an Asset containing personal information.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Privacy: _NS$6("Privacy"),

  /**
   * A Policy that proposes a Rule over an Asset from an assignee.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Request: _NS$6("Request"),

  /**
   * A Policy that grants the holder a Rule over an Asset from an assigner.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Ticket: _NS$6("Ticket"),

  /**
   * A resource or a collection of resources that are the subject of a Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Asset: _NS$6("Asset"),

  /**
   * An Asset that is collection of individual resources
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AssetCollection: _NS$6("AssetCollection"),

  /**
   * The target property indicates the Asset that is the primary subject to which the Rule action directly applies.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  target: _NS$6("target"),

  /**
   * Identifies an ODRL Policy for which the identified Asset is the target Asset to all the Rules.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  hasPolicy: _NS$6("hasPolicy"),

  /**
   * The output property specifies the Asset which is created from the output of the Action.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  output: _NS$6("output"),

  /**
   * An entity or a collection of entities that undertake Roles in a Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Party: _NS$6("Party"),

  /**
   * A Party that is a group of individual entities
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  PartyCollection: _NS$6("PartyCollection"),

  /**
   * The Party is the recipient of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assignee: _NS$6("assignee"),

  /**
   * The Party is the issuer of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assigner: _NS$6("assigner"),

  /**
   * Identifies an ODRL Policy for which the identified Party undertakes the assignee functional role.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assigneeOf: _NS$6("assigneeOf"),

  /**
   * Identifies an ODRL Policy for which the identified Party undertakes the assigner functional role.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  assignerOf: _NS$6("assignerOf"),

  /**
   * The Party to be attributed.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attributedParty: _NS$6("attributedParty"),

  /**
   * The Party who undertakes the attribution.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attributingParty: _NS$6("attributingParty"),

  /**
   * The Party is the recipient of the compensation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensatedParty: _NS$6("compensatedParty"),

  /**
   * The Party that is the provider of the compensation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensatingParty: _NS$6("compensatingParty"),

  /**
   * The Party to obtain consent from.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consentingParty: _NS$6("consentingParty"),

  /**
   * The Party who obtains the consent.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consentedParty: _NS$6("consentedParty"),

  /**
   * The Party who is offering the contract.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  contractingParty: _NS$6("contractingParty"),

  /**
   * The Party who is being contracted.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  contractedParty: _NS$6("contractedParty"),

  /**
   * The Party to be informed of all uses.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  informedParty: _NS$6("informedParty"),

  /**
   * The Party who provides the inform use data.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  informingParty: _NS$6("informingParty"),

  /**
   * The Party who is tracking usage.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  trackingParty: _NS$6("trackingParty"),

  /**
   * The Party whose usage is being tracked.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  trackedParty: _NS$6("trackedParty"),

  /**
   * Identifies an Asset/PartyCollection that the Asset/Party is a member of.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  partOf: _NS$6("partOf"),

  /**
   * Reference to a Asset/PartyCollection
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  source: _NS$6("source"),

  /**
   * An operation on an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Action: _NS$6("Action"),

  /**
   * The operation relating to the Asset for which the Rule is being subjected.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  action: _NS$6("action"),

  /**
   * An Action transitively asserts that another Action that encompasses its operational semantics.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  includedIn: _NS$6("includedIn"),

  /**
   * An Action asserts that another Action is not prohibited to enable its operational semantics.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  implies: _NS$6("implies"),

  /**
   * The ability to perform an Action over an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Permission: _NS$6("Permission"),

  /**
   * Relates an individual Permission to a Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  permission: _NS$6("permission"),

  /**
   * The inability to perform an Action over an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Prohibition: _NS$6("Prohibition"),

  /**
   * Relates an individual Prohibition to a Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  prohibition: _NS$6("prohibition"),

  /**
   * To use the Asset
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  use: _NS$6("use"),

  /**
   * To transfer the ownership of the Asset in perpetuity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  transfer: _NS$6("transfer"),

  /**
   * To accept that the use of the Asset may be tracked.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  acceptTracking: _NS$6("acceptTracking"),

  /**
   * To use the Asset or parts of it as part of a composite collection.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  aggregate: _NS$6("aggregate"),

  /**
   * To add explanatory notations/commentaries to the Asset without modifying the Asset in any other way.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  annotate: _NS$6("annotate"),

  /**
   * To anonymize all or parts of the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  anonymize: _NS$6("anonymize"),

  /**
   * To store the Asset (in a non-transient form).
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  archive: _NS$6("archive"),

  /**
   * To attribute the use of the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attribute: _NS$6("attribute"),

  /**
   * To compensate by transfer of some amount of value, if defined, for using or selling the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  compensate: _NS$6("compensate"),

  /**
   * To create multiple copies of the Asset that are being concurrently used.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  concurrentUse: _NS$6("concurrentUse"),

  /**
   * To permanently remove all copies of the Asset after it has been used.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  delete: _NS$6("delete"),

  /**
   * To create a new derivative Asset from this Asset and to edit or modify the derivative.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  derive: _NS$6("derive"),

  /**
   * To produce a digital copy of (or otherwise digitize) the Asset from its analogue form.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  digitize: _NS$6("digitize"),

  /**
   * To create a static and transient rendition of an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  display: _NS$6("display"),

  /**
   * To supply the Asset to third-parties.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  distribute: _NS$6("distribute"),

  /**
   * To ensure that the Rule on the Asset is exclusive.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ensureExclusivity: _NS$6("ensureExclusivity"),

  /**
   * To run the computer program Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  execute: _NS$6("execute"),

  /**
   * To extract parts of the Asset and to use it as a new Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extract: _NS$6("extract"),

  /**
   * To transfer the ownership of the Asset to a third party without compensation and while deleting the original asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  give: _NS$6("give"),

  /**
   * To grant the use of the Asset to third parties.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  grantUse: _NS$6("grantUse"),

  /**
   * To include other related assets in the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  include: _NS$6("include"),

  /**
   * To record the Asset in an index.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  index: _NS$6("index"),

  /**
   * To inform that an action has been performed on or in relation to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inform: _NS$6("inform"),

  /**
   * To load the computer program Asset onto a storage device which allows operating or running the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  install: _NS$6("install"),

  /**
   * To change existing content of the Asset. A new asset is not created by this action.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  modify: _NS$6("modify"),

  /**
   * To move the Asset from one digital location to another including deleting the original copy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  move: _NS$6("move"),

  /**
   * To grant the specified Policy to a third party for their use of the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  nextPolicy: _NS$6("nextPolicy"),

  /**
   * To obtain verifiable consent to perform the requested action in relation to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  obtainConsent: _NS$6("obtainConsent"),

  /**
   * To create a sequential and transient rendition of an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  play: _NS$6("play"),

  /**
   * To publicly perform the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  present: _NS$6("present"),

  /**
   * To create a tangible and permanent rendition of an Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  print: _NS$6("print"),

  /**
   * To obtain data from the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  read: _NS$6("read"),

  /**
   * To make duplicate copies the Asset in any material form.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  reproduce: _NS$6("reproduce"),

  /**
   * To review the Policy applicable to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  reviewPolicy: _NS$6("reviewPolicy"),

  /**
   * To transfer the ownership of the Asset to a third party with compensation and while deleting the original asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  sell: _NS$6("sell"),

  /**
   * To deliver the Asset in real-time.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  stream: _NS$6("stream"),

  /**
   * To use the Asset in timed relations with media (audio/visual) elements of another Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  synchronize: _NS$6("synchronize"),

  /**
   * To have a text Asset read out loud.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  textToSpeech: _NS$6("textToSpeech"),

  /**
   * To convert the Asset into a different format.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  transform: _NS$6("transform"),

  /**
   * To translate the original natural language of an Asset into another natural language.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  translate: _NS$6("translate"),

  /**
   * To unload and delete the computer program Asset from a storage device and disable its readiness for operation.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  uninstall: _NS$6("uninstall"),

  /**
   * To apply a watermark to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  watermark: _NS$6("watermark"),

  /**
   * The obligation to perform an Action
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Duty: _NS$6("Duty"),

  /**
   * Relates an individual Duty to a Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  obligation: _NS$6("obligation"),

  /**
   * Relates an individual Duty to a Permission.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  duty: _NS$6("duty"),

  /**
   * Relates a Duty to another Duty, the latter being a consequence of not fulfilling the former.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  consequence: _NS$6("consequence"),

  /**
   * Relates an individual remedy Duty to a Prohibition.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  remedy: _NS$6("remedy"),

  /**
   * A boolean expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Constraint: _NS$6("Constraint"),

  /**
   * Constraint applied to a Rule
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  constraint: _NS$6("constraint"),

  /**
   * Constraint used to refine the semantics of an Action, or Party/Asset Collection
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  refinement: _NS$6("refinement"),

  /**
   * Operator for constraint expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Operator: _NS$6("Operator"),

  /**
   * The operator function applied to operands of a Constraint
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  operator: _NS$6("operator"),

  /**
   * Right operand for constraint expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  RightOperand: _NS$6("RightOperand"),

  /**
   * The value of the right operand in a constraint expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  rightOperand: _NS$6("rightOperand"),

  /**
   * A reference to a web resource providing the value for the right operand of a Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  rightOperandReference: _NS$6("rightOperandReference"),

  /**
   * Left operand for a constraint expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  LeftOperand: _NS$6("LeftOperand"),

  /**
   * The left operand in a constraint expression.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  leftOperand: _NS$6("leftOperand"),

  /**
   * The datatype of the value of the rightOperand or rightOperandReference of a Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  dataType: _NS$6("dataType"),

  /**
   * the value generated from the leftOperand action or a value related to the leftOperand set as the reference for the comparison.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  status: _NS$6("status"),

  /**
   * A logical expression that refines the semantics of an Action and Party/Asset Collection or declare the conditions applicable to a Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  LogicalConstraint: _NS$6("LogicalConstraint"),

  /**
   * Operand is an abstract property for a logical relationship.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  operand: _NS$6("operand"),

  /**
   * A point in space or time defined with absolute coordinates for the positioning of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absolutePosition: _NS$6("absolutePosition"),

  /**
   * The absolute spatial positions of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space for the target Asset to fit.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteSpatialPosition: _NS$6("absoluteSpatialPosition"),

  /**
   * The absolute temporal positions in a media stream the target Asset has to fit.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteTemporalPosition: _NS$6("absoluteTemporalPosition"),

  /**
   * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  absoluteSize: _NS$6("absoluteSize"),

  /**
   * Numeric count of executions of the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  count: _NS$6("count"),

  /**
   * The date (and optional time and timezone) of exercising the action of the Rule. Right operand value MUST be an xsd:date or xsd:dateTime as defined by [[xmlschema11-2]].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  dateTime: _NS$6("dateTime"),

  /**
   * A time delay period prior to exercising the action of the Rule. The point in time triggering this period MAY be defined by another temporal Constraint combined by a Logical Constraint (utilising the odrl:andSequence operand). Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  delayPeriod: _NS$6("delayPeriod"),

  /**
   * The delivery channel used for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  deliveryChannel: _NS$6("deliveryChannel"),

  /**
   * A continuous elapsed time period which may be used for exercising of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  elapsedTime: _NS$6("elapsedTime"),

  /**
   * An identified event setting a context for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  event: _NS$6("event"),

  /**
   * A transformed file format of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  fileFormat: _NS$6("fileFormat"),

  /**
   * A defined industry sector setting a context for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  industry: _NS$6("industry"),

  /**
   * A natural language used by the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  language: _NS$6("language"),

  /**
   * Category of a media asset setting a context for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  media: _NS$6("media"),

  /**
   * An accumulated amount of one to many metered time periods which were used for exercising the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  meteredTime: _NS$6("meteredTime"),

  /**
   * The amount of a financial payment. Right operand value MUST be an xsd:decimal.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  payAmount: _NS$6("payAmount"),

  /**
   * A percentage amount of the target Asset relevant for exercising the action of the Rule. Right operand value MUST be an xsd:decimal from 0 to 100.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  percentage: _NS$6("percentage"),

  /**
   * Category of product or service setting a context for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  product: _NS$6("product"),

  /**
   * A defined purpose for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  purpose: _NS$6("purpose"),

  /**
   * The party receiving the result/outcome of exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  recipient: _NS$6("recipient"),

  /**
   * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativePosition: _NS$6("relativePosition"),

  /**
   * The relative spatial positions - expressed as percentages of full values - of four corners of a rectangle on a 2D-canvas or the eight corners of a cuboid in a 3D-space of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeSpatialPosition: _NS$6("relativeSpatialPosition"),

  /**
   * A point in space or time defined with coordinates relative to full measures the positioning of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeTemporalPosition: _NS$6("relativeTemporalPosition"),

  /**
   * Measure(s) of one or two axes for 2D-objects or measure(s) of one to tree axes for 3D-objects - expressed as percentages of full values - of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  relativeSize: _NS$6("relativeSize"),

  /**
   * Resolution of the rendition of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  resolution: _NS$6("resolution"),

  /**
   * A named and identified geospatial area with defined borders which is used for exercising the action of the Rule. An IRI MUST be used to represent this value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  spatial: _NS$6("spatial"),

  /**
   * A set of coordinates setting the borders of a geospatial area used for exercising the action of the Rule. The coordinates MUST include longitude and latitude, they MAY include altitude and the geodetic datum.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  spatialCoordinates: _NS$6("spatialCoordinates"),

  /**
   * An identified computing system or computing device used for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  systemDevice: _NS$6("systemDevice"),

  /**
   * A recurring period of time before the next execution of the action of the Rule. Right operand value MUST be an xsd:duration as defined by [[xmlschema11-2]].
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  timeInterval: _NS$6("timeInterval"),

  /**
   * The unit of measure used for counting the executions of the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  unitOfCount: _NS$6("unitOfCount"),

  /**
   * The version of the target Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  version: _NS$6("version"),

  /**
   * An identified location of the IT communication space which is relevant for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  virtualLocation: _NS$6("virtualLocation"),

  /**
   * The relation is satisfied when at least one of the Constraints is satisfied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  or: _NS$6("or"),

  /**
   * The relation is satisfied when only one, and not more, of the Constaints is satisfied
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  xone: _NS$6("xone"),

  /**
   * The relation is satisfied when all of the Constraints are satisfied.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  and: _NS$6("and"),

  /**
   * The relation is satisfied when each of the Constraints are satisfied in the order specified.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  andSequence: _NS$6("andSequence"),

  /**
   * Indicating that a given value equals the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  eq: _NS$6("eq"),

  /**
   * Indicating that a given value is greater than the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  gt: _NS$6("gt"),

  /**
   * Indicating that a given value is greater than or equal to the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  gteq: _NS$6("gteq"),

  /**
   * Indicating that a given value is less than the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lt: _NS$6("lt"),

  /**
   * Indicating that a given value is less than or equal to the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lteq: _NS$6("lteq"),

  /**
   * Indicating that a given value is not equal to the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  neq: _NS$6("neq"),

  /**
   * A set-based operator indicating that a given value is an instance of the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isA: _NS$6("isA"),

  /**
   * A set-based operator indicating that a given value contains the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  hasPart: _NS$6("hasPart"),

  /**
   * A set-based operator indicating that a given value is contained by the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isPartOf: _NS$6("isPartOf"),

  /**
   * A set-based operator indicating that a given value is all of the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isAllOf: _NS$6("isAllOf"),

  /**
   * A set-based operator indicating that a given value is any of the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isAnyOf: _NS$6("isAnyOf"),

  /**
   * A set-based operator indicating that a given value is none of the right operand of the Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  isNoneOf: _NS$6("isNoneOf"),

  /**
   * Indicates the actual datetime the action of the Rule was exercised.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  policyUsage: _NS$6("policyUsage"),

  /**
   * An identified device used for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  device: _NS$6("device"),

  /**
   * An identified computing system used for exercising the action of the Rule.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  system: _NS$6("system"),

  /**
   * An value indicating the closeness or nearness.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  proximity: _NS$6("proximity"),

  /**
   * The act of adding to the end of an asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  append: _NS$6("append"),

  /**
   * The act of appending data to the Asset without modifying the Asset in any other way.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  appendTo: _NS$6("appendTo"),

  /**
   * The act of making an exact reproduction of the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  copy: _NS$6("copy"),

  /**
   * The act of transforming the asset into a new form.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  export: _NS$6("export"),

  /**
   * The act of making available the asset to a third-party for a fixed period of time with exchange of value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lease: _NS$6("lease"),

  /**
   * The act of granting the right to use the asset to a third-party.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  license: _NS$6("license"),

  /**
   * The act of making available the asset to a third-party for a fixed period of time without exchange of value.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  lend: _NS$6("lend"),

  /**
   * The act of paying a financial amount to a party for use of the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  pay: _NS$6("pay"),

  /**
   * The Party is the recipient of the payment.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  payeeParty: _NS$6("payeeParty"),

  /**
   * The act of providing a short preview of the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  preview: _NS$6("preview"),

  /**
   * The act of using the asset for a purpose other than the purpose it was intended for.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  secondaryUse: _NS$6("secondaryUse"),

  /**
   * The act of writing to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  write: _NS$6("write"),

  /**
   * The act of adding data to the Asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  writeTo: _NS$6("writeTo"),

  /**
   * The act of sharing the asset to parties in close proximity to the owner.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  adHocShare: _NS$6("adHocShare"),

  /**
   * The act of extracting (replicating) unchanged characters from the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractChar: _NS$6("extractChar"),

  /**
   * The act of extracting (replicating) unchanged pages from the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractPage: _NS$6("extractPage"),

  /**
   * The act of extracting (replicating) unchanged words from the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  extractWord: _NS$6("extractWord"),

  /**
   * The number of seconds after which timed metering use of the asset begins.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  timedCount: _NS$6("timedCount"),

  /**
   * Indentifies the type of inheritance.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritRelation: _NS$6("inheritRelation"),

  /**
   * Indicates if the Policy entity can be inherited.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  inheritAllowed: _NS$6("inheritAllowed"),

  /**
   * Is used to indicate how to support Actions that are not part of any vocabulary or profile in the policy expression system.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  UndefinedTerm: _NS$6("UndefinedTerm"),

  /**
   * Relates the strategy used for handling undefined actions to a Policy.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  undefined: _NS$6("undefined"),

  /**
   * The Action is to be ignored and is not part of the policy – and the policy remains valid.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  ignore: _NS$6("ignore"),

  /**
   * The Action is to be supported as part of the policy – and the policy remains valid.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  support: _NS$6("support"),

  /**
   * Scopes for Asset Scope expressions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AssetScope: _NS$6("AssetScope"),

  /**
   * Scopes for Party Scope expressions.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  PartyScope: _NS$6("PartyScope"),

  /**
   * The identifier of a scope that provides context to the extent of the entity.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  scope: _NS$6("scope"),

  /**
   * Specifies that the scope of the relationship is the defined group with multiple individual members.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Group: _NS$6("Group"),

  /**
   * Specifies that the scope of the relationship is the single Party individual.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  Individual: _NS$6("Individual"),

  /**
   * Specifies that the scope of the relationship is all of the collective individuals within a context.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  All: _NS$6("All"),

  /**
   * Specifies that the scope of the relationship is all of the first-level connections of the Party.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AllConnections: _NS$6("AllConnections"),

  /**
   * Specifies that the scope of the relationship is all of the second-level connections to the Party.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  All2ndConnections: _NS$6("All2ndConnections"),

  /**
   * Specifies that the scope of the relationship is all of the group connections of the Party.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  AllGroups: _NS$6("AllGroups"),

  /**
   * The act of keeping the policy notice with the asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attachPolicy: _NS$6("attachPolicy"),

  /**
   * The act of attaching the source of the asset and its derivatives.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  attachSource: _NS$6("attachSource"),

  /**
   * The act of distributing any derivative asset under the same terms as the original asset.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  shareAlike: _NS$6("shareAlike"),

  /**
   * The act of using the asset in a business environment.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  commercialize: _NS$6("commercialize"),

  /**
   * The act of the non-commercial reproduction and distribution of the asset to third-parties.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  share: _NS$6("share"),

  /**
   * Identifier for the ODRL Core Profile
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  core: _NS$6("core"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * The unit of measurement of the value of the rightOperand or rightOperandReference of a Constraint.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/odrl/2/
   */
  unit: _NS$6("unit")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.ODRL = ODRL;
var rdfFactory$5 = new rdfDataFactory.DataFactory();

function _NS$5(localName) {
  return rdfFactory$5.namedNode("https://w3id.org/security#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Security vocabulary
 */


var SEC = {
  PREFIX: "sec",
  NAMESPACE: "https://w3id.org/security#",
  PREFIX_AND_NAMESPACE: {
    "sec": "https://w3id.org/security#"
  },
  NS: _NS$5,
  // *****************
  // All the Classes.
  // *****************

  /**
   *
   */
  EcdsaSecp256k1Signature2019: _NS$5("EcdsaSecp256k1Signature2019"),

  /**
   *
   */
  EcdsaSecp256k1VerificationKey2019: _NS$5("EcdsaSecp256k1VerificationKey2019"),

  /**
   *
   */
  RsaSignature2018: _NS$5("RsaSignature2018"),

  /**
   *
   */
  RsaVerificationKey2018: _NS$5("RsaVerificationKey2018"),

  /**
   *
   */
  SchnorrSecp256k1Signature2019: _NS$5("SchnorrSecp256k1Signature2019"),

  /**
   *
   */
  SchnorrSecp256k1VerificationKey2019: _NS$5("SchnorrSecp256k1VerificationKey2019"),

  /**
   *
   */
  ServiceEndpointProxyService: _NS$5("ServiceEndpointProxyService"),

  /**
   *
   */
  Digest: _NS$5("Digest"),

  /**
   *
   */
  EncryptedMessage: _NS$5("EncryptedMessage"),

  /**
   *
   */
  Signature: _NS$5("Signature"),

  /**
   *
   */
  LinkedDataSignature2015: _NS$5("LinkedDataSignature2015"),

  /**
   *
   */
  Ed25519VerificationKey2018: _NS$5("Ed25519VerificationKey2018"),

  /**
   *
   */
  BbsBlsSignature2020: _NS$5("BbsBlsSignature2020"),

  /**
   *
   */
  BbsBlsSignatureProof2020: _NS$5("BbsBlsSignatureProof2020"),

  /**
   *
   */
  Bls12381G1Key2020: _NS$5("Bls12381G1Key2020"),

  /**
   *
   */
  Bls12381G2Key2020: _NS$5("Bls12381G2Key2020"),

  /**
   *
   */
  Key: _NS$5("Key"),
  // *******************
  // All the Properties.
  // *******************

  /**
   *
   */
  cipherAlgorithm: _NS$5("cipherAlgorithm"),

  /**
   *
   */
  cipherData: _NS$5("cipherData"),

  /**
   *
   */
  digestAlgorithm: _NS$5("digestAlgorithm"),

  /**
   *
   */
  digestValue: _NS$5("digestValue"),

  /**
   *
   */
  cipherKey: _NS$5("cipherKey"),

  /**
   *
   */
  blockchainAccountId: _NS$5("blockchainAccountId"),

  /**
   *
   */
  ethereumAddress: _NS$5("ethereumAddress"),

  /**
   *
   */
  expires: _NS$5("expires"),

  /**
   *
   */
  initializationVector: _NS$5("initializationVector"),

  /**
   *
   */
  nonce: _NS$5("nonce"),

  /**
   *
   */
  canonicalizationAlgorithm: _NS$5("canonicalizationAlgorithm"),

  /**
   *
   */
  owner: _NS$5("owner"),

  /**
   *
   */
  password: _NS$5("password"),

  /**
   *
   */
  privateKeyPem: _NS$5("privateKeyPem"),

  /**
   *
   */
  verificationMethod: _NS$5("verificationMethod"),

  /**
   *
   */
  publicKey: _NS$5("publicKey"),

  /**
   *
   */
  assertionMethod: _NS$5("assertionMethod"),

  /**
   *
   */
  authentication: _NS$5("authentication"),

  /**
   *
   */
  capabilityDelegation: _NS$5("capabilityDelegation"),

  /**
   *
   */
  capabilityInvocation: _NS$5("capabilityInvocation"),

  /**
   *
   */
  keyAgreement: _NS$5("keyAgreement"),

  /**
   *
   */
  publicKeyBase58: _NS$5("publicKeyBase58"),

  /**
   *
   */
  publicKeyJwk: _NS$5("publicKeyJwk"),

  /**
   *
   */
  publicKeyPem: _NS$5("publicKeyPem"),

  /**
   *
   */
  publicKeyHex: _NS$5("publicKeyHex"),

  /**
   *
   */
  publicKeyService: _NS$5("publicKeyService"),

  /**
   *
   */
  revoked: _NS$5("revoked"),

  /**
   *
   */
  proof: _NS$5("proof"),

  /**
   *
   */
  jws: _NS$5("jws"),

  /**
   *
   */
  proofPurpose: _NS$5("proofPurpose"),

  /**
   *
   */
  challenge: _NS$5("challenge"),

  /**
   *
   */
  domain: _NS$5("domain"),

  /**
   *
   */
  expiration: _NS$5("expiration"),

  /**
   *
   */
  proofValue: _NS$5("proofValue"),

  /**
   *
   */
  signature: _NS$5("signature"),

  /**
   *
   */
  signatureValue: _NS$5("signatureValue"),

  /**
   *
   */
  signatureAlgorithm: _NS$5("signatureAlgorithm"),

  /**
   *
   */
  service: _NS$5("service"),

  /**
   *
   */
  serviceEndpoint: _NS$5("serviceEndpoint"),

  /**
   *
   */
  allowedAction: _NS$5("allowedAction"),

  /**
   *
   */
  capability: _NS$5("capability"),

  /**
   *
   */
  capabilityAction: _NS$5("capabilityAction"),

  /**
   *
   */
  capabilityChain: _NS$5("capabilityChain"),

  /**
   *
   */
  caveat: _NS$5("caveat"),

  /**
   *
   */
  delegator: _NS$5("delegator"),

  /**
   *
   */
  invocationTarget: _NS$5("invocationTarget"),

  /**
   *
   */
  invoker: _NS$5("invoker")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.SEC = SEC;
var rdfFactory$4 = new rdfDataFactory.DataFactory();

function _NS$4(localName) {
  return rdfFactory$4.namedNode("http://www.w3.org/ns/json-ld#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This is a vocabulary document and is used to achieve certain features of the JSON-LD language.
 */


var JSONLD = {
  PREFIX: "jsonld",
  NAMESPACE: "http://www.w3.org/ns/json-ld#",
  PREFIX_AND_NAMESPACE: {
    "jsonld": "http://www.w3.org/ns/json-ld#"
  },
  NS: _NS$4,
  // *****************
  // All the Classes.
  // *****************

  /**
   * Defines term definitions and other aspects of a JSON-LD `Context`.
   A [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) MUST be a map whose keys MUST be either _terms_, _compact IRIs_, _IRIs_, or one of the keywords `@base`, `@import`, `@language`, `@propagate`, `@protected`, `@type`, `@version`, or `@vocab`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  Context: _NS$4("Context"),

  /**
   * A string ([simple term definition](http://www.w3.org/TR/json-ld11/#dfn-simple-term-definitions)), expanding to an IRI.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  PrefixDefinition: _NS$4("PrefixDefinition"),

  /**
   * A [term definition](http://www.w3.org/TR/json-ld11/#dfn-term-definitions) is an entry in a [context](#Context), where the key defines a term which may be used within a dictionary as a key, type, or elsewhere that a string is interpreted as a vocabulary item. Its value is an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   
   An [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definition) MUST be a map composed of zero or more keys from `@id`, `@reverse`, `@type`, `@language`, `@container`, `@context`, `@prefix`, `@propagate`, or `@protected`. An expanded term definition SHOULD NOT contain any other keys.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  TermDefinition: _NS$4("TermDefinition"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@base` key, its value MUST be an _IRI reference_, or `null`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  base: _NS$4("base"),

  /**
   * This profile IRI is used to request or specify compacted JSON-LD document form.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  compacted: _NS$4("compacted"),

  /**
   * The associated `@container` value in an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@container` keyword, its value MUST be either `@list`, `@set`, `@language`, `@index`, `@id`, `@graph`, `@type`, or be `null` or an array containing exactly any one of those keywords, or a combination of `@set` and any of `@index`, `@id`, `@graph`, `@type`, `@language` in any order.
   `@container` may also be an array containing `@graph` along with either `@id` or `@index` and also optionally including `@set`.
   If the value is `@language`, when the term is used outside of the `@context`, the associated value MUST be a language map.
   If the value is `@index`, when the term is used outside of the `@context`, the associated value MUST be an index map.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  container: _NS$4("container"),

  /**
   * As an IRI, this link relation is used to associate a JSON-LD context with a JSON document so that it can be interpreted as JSON-LD. In an HTTP request header, specifies the location of a context to use for compaction. As a Context, defines an inline `context definition`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#interpreting-json-as-json-ld
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  context: _NS$4("context"),

  /**
   * Term definition(s) associated with this context.
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  definition: _NS$4("definition"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) has an `@direction` key, its value MUST be one of `"ltr"` or `"rtl"`, or be `null`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  direction: _NS$4("direction"),

  /**
   * This profile URI is used to request or specify expanded JSON-LD document form.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  expanded: _NS$4("expanded"),

  /**
   * This profile URI is used to request or specify flattened JSON-LD document form.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  flattened: _NS$4("flattened"),

  /**
   * As an IRI, this link relation is used to associate a JSON-LD frame with a JSON-LD document. In an HTTP request header, specifies the location of a frame to use for framing.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  frame: _NS$4("frame"),

  /**
   * This profile URI is used to request or specify framed JSON-LD document form.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#iana-considerations
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  framed: _NS$4("framed"),

  /**
   * The `@id` mapping of a [term definition](#TermDefinition).
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  id: _NS$4("id"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@import` keyword, its value MUST be an _IRI reference_. When used as a reference from an `@import`, the referenced context definition MUST NOT include an `@import` key, itself.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  import: _NS$4("import"),

  /**
   * The [default language](https://www.w3.org/TR/json-ld11/#dfn-default-language) is set in the context using the `@language` key whose value MUST be a string representing a [BCP47](https://tools.ietf.org/html/bcp47) language code or null.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-default-language
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  language: _NS$4("language"),

  /**
   * If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@nest` keyword, its value MUST be either `@nest`, or a _term_ which expands to `@nest`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  nest: _NS$4("nest"),

  /**
   * With the value `true`, allows this term to be used to construct a compact IRI when compacting.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  prefix: _NS$4("prefix"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@propagate` keyword, its value MUST be `true` or `false`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  propagate: _NS$4("propagate"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@protected` keyword, its value MUST be `true` or `false`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  protected: _NS$4("protected"),

  /**
   * The `@reverse` mapping of an [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions).
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#expanded-term-definition
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  reverse: _NS$4("reverse"),

  /**
   * This profile URI is used to request or specify streaming JSON-LD document form.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11-streaming/#streaming-profile
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  streaming: _NS$4("streaming"),

  /**
   * The term associated with a [term definition](#TermDefinition).
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-term
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  term: _NS$4("term"),

  /**
   * If the [context definition](https://www.w3.org/TR/json-ld11/#dfn-context-definition) contains the `@type` keyword, its value MUST be a map with only the entry `@container` set to `@set`, and optionally an entry `@protected`.
   
   If the [expanded term definition](https://www.w3.org/TR/json-ld11/#dfn-expanded-term-definitions) contains the `@type` keyword, its value MUST be an _IRI reference_, a _term_, `null`, or one of the keywords `@id`, `@json`, `@none`, or `@vocab`.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#context-definitions
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  type: _NS$4("type"),

  /**
   * The [processing mode](https://www.w3.org/TR/json-ld11/#dfn-processing-mode) defines how a JSON-LD document is processed. By default, all documents are assumed to be conformant with [JSON-LD 1.1`](http://www.w3.org/TR/json-ld11). By defining a different version via explicit API option, other processing modes can be accessed. This specification defines extensions for the `json-ld-1.1` processing mode.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#dfn-processing-mode
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  version: _NS$4("version"),

  /**
   * Used to expand properties and values in `@type` with a common prefix IRI.
   *
   * See also:
   *  - https://www.w3.org/TR/json-ld11/#default-vocabulary
   *
   * Defined by the vocabulary: http://www.w3.org/ns/json-ld#
   */
  vocab: _NS$4("vocab")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.JSONLD = JSONLD;
var rdfFactory$3 = new rdfDataFactory.DataFactory();

function _NS$3(localName) {
  return rdfFactory$3.namedNode("http://www.w3.org/ns/earl#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Evaluation and Report Language (EARL)
 */


var EARL = {
  PREFIX: "earl",
  NAMESPACE: "http://www.w3.org/ns/earl#",
  PREFIX_AND_NAMESPACE: {
    "earl": "http://www.w3.org/ns/earl#"
  },
  NS: _NS$3,
  // *****************
  // All the Classes.
  // *****************

  /**
   * a statement that embodies the results of a test
   */
  Assertion: _NS$3("Assertion"),

  /**
   * an entity such as a person, a software tool, an organization, or any other grouping that carries out a test collectively
   */
  Assertor: _NS$3("Assertor"),

  /**
   * the class of things that have been tested against some test criterion
   */
  TestSubject: _NS$3("TestSubject"),

  /**
   * a testable statement, usually one that can be passed or failed
   */
  TestCriterion: _NS$3("TestCriterion"),

  /**
   * a higher-level requirement that is tested by executing one or more sub-tests
   */
  TestRequirement: _NS$3("TestRequirement"),

  /**
   * an atomic test, usually one that is a partial test for a requirement
   */
  TestCase: _NS$3("TestCase"),

  /**
   * the actual result of performing the test
   */
  TestResult: _NS$3("TestResult"),

  /**
   * describes how a test was carried out
   */
  TestMode: _NS$3("TestMode"),

  /**
   * a discrete value that describes a resulting condition from carrying out the test
   */
  OutcomeValue: _NS$3("OutcomeValue"),

  /**
   * the class of outcomes to denote passing a test
   */
  Pass: _NS$3("Pass"),

  /**
   * the class of outcomes to denote failing a test
   */
  Fail: _NS$3("Fail"),

  /**
   * the class of outcomes to denote an undetermined outcome
   */
  CannotTell: _NS$3("CannotTell"),

  /**
   * the class of outcomes to denote the test is not applicable
   */
  NotApplicable: _NS$3("NotApplicable"),

  /**
   * the class of outcomes to denote the test has not been carried out
   */
  NotTested: _NS$3("NotTested"),

  /**
   * any piece of software such as an authoring tool, browser, or evaluation tool
   */
  Software: _NS$3("Software"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * assertor of an assertion
   */
  assertedBy: _NS$3("assertedBy"),

  /**
   * test subject of an assertion
   */
  subject: _NS$3("subject"),

  /**
   * test criterion of an assertion
   */
  test: _NS$3("test"),

  /**
   * result of an assertion
   */
  result: _NS$3("result"),

  /**
   * mode in which the test was performed
   */
  mode: _NS$3("mode"),

  /**
   * assertor that is primarily responsible for performing the test
   */
  mainAssertor: _NS$3("mainAssertor"),

  /**
   * outcome of performing the test
   */
  outcome: _NS$3("outcome"),

  /**
   * location within a test subject that are most relevant to a test result
   */
  pointer: _NS$3("pointer"),

  /**
   * additional warnings or error messages in a human-readable form
   */
  info: _NS$3("info")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.EARL = EARL;
var rdfFactory$2 = new rdfDataFactory.DataFactory();

function _NS$2(localName) {
  return rdfFactory$2.namedNode("http://www.w3.org/2003/06/sw-vocab-status/ns#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * This vocabulary was created in the FOAF project, based on experience with FOAF, Dublin Core and other early RDF vocabularies. Deployment experience shows that changing namespace URIs is expensive and unrewarding, so this vocabulary provides terms to support in-place evolution of structured data vocabularies. By indicating status at the level of terms rather than vocabularies, dictionary-style, fine grained improvements become easier. Different organizations and parties can agree or disagree on the status of a vocabulary term; however the status published alongside the term may deserve special attention. Future work could include patterns for citing announcements and decisions, or using SKOS to decentralise the extension of the basic status levels.
 */


var VS = {
  PREFIX: "vs",
  NAMESPACE: "http://www.w3.org/2003/06/sw-vocab-status/ns#",
  PREFIX_AND_NAMESPACE: {
    "vs": "http://www.w3.org/2003/06/sw-vocab-status/ns#"
  },
  NS: _NS$2,
  // *******************
  // All the Properties.
  // *******************

  /**
   * the status of a vocabulary term, expressed as a short symbolic string; known values include 'unstable','testing', 'stable' and 'archaic'
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  term_status: _NS$2("term_status"),

  /**
   * more information about the status etc of a term, typically human oriented
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  moreinfo: _NS$2("moreinfo"),

  /**
   * human-oriented documentation, examples etc for use of this term
   *
   * Defined by the vocabulary: http://www.w3.org/2003/06/sw-vocab-status/ns#
   */
  userdocs: _NS$2("userdocs")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.VS = VS;
var rdfFactory$1 = new rdfDataFactory.DataFactory();

function _NS$1(localName) {
  return rdfFactory$1.namedNode("http://usefulinc.com/ns/doap#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * [Generator provided] - Description of a Project (DOAP) vocabulary
 */


var DOAP = {
  PREFIX: "doap",
  NAMESPACE: "http://usefulinc.com/ns/doap#",
  PREFIX_AND_NAMESPACE: {
    "doap": "http://usefulinc.com/ns/doap#"
  },
  NS: _NS$1,
  // *****************
  // All the Classes.
  // *****************

  /**
   * A project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Project: _NS$1("Project"),

  /**
   * Version information of a project release.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Version: _NS$1("Version"),

  /**
   * A specification of a system's aspects, technical or otherwise.
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Specification: _NS$1("Specification"),

  /**
   * Source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  Repository: _NS$1("Repository"),

  /**
   * Subversion source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  SVNRepository: _NS$1("SVNRepository"),

  /**
   * Git source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  GitRepository: _NS$1("GitRepository"),

  /**
   * BitKeeper source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  BKRepository: _NS$1("BKRepository"),

  /**
   * CVS source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  CVSRepository: _NS$1("CVSRepository"),

  /**
   * GNU Arch source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  ArchRepository: _NS$1("ArchRepository"),

  /**
   * Bazaar source code branch.
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  BazaarBranch: _NS$1("BazaarBranch"),

  /**
   * Git source code branch.
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  GitBranch: _NS$1("GitBranch"),

  /**
   * Mercurial source code repository.
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  HgRepository: _NS$1("HgRepository"),

  /**
   * darcs source code repository.
   *
   * This term has [3] labels and comments, in the languages [es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  DarcsRepository: _NS$1("DarcsRepository"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * A name of something.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  name: _NS$1("name"),

  /**
   * URL of a project's homepage,
        associated with exactly one project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  homepage: _NS$1("homepage"),

  /**
   * URL of a project's past homepage,
        associated with exactly one project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  old_homepage: _NS$1("old-homepage"),

  /**
   * Date when something was created, in YYYY-MM-DD form. e.g. 2004-04-05
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  created: _NS$1("created"),

  /**
   * Short (8 or 9 words) plain text description of a project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  shortdesc: _NS$1("shortdesc"),

  /**
   * Plain text description of a project, of 2-4 sentences in length.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  description: _NS$1("description"),

  /**
   * A project release.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  release: _NS$1("release"),

  /**
   * Mailing list home page or email address.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  mailing_list: _NS$1("mailing-list"),

  /**
   * A forum or community that supports this project.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  support_forum: _NS$1("support-forum"),

  /**
   * A forum or community for developers of this project.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  developer_forum: _NS$1("developer-forum"),

  /**
   * A category of project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  category: _NS$1("category"),

  /**
   * The URI of an RDF description of the license the software is distributed under. E.g. a SPDX reference
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  license: _NS$1("license"),

  /**
   * Source code repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  repository: _NS$1("repository"),

  /**
   * The project that uses a repository.
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  repositoryOf: _NS$1("repositoryOf"),

  /**
   * Repository for anonymous access.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  anon_root: _NS$1("anon-root"),

  /**
   * Web browser interface to repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  browse: _NS$1("browse"),

  /**
   * Module name of a Subversion, CVS, BitKeeper or Arch repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  module: _NS$1("module"),

  /**
   * Location of a repository.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  location: _NS$1("location"),

  /**
   * Web page from which the project software can be downloaded.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  download_page: _NS$1("download-page"),

  /**
   * Mirror of software download web page.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  download_mirror: _NS$1("download-mirror"),

  /**
   * Revision identifier of a software release.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  revision: _NS$1("revision"),

  /**
   * URI of download associated with this release.
   *
   * This term has [2] labels and comments, in the languages [cs, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  file_release: _NS$1("file-release"),

  /**
   * URL of Wiki for collaborative discussion of project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  wiki: _NS$1("wiki"),

  /**
   * Bug tracker for a project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  bug_database: _NS$1("bug-database"),

  /**
   * Web page with screenshots of project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  screenshots: _NS$1("screenshots"),

  /**
   * Maintainer of a project, a project leader.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  maintainer: _NS$1("maintainer"),

  /**
   * Developer of software for the project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  developer: _NS$1("developer"),

  /**
   * Contributor of documentation to the project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  documenter: _NS$1("documenter"),

  /**
   * Contributor of translations to the project.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  translator: _NS$1("translator"),

  /**
   * A tester or other quality control contributor.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  tester: _NS$1("tester"),

  /**
   * Project contributor.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  helper: _NS$1("helper"),

  /**
   * Programming language a project is implemented in or intended for use with.
   *
   * This term has [5] labels and comments, in the languages [cs, de, es, fr, pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  programming_language: _NS$1("programming-language"),

  /**
   * Operating system that a project is limited to.  Omit this property if the project is not OS-specific.
   *
   * This term provides non-English descriptions, but a mismatch between labels and comments, with [5] labels in languages [cs, de, es, fr, pt], but [4] comments in languages [cs, de, es, fr].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  os: _NS$1("os"),

  /**
   * A specification that a project implements. Could be a standard, API or legally defined level of conformance.
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  implements: _NS$1("implements"),

  /**
   * The URI of a web service endpoint where software as a service may be accessed
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  service_endpoint: _NS$1("service-endpoint"),

  /**
   * ISO language code a project has been translated into
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  language: _NS$1("language"),

  /**
   * Vendor organization: commercial, free or otherwise
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  vendor: _NS$1("vendor"),

  /**
   * Indicator of software platform (non-OS specific), e.g. Java, Firefox, ECMA CLR
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  platform: _NS$1("platform"),

  /**
   * Description of target user base
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  audience: _NS$1("audience"),

  /**
   * URI of a blog related to a project
   *
   * This term has [1] label and comment, in the language [pt].
   *
   * Defined by the vocabulary: http://usefulinc.com/ns/doap#
   */
  blog: _NS$1("blog")
};
/**
 * MIT License
 *
 * Copyright 2020 Inrupt Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the &quot;Software&quot;), to deal in
 * the Software without restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
 * Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

exports.DOAP = DOAP;
var rdfFactory = new rdfDataFactory.DataFactory();

function _NS(localName) {
  return rdfFactory.namedNode("https://www.w3.org/2018/credentials#" + localName);
} // Add 'any' type annotation in case this vocab includes 'NamedNode' instances,
// for example instances of Constant IRIs (TypeScript compiler will complain of
// "semantic error TS2742" otherwise).

/**
 * A vocabulary for the Data Model for W3C Verifiable Credentials.
 */


var CRED = {
  PREFIX: "cred",
  NAMESPACE: "https://www.w3.org/2018/credentials#",
  PREFIX_AND_NAMESPACE: {
    "cred": "https://www.w3.org/2018/credentials#"
  },
  NS: _NS,
  // *****************
  // All the Classes.
  // *****************

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  VerifiableCredential: _NS("VerifiableCredential"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  JsonSchemaValidator2018: _NS("JsonSchemaValidator2018"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  ManualRefreshService2018: _NS("ManualRefreshService2018"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  VerifiablePresentation: _NS("VerifiablePresentation"),
  // *******************
  // All the Properties.
  // *******************

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  verifiableCredential: _NS("verifiableCredential"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialSchema: _NS("credentialSchema"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialStatus: _NS("credentialStatus"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  credentialSubject: _NS("credentialSubject"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  evidence: _NS("evidence"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  expirationDate: _NS("expirationDate"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  holder: _NS("holder"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issued: _NS("issued"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issuer: _NS("issuer"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  issuanceDate: _NS("issuanceDate"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  refreshService: _NS("refreshService"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  termsOfUse: _NS("termsOfUse"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  validFrom: _NS("validFrom"),

  /**
   * .
   *
   * Defined by the vocabulary: https://www.w3.org/2018/credentials#
   */
  validUntil: _NS("validUntil")
};
exports.CRED = CRED;
},{}],"index.js":[function(require,module,exports) {
"use strict";

var _solidClientAuthnBrowser = require("@inrupt/solid-client-authn-browser");

var _solidClient = require("@inrupt/solid-client");

var _vocabCommonRdf = require("@inrupt/vocab-common-rdf");

const SOLID_IDENTITY_PROVIDER = "https://solidcommunity.net";

async function loginAndFetch() {
  await (0, _solidClientAuthnBrowser.handleIncomingRedirect)();

  if (!(0, _solidClientAuthnBrowser.getDefaultSession)().info.isLoggedIn) {
    await (0, _solidClientAuthnBrowser.login)({
      oidcIssuer: SOLID_IDENTITY_PROVIDER,
      clientName: "Inrupt tutorial client app",
      redirectUrl: window.location.href
    });
  }

  const WEBID = (0, _solidClientAuthnBrowser.getDefaultSession)().info.webId; // const WEBID = "https://docs-example.inrupt.net/profile/card";

  const myDataset = await (0, _solidClient.getSolidDataset)(WEBID, {
    fetch: _solidClientAuthnBrowser.fetch
  });
  const profile = (0, _solidClient.getThing)(myDataset, WEBID);
  const acquaintances = (0, _solidClient.getUrlAll)(profile, _vocabCommonRdf.FOAF.knows);
  const fn = (0, _solidClient.getStringNoLocale)(profile, _vocabCommonRdf.VCARD.fn);
  const role = (0, _solidClient.getStringNoLocale)(profile, _vocabCommonRdf.VCARD.role);
  const bday = (0, _solidClient.getDatetime)(profile, _vocabCommonRdf.VCARD.bday);
  const photo = (0, _solidClient.getUrl)(profile, _vocabCommonRdf.VCARD.hasPhoto);
  document.querySelector('#user-name').innerHTML = fn;
  document.querySelector('#user-photo').src = photo;
  document.querySelector('#user-role').innerHTML = role;
  document.querySelector('#user-link').innerHTML = WEBID;
  document.querySelector('#user-name-input').value = fn;
  document.querySelector('#user-role-input').value = role;
}

async function saveUserData({
  name,
  role
}) {
  const WEBID = (0, _solidClientAuthnBrowser.getDefaultSession)().info.webId;
  const myDataset = await (0, _solidClient.getSolidDataset)(WEBID, {
    fetch: _solidClientAuthnBrowser.fetch
  });
  const profile = (0, _solidClient.getThing)(myDataset, WEBID);
  let updatedProfile = (0, _solidClient.setStringNoLocale)(profile, _vocabCommonRdf.VCARD.fn, name);
  updatedProfile = (0, _solidClient.setStringNoLocale)(updatedProfile, _vocabCommonRdf.VCARD.role, role);
  const myChangedDataset = (0, _solidClient.setThing)(myDataset, updatedProfile);
  const savedProfileResource = await (0, _solidClient.saveSolidDatasetAt)(WEBID, myChangedDataset, {
    fetch: _solidClientAuthnBrowser.fetch
  });
  console.log(savedProfileResource);
}

document.querySelector("#form-save-user").addEventListener('submit', function (e) {
  e.preventDefault();
  saveUserData({
    name: document.querySelector('#user-name-input').value,
    role: document.querySelector('#user-role-input').value
  });
});
loginAndFetch();

window.onload = function () {
  var menuItens = document.querySelectorAll('.nav-tabs > li');

  for (var i = 0; i < menuItens.length; i++) {
    menuItens[i].addEventListener("click", function (e) {
      e.preventDefault();
      var tabs = document.querySelectorAll('.tab-content > .tab-pane');

      for (var k = 0; k < tabs.length; k++) {
        tabs[k].className = "tab-pane";
      }

      for (var j = 0; j < menuItens.length; j++) {
        menuItens[j].className = "";
      }

      var linkElement = this.getElementsByTagName("A")[0];
      linkElement.className += " active";
      var linkTab = linkElement.dataset.target;
      var tab = document.querySelectorAll(linkTab)[0];
      tab.className = "tab-pane active";
    });
  }

  ;
};
},{"@inrupt/solid-client-authn-browser":"node_modules/@inrupt/solid-client-authn-browser/dist/index.js","@inrupt/solid-client":"node_modules/@inrupt/solid-client/dist/index.es.js","@inrupt/vocab-common-rdf":"node_modules/@inrupt/vocab-common-rdf/dist/index.es.js"}],"node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "56420" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}],"node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js":[function(require,module,exports) {
module.exports = function loadJSBundle(bundle) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.async = true;
    script.type = 'text/javascript';
    script.charset = 'utf-8';
    script.src = bundle;

    script.onerror = function (e) {
      script.onerror = script.onload = null;
      reject(e);
    };

    script.onload = function () {
      script.onerror = script.onload = null;
      resolve();
    };

    document.getElementsByTagName('head')[0].appendChild(script);
  });
};
},{}],0:[function(require,module,exports) {
var b=require("node_modules/parcel-bundler/src/builtins/bundle-loader.js");b.register("js",require("node_modules/parcel-bundler/src/builtins/loaders/browser/js-loader.js"));
},{}]},{},["node_modules/parcel-bundler/src/builtins/hmr-runtime.js",0,"index.js"], null)
//# sourceMappingURL=/pod-profile.e31bb0bc.js.map