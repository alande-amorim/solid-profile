{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","dependencies":[{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js.map","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/OidcLoginHandler.ts","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/package.json","includedInParent":true,"mtime":1612221001734},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1611945169054},{"name":"tsyringe","loc":{"line":15,"column":27},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/tsyringe/dist/esm5/index.js"},{"name":"@inrupt/solid-client-authn-core","loc":{"line":16,"column":42},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/OidcLoginHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-core/dist/index.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsyringe_1 = require(\"tsyringe\");\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nfunction hasIssuer(options) {\n    return typeof options.oidcIssuer === \"string\";\n}\nfunction hasRedirectUrl(options) {\n    return typeof options.redirectUrl === \"string\";\n}\nlet OidcLoginHandler = class OidcLoginHandler {\n    constructor(storageUtility, oidcHandler, issuerConfigFetcher, clientRegistrar) {\n        this.storageUtility = storageUtility;\n        this.oidcHandler = oidcHandler;\n        this.issuerConfigFetcher = issuerConfigFetcher;\n        this.clientRegistrar = clientRegistrar;\n    }\n    async canHandle(options) {\n        return hasIssuer(options) && hasRedirectUrl(options);\n    }\n    async handle(options) {\n        if (!hasIssuer(options)) {\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(options)}`);\n        }\n        if (!hasRedirectUrl(options)) {\n            throw new solid_client_authn_core_1.ConfigurationError(`OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(options)}`);\n        }\n        const issuerConfig = await this.issuerConfigFetcher.fetchConfig(options.oidcIssuer);\n        let dynamicClientRegistration;\n        if (options.clientId) {\n            dynamicClientRegistration = {\n                clientId: options.clientId,\n                clientSecret: options.clientSecret,\n                clientName: options.clientName,\n            };\n        }\n        else {\n            const clientId = await this.storageUtility.getForUser(\"clientApplicationRegistrationInfo\", \"clientId\");\n            if (clientId) {\n                dynamicClientRegistration = {\n                    clientId,\n                    clientSecret: await this.storageUtility.getForUser(\"clientApplicationRegistrationInfo\", \"clientSecret\"),\n                    clientName: options.clientName,\n                };\n            }\n            else {\n                dynamicClientRegistration = await this.clientRegistrar.getClient({\n                    sessionId: options.sessionId,\n                    clientName: options.clientName,\n                    redirectUrl: options.redirectUrl,\n                }, issuerConfig);\n                await this.storageUtility.setForUser(\"clientApplicationRegistrationInfo\", {\n                    clientId: dynamicClientRegistration.clientId,\n                    clientSecret: dynamicClientRegistration.clientSecret,\n                });\n            }\n        }\n        const OidcOptions = {\n            issuer: options.oidcIssuer,\n            dpop: options.tokenType.toLowerCase() === \"dpop\",\n            redirectUrl: options.redirectUrl,\n            issuerConfiguration: issuerConfig,\n            client: dynamicClientRegistration,\n            sessionId: options.sessionId,\n            handleRedirect: options.handleRedirect,\n        };\n        return this.oidcHandler.handle(OidcOptions);\n    }\n};\nOidcLoginHandler = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"storageUtility\")),\n    __param(1, tsyringe_1.inject(\"oidcHandler\")),\n    __param(2, tsyringe_1.inject(\"issuerConfigFetcher\")),\n    __param(3, tsyringe_1.inject(\"clientRegistrar\")),\n    __metadata(\"design:paramtypes\", [Object, Object, Object, Object])\n], OidcLoginHandler);\nexports.default = OidcLoginHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"OidcLoginHandler.js","sourceRoot":"","sources":["../../../src/login/oidc/OidcLoginHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handles Common Oidc login functions (Like fetching the configuration)\n */\n\nimport { injectable, inject } from \"tsyringe\";\nimport {\n  IClientRegistrar,\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  ILoginOptions,\n  ILoginHandler,\n  IOidcHandler,\n  IOidcOptions,\n  IStorageUtility,\n  ConfigurationError,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\n\nimport { IClient } from \"@inrupt/oidc-client-ext\";\n\nfunction hasIssuer(\n  options: ILoginOptions\n): options is ILoginOptions & { oidcIssuer: string } {\n  return typeof options.oidcIssuer === \"string\";\n}\n\nfunction hasRedirectUrl(\n  options: ILoginOptions\n): options is ILoginOptions & { redirectUrl: string } {\n  return typeof options.redirectUrl === \"string\";\n}\n\n/**\n * @hidden\n */\n@injectable()\nexport default class OidcLoginHandler implements ILoginHandler {\n  constructor(\n    @inject(\"storageUtility\") private storageUtility: IStorageUtility,\n    @inject(\"oidcHandler\") private oidcHandler: IOidcHandler,\n    @inject(\"issuerConfigFetcher\")\n    private issuerConfigFetcher: IIssuerConfigFetcher,\n    @inject(\"clientRegistrar\") private clientRegistrar: IClientRegistrar\n  ) {}\n\n  async canHandle(options: ILoginOptions): Promise<boolean> {\n    return hasIssuer(options) && hasRedirectUrl(options);\n  }\n\n  async handle(options: ILoginOptions): Promise<LoginResult> {\n    if (!hasIssuer(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires an OIDC issuer: missing property 'oidcIssuer' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n    if (!hasRedirectUrl(options)) {\n      throw new ConfigurationError(\n        `OidcLoginHandler requires a redirect URL: missing property 'redirectUrl' in ${JSON.stringify(\n          options\n        )}`\n      );\n    }\n\n    // Fetch OpenId Config\n    const issuerConfig: IIssuerConfig = await this.issuerConfigFetcher.fetchConfig(\n      options.oidcIssuer\n    );\n\n    let dynamicClientRegistration: IClient;\n    if (options.clientId) {\n      dynamicClientRegistration = {\n        clientId: options.clientId,\n        clientSecret: options.clientSecret,\n        clientName: options.clientName,\n      };\n    } else {\n      const clientId = await this.storageUtility.getForUser(\n        \"clientApplicationRegistrationInfo\",\n        \"clientId\"\n      );\n\n      if (clientId) {\n        dynamicClientRegistration = {\n          clientId,\n          clientSecret: await this.storageUtility.getForUser(\n            \"clientApplicationRegistrationInfo\",\n            \"clientSecret\"\n          ),\n          clientName: options.clientName,\n        };\n      } else {\n        dynamicClientRegistration = await this.clientRegistrar.getClient(\n          {\n            sessionId: options.sessionId,\n            clientName: options.clientName,\n            redirectUrl: options.redirectUrl,\n          },\n          issuerConfig\n        );\n\n        await this.storageUtility.setForUser(\n          \"clientApplicationRegistrationInfo\",\n          {\n            clientId: dynamicClientRegistration.clientId,\n            clientSecret: dynamicClientRegistration.clientSecret as string,\n          }\n        );\n      }\n    }\n\n    // Construct OIDC Options\n    const OidcOptions: IOidcOptions = {\n      issuer: options.oidcIssuer,\n      // TODO: differentiate if DPoP should be true\n      dpop: options.tokenType.toLowerCase() === \"dpop\",\n      redirectUrl: options.redirectUrl,\n      issuerConfiguration: issuerConfig,\n      client: dynamicClientRegistration,\n      sessionId: options.sessionId,\n      handleRedirect: options.handleRedirect,\n    };\n\n    // Call proper OIDC Handler\n    return this.oidcHandler.handle(OidcOptions);\n  }\n}\n"]}},"error":null,"hash":"3145b963393da77a58cd2581f0f69416","cacheData":{"env":{}}}