{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","dependencies":[{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js.map","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/IssuerConfigFetcher.ts","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/package.json","includedInParent":true,"mtime":1612221001734},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1611945169054},{"name":"@inrupt/solid-client-authn-core","loc":{"line":17,"column":42},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-core/dist/index.js"},{"name":"tsyringe","loc":{"line":18,"column":27},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/tsyringe/dist/esm5/index.js"},{"name":"../../util/urlPath","loc":{"line":19,"column":26},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/IssuerConfigFetcher.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/util/urlPath.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nvar IssuerConfigFetcher_1;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WELL_KNOWN_OPENID_CONFIG = void 0;\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst tsyringe_1 = require(\"tsyringe\");\nconst urlPath_1 = require(\"../../util/urlPath\");\nexports.WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\nconst issuerConfigKeyMap = {\n    issuer: {\n        toKey: \"issuer\",\n        convertToUrl: true,\n    },\n    authorization_endpoint: {\n        toKey: \"authorizationEndpoint\",\n        convertToUrl: true,\n    },\n    token_endpoint: {\n        toKey: \"tokenEndpoint\",\n        convertToUrl: true,\n    },\n    userinfo_endpoint: {\n        toKey: \"userinfoEndpoint\",\n        convertToUrl: true,\n    },\n    jwks_uri: {\n        toKey: \"jwksUri\",\n        convertToUrl: true,\n    },\n    registration_endpoint: {\n        toKey: \"registrationEndpoint\",\n        convertToUrl: true,\n    },\n    scopes_supported: { toKey: \"scopesSupported\" },\n    response_types_supported: { toKey: \"responseTypesSupported\" },\n    response_modes_supported: { toKey: \"responseModesSupported\" },\n    grant_types_supported: { toKey: \"grantTypesSupported\" },\n    acr_values_supported: { toKey: \"acrValuesSupported\" },\n    subject_types_supported: { toKey: \"subjectTypesSupported\" },\n    id_token_signing_alg_values_supported: {\n        toKey: \"idTokenSigningAlgValuesSupported\",\n    },\n    id_token_encryption_alg_values_supported: {\n        toKey: \"idTokenEncryptionAlgValuesSupported\",\n    },\n    id_token_encryption_enc_values_supported: {\n        toKey: \"idTokenEncryptionEncValuesSupported\",\n    },\n    userinfo_signing_alg_values_supported: {\n        toKey: \"userinfoSigningAlgValuesSupported\",\n    },\n    userinfo_encryption_alg_values_supported: {\n        toKey: \"userinfoEncryptionAlgValuesSupported\",\n    },\n    userinfo_encryption_enc_values_supported: {\n        toKey: \"userinfoEncryptionEncValuesSupported\",\n    },\n    request_object_signing_alg_values_supported: {\n        toKey: \"requestObjectSigningAlgValuesSupported\",\n    },\n    request_object_encryption_alg_values_supported: {\n        toKey: \"requestObjectEncryptionAlgValuesSupported\",\n    },\n    request_object_encryption_enc_values_supported: {\n        toKey: \"requestObjectEncryptionEncValuesSupported\",\n    },\n    token_endpoint_auth_methods_supported: {\n        toKey: \"tokenEndpointAuthMethodsSupported\",\n    },\n    token_endpoint_auth_signing_alg_values_supported: {\n        toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\n    },\n    display_values_supported: { toKey: \"displayValuesSupported\" },\n    claim_types_supported: { toKey: \"claimTypesSupported\" },\n    claims_supported: { toKey: \"claimsSupported\" },\n    service_documentation: { toKey: \"serviceDocumentation\" },\n    claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\n    ui_locales_supported: { toKey: \"uiLocalesSupported\" },\n    claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\n    request_parameter_supported: { toKey: \"requestParameterSupported\" },\n    request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\n    require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\n    op_policy_uri: {\n        toKey: \"opPolicyUri\",\n        convertToUrl: true,\n    },\n    op_tos_uri: {\n        toKey: \"opTosUri\",\n        convertToUrl: true,\n    },\n};\nfunction processConfig(config) {\n    const parsedConfig = {};\n    Object.keys(config).forEach((key) => {\n        if (issuerConfigKeyMap[key]) {\n            parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n        }\n    });\n    return parsedConfig;\n}\nlet IssuerConfigFetcher = IssuerConfigFetcher_1 = class IssuerConfigFetcher {\n    constructor(storageUtility) {\n        this.storageUtility = storageUtility;\n    }\n    static getLocalStorageKey(issuer) {\n        return `issuerConfig:${issuer}`;\n    }\n    async fetchConfig(issuer) {\n        let issuerConfig;\n        const openIdConfigUrl = urlPath_1.appendToUrlPathname(issuer, exports.WELL_KNOWN_OPENID_CONFIG);\n        const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\n        try {\n            issuerConfig = processConfig(await issuerConfigRequestBody.json());\n        }\n        catch (err) {\n            throw new solid_client_authn_core_1.ConfigurationError(`[${issuer.toString()}] has an invalid configuration: ${err.message}`);\n        }\n        await this.storageUtility.set(IssuerConfigFetcher_1.getLocalStorageKey(issuer), JSON.stringify(issuerConfig));\n        return issuerConfig;\n    }\n};\nIssuerConfigFetcher = IssuerConfigFetcher_1 = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"storageUtility\")),\n    __metadata(\"design:paramtypes\", [Object])\n], IssuerConfigFetcher);\nexports.default = IssuerConfigFetcher;\n"},"sourceMaps":{"js":{"version":3,"file":"IssuerConfigFetcher.js","sourceRoot":"","sources":["../../../src/login/oidc/IssuerConfigFetcher.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Responsible for fetching an IDP configuration\n */\nimport {\n  IIssuerConfig,\n  IIssuerConfigFetcher,\n  IStorageUtility,\n  ConfigurationError,\n} from \"@inrupt/solid-client-authn-core\";\nimport { injectable, inject } from \"tsyringe\";\nimport { appendToUrlPathname } from \"../../util/urlPath\";\n\nexport const WELL_KNOWN_OPENID_CONFIG = \".well-known/openid-configuration\";\n\n/* eslint-disable camelcase */\nconst issuerConfigKeyMap: Record<\n  string,\n  { toKey: string; convertToUrl?: boolean }\n> = {\n  issuer: {\n    toKey: \"issuer\",\n    convertToUrl: true,\n  },\n  authorization_endpoint: {\n    toKey: \"authorizationEndpoint\",\n    convertToUrl: true,\n  },\n  token_endpoint: {\n    toKey: \"tokenEndpoint\",\n    convertToUrl: true,\n  },\n  userinfo_endpoint: {\n    toKey: \"userinfoEndpoint\",\n    convertToUrl: true,\n  },\n  jwks_uri: {\n    toKey: \"jwksUri\",\n    convertToUrl: true,\n  },\n  registration_endpoint: {\n    toKey: \"registrationEndpoint\",\n    convertToUrl: true,\n  },\n  scopes_supported: { toKey: \"scopesSupported\" },\n  response_types_supported: { toKey: \"responseTypesSupported\" },\n  response_modes_supported: { toKey: \"responseModesSupported\" },\n  grant_types_supported: { toKey: \"grantTypesSupported\" },\n  acr_values_supported: { toKey: \"acrValuesSupported\" },\n  subject_types_supported: { toKey: \"subjectTypesSupported\" },\n  id_token_signing_alg_values_supported: {\n    toKey: \"idTokenSigningAlgValuesSupported\",\n  },\n  id_token_encryption_alg_values_supported: {\n    toKey: \"idTokenEncryptionAlgValuesSupported\",\n  },\n  id_token_encryption_enc_values_supported: {\n    toKey: \"idTokenEncryptionEncValuesSupported\",\n  },\n  userinfo_signing_alg_values_supported: {\n    toKey: \"userinfoSigningAlgValuesSupported\",\n  },\n  userinfo_encryption_alg_values_supported: {\n    toKey: \"userinfoEncryptionAlgValuesSupported\",\n  },\n  userinfo_encryption_enc_values_supported: {\n    toKey: \"userinfoEncryptionEncValuesSupported\",\n  },\n  request_object_signing_alg_values_supported: {\n    toKey: \"requestObjectSigningAlgValuesSupported\",\n  },\n  request_object_encryption_alg_values_supported: {\n    toKey: \"requestObjectEncryptionAlgValuesSupported\",\n  },\n  request_object_encryption_enc_values_supported: {\n    toKey: \"requestObjectEncryptionEncValuesSupported\",\n  },\n  token_endpoint_auth_methods_supported: {\n    toKey: \"tokenEndpointAuthMethodsSupported\",\n  },\n  token_endpoint_auth_signing_alg_values_supported: {\n    toKey: \"tokenEndpointAuthSigningAlgValuesSupported\",\n  },\n  display_values_supported: { toKey: \"displayValuesSupported\" },\n  claim_types_supported: { toKey: \"claimTypesSupported\" },\n  claims_supported: { toKey: \"claimsSupported\" },\n  service_documentation: { toKey: \"serviceDocumentation\" },\n  claims_locales_supported: { toKey: \"claimsLocalesSupported\" },\n  ui_locales_supported: { toKey: \"uiLocalesSupported\" },\n  claims_parameter_supported: { toKey: \"claimsParameterSupported\" },\n  request_parameter_supported: { toKey: \"requestParameterSupported\" },\n  request_uri_parameter_supported: { toKey: \"requestUriParameterSupported\" },\n  require_request_uri_registration: { toKey: \"requireRequestUriRegistration\" },\n  op_policy_uri: {\n    toKey: \"opPolicyUri\",\n    convertToUrl: true,\n  },\n  op_tos_uri: {\n    toKey: \"opTosUri\",\n    convertToUrl: true,\n  },\n};\n/* eslint-enable camelcase */\n\nfunction processConfig(\n  config: Record<string, string | string[]>\n): IIssuerConfig {\n  const parsedConfig: Record<string, string | string[]> = {};\n  Object.keys(config).forEach((key) => {\n    if (issuerConfigKeyMap[key]) {\n      // TODO: PMcB55: Validate URL if \"issuerConfigKeyMap[key].convertToUrl\"\n      //  if (issuerConfigKeyMap[key].convertToUrl) {\n      //   validateUrl(config[key]);\n      //  }\n      parsedConfig[issuerConfigKeyMap[key].toKey] = config[key];\n    }\n  });\n\n  return (parsedConfig as unknown) as IIssuerConfig;\n}\n\n/**\n * @hidden\n */\n@injectable()\nexport default class IssuerConfigFetcher implements IIssuerConfigFetcher {\n  constructor(\n    @inject(\"storageUtility\") private storageUtility: IStorageUtility\n  ) {}\n\n  // This method needs no state (so can be static), and can be exposed to allow\n  // callers to know where this implementation puts state it needs.\n  public static getLocalStorageKey(issuer: string): string {\n    return `issuerConfig:${issuer}`;\n  }\n\n  async fetchConfig(issuer: string): Promise<IIssuerConfig> {\n    let issuerConfig: IIssuerConfig;\n\n    const openIdConfigUrl = appendToUrlPathname(\n      issuer,\n      WELL_KNOWN_OPENID_CONFIG\n    );\n    const issuerConfigRequestBody = await window.fetch(openIdConfigUrl);\n    // Check the validity of the fetched config\n    try {\n      issuerConfig = processConfig(await issuerConfigRequestBody.json());\n    } catch (err) {\n      throw new ConfigurationError(\n        `[${issuer.toString()}] has an invalid configuration: ${err.message}`\n      );\n    }\n\n    // Update store with fetched config\n    await this.storageUtility.set(\n      IssuerConfigFetcher.getLocalStorageKey(issuer),\n      JSON.stringify(issuerConfig)\n    );\n\n    return issuerConfig;\n  }\n}\n"]}},"error":null,"hash":"08df11480cac3d535cd83b9b07b674f2","cacheData":{"env":{}}}