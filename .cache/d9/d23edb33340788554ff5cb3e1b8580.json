{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ImplicitRedirectHandler.js","dependencies":[{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ImplicitRedirectHandler.js.map","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/redirectHandler/ImplicitRedirectHandler.ts","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/package.json","includedInParent":true,"mtime":1612372540913},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1611945169054},{"name":"tsyringe","loc":{"line":16,"column":27},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ImplicitRedirectHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/tsyringe/dist/esm5/index.js"},{"name":"../../../authenticatedFetch/fetchFactory","loc":{"line":17,"column":31},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ImplicitRedirectHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/authenticatedFetch/fetchFactory.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ImplicitRedirectHandler = void 0;\nconst tsyringe_1 = require(\"tsyringe\");\nconst fetchFactory_1 = require(\"../../../authenticatedFetch/fetchFactory\");\nlet ImplicitRedirectHandler = class ImplicitRedirectHandler {\n    constructor(tokenSaver, sessionInfoManager) {\n        this.tokenSaver = tokenSaver;\n        this.sessionInfoManager = sessionInfoManager;\n    }\n    async canHandle(redirectUrl) {\n        try {\n            const myUrl = new URL(redirectUrl);\n            return (myUrl.searchParams.get(\"id_token\") !== null &&\n                myUrl.searchParams.get(\"access_token\") !== null &&\n                myUrl.searchParams.get(\"state\") !== null);\n        }\n        catch (e) {\n            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`);\n        }\n    }\n    async handle(redirectUrl) {\n        if (!(await this.canHandle(redirectUrl))) {\n            throw new Error(`ImplicitRedirectHandler cannot handle [${redirectUrl}]: it is missing one or more of [id_token, access_token, state].`);\n        }\n        const url = new URL(redirectUrl);\n        await this.tokenSaver.saveSession(url.searchParams.get(\"state\"), url.searchParams.get(\"id_token\"), url.searchParams.get(\"access_token\"));\n        const sessionId = url.searchParams.get(\"state\");\n        const sessionInfo = await this.sessionInfoManager.get(sessionId);\n        return Object.assign(sessionInfo, {\n            fetch: fetchFactory_1.buildBearerFetch(url.searchParams.get(\"access_token\"), undefined),\n        });\n    }\n};\nImplicitRedirectHandler = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"tokenSaver\")),\n    __param(1, tsyringe_1.inject(\"sessionInfoManager\")),\n    __metadata(\"design:paramtypes\", [Object, Object])\n], ImplicitRedirectHandler);\nexports.ImplicitRedirectHandler = ImplicitRedirectHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"ImplicitRedirectHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/redirectHandler/ImplicitRedirectHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AA+BA,uCAA8C;AAE9C,2EAA4E;AAM5E,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAClC,YACgC,UAAuB,EAE7C,kBAAuC;QAFjB,eAAU,GAAV,UAAU,CAAa;QAE7C,uBAAkB,GAAlB,kBAAkB,CAAqB;IAC9C,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,WAAmB;QACjC,IAAI;YACF,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;YACnC,OAAO,CACL,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK,IAAI;gBAC3C,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,IAAI;gBAC/C,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,IAAI,CACzC,CAAC;SACH;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CACb,IAAI,WAAW,+DAA+D,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC7F,CAAC;SACH;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CACV,WAAmB;QAEnB,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CACb,0CAA0C,WAAW,kEAAkE,CACxH,CAAC;SACH;QAED,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;QAEjC,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAC/B,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAW,EACvC,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,UAAU,CAAW,EAC1C,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAW,CAC/C,CAAC;QAKF,MAAM,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAW,CAAC;QAC1D,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;QACjE,OAAO,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE;YAEhC,KAAK,EAAE,+BAAgB,CACrB,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,cAAc,CAAW,EAC9C,SAAS,CACV;SACF,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AApDY,uBAAuB;IADnC,qBAAU,EAAE;IAGR,WAAA,iBAAM,CAAC,YAAY,CAAC,CAAA;IACpB,WAAA,iBAAM,CAAC,oBAAoB,CAAC,CAAA;;GAHpB,uBAAuB,CAoDnC;AApDY,0DAAuB","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  IRedirectHandler,\n  ISessionInfo,\n  ISessionInfoManager,\n} from \"@inrupt/solid-client-authn-core\";\nimport { inject, injectable } from \"tsyringe\";\nimport { ITokenSaver } from \"./TokenSaver\";\nimport { buildBearerFetch } from \"../../../authenticatedFetch/fetchFactory\";\n\n/**\n * @hidden\n */\n@injectable()\nexport class ImplicitRedirectHandler implements IRedirectHandler {\n  constructor(\n    @inject(\"tokenSaver\") private tokenSaver: ITokenSaver,\n    @inject(\"sessionInfoManager\")\n    private sessionInfoManager: ISessionInfoManager\n  ) {}\n\n  async canHandle(redirectUrl: string): Promise<boolean> {\n    try {\n      const myUrl = new URL(redirectUrl);\n      return (\n        myUrl.searchParams.get(\"id_token\") !== null &&\n        myUrl.searchParams.get(\"access_token\") !== null &&\n        myUrl.searchParams.get(\"state\") !== null\n      );\n    } catch (e) {\n      throw new Error(\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`\n      );\n    }\n  }\n\n  async handle(\n    redirectUrl: string\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\n    if (!(await this.canHandle(redirectUrl))) {\n      throw new Error(\n        `ImplicitRedirectHandler cannot handle [${redirectUrl}]: it is missing one or more of [id_token, access_token, state].`\n      );\n    }\n\n    const url = new URL(redirectUrl);\n\n    await this.tokenSaver.saveSession(\n      url.searchParams.get(\"state\") as string,\n      url.searchParams.get(\"id_token\") as string,\n      url.searchParams.get(\"access_token\") as string\n    );\n\n    // TODO: PMcB55: We don't use this flow, but *if* we do, then this should be\n    //  brought back into line with the Auth Code Flow (and use a crypto-random\n    //  value for 'state').\n    const sessionId = url.searchParams.get(\"state\") as string;\n    const sessionInfo = await this.sessionInfoManager.get(sessionId);\n    return Object.assign(sessionInfo, {\n      // The canHandle check at the top of the method makes this assertion valid.\n      fetch: buildBearerFetch(\n        url.searchParams.get(\"access_token\") as string,\n        undefined\n      ),\n    });\n  }\n}\n"]}},"error":null,"hash":"142653b7e5748d3cbf63b02b16e65451","cacheData":{"env":{}}}