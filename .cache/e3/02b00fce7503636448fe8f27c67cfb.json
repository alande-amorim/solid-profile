{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","dependencies":[{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js.map","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/package.json","includedInParent":true,"mtime":1612372540913},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1611945169054},{"name":"tsyringe","loc":{"line":15,"column":27},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/tsyringe/dist/esm5/index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":16,"column":34},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/oidc-client-ext/dist/index.es.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsyringe_1 = require(\"tsyringe\");\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nlet AuthorizationCodeWithPkceOidcHandler = class AuthorizationCodeWithPkceOidcHandler {\n    constructor(storageUtility, redirector) {\n        this.storageUtility = storageUtility;\n        this.redirector = redirector;\n    }\n    async canHandle(oidcLoginOptions) {\n        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1);\n    }\n    async handle(oidcLoginOptions) {\n        var _a, _b, _c;\n        const oidcOptions = {\n            authority: (_a = oidcLoginOptions.issuer) === null || _a === void 0 ? void 0 : _a.toString(),\n            client_id: oidcLoginOptions.client.clientId,\n            client_secret: oidcLoginOptions.client.clientSecret,\n            redirect_uri: (_b = oidcLoginOptions.redirectUrl) === null || _b === void 0 ? void 0 : _b.toString(),\n            post_logout_redirect_uri: (_c = oidcLoginOptions.redirectUrl) === null || _c === void 0 ? void 0 : _c.toString(),\n            response_type: \"code\",\n            scope: \"openid webid offline_access\",\n            filterProtocolClaims: true,\n            loadUserInfo: false,\n            code_verifier: true,\n        };\n        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\n        const { redirector } = this;\n        const storage = this.storageUtility;\n        await oidcClientLibrary.createSigninRequest().then((req) => {\n            return (Promise.all([\n                storage.setForUser(req.state._id, {\n                    sessionId: oidcLoginOptions.sessionId,\n                }),\n                storage.setForUser(oidcLoginOptions.sessionId, {\n                    codeVerifier: req.state._code_verifier,\n                    issuer: oidcLoginOptions.issuer.toString(),\n                    redirectUri: oidcLoginOptions.redirectUrl.toString(),\n                    dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n                }),\n            ])\n                .then(() => {\n                redirector.redirect(req.url.toString(), {\n                    handleRedirect: oidcLoginOptions.handleRedirect,\n                });\n            })\n                .catch((err) => {\n                console.error(err);\n            }));\n        });\n        return undefined;\n    }\n};\nAuthorizationCodeWithPkceOidcHandler = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"storageUtility\")),\n    __param(1, tsyringe_1.inject(\"redirector\")),\n    __metadata(\"design:paramtypes\", [Object, Object])\n], AuthorizationCodeWithPkceOidcHandler);\nexports.default = AuthorizationCodeWithPkceOidcHandler;\n"},"sourceMaps":{"js":{"version":3,"file":"AuthorizationCodeWithPkceOidcHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAoCA,uCAA8C;AAC9C,6DAAoE;AAMpE,IAAqB,oCAAoC,GAAzD,MAAqB,oCAAoC;IAEvD,YACoC,cAA+B,EACnC,UAAuB;QADnB,mBAAc,GAAd,cAAc,CAAiB;QACnC,eAAU,GAAV,UAAU,CAAa;IACpD,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,gBAA8B;QAC5C,OAAO,CAAC,CAAC,CACP,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB;YACxD,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,OAAO,CAC9D,oBAAoB,CACrB,GAAG,CAAC,CAAC,CACP,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,gBAA8B;;QAEzC,MAAM,WAAW,GAAG;YAClB,SAAS,QAAE,gBAAgB,CAAC,MAAM,0CAAE,QAAQ,EAAE;YAC9C,SAAS,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ;YAC3C,aAAa,EAAE,gBAAgB,CAAC,MAAM,CAAC,YAAY;YACnD,YAAY,QAAE,gBAAgB,CAAC,WAAW,0CAAE,QAAQ,EAAE;YACtD,wBAAwB,QAAE,gBAAgB,CAAC,WAAW,0CAAE,QAAQ,EAAE;YAClE,aAAa,EAAE,MAAM;YAKrB,KAAK,EAAE,6BAA6B;YACpC,oBAAoB,EAAE,IAAI;YAI1B,YAAY,EAAE,KAAK;YACnB,aAAa,EAAE,IAAI;SACpB,CAAC;QAGF,MAAM,iBAAiB,GAAG,IAAI,4BAAU,CAAC,WAAW,CAAC,CAAC;QAEtD,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAEpC,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,IAAI,CAAC,CAAC,GAAkB,EAAE,EAAE;YAUxE,OAAO,CACL,OAAO,CAAC,GAAG,CAAC;gBAEV,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE;oBAChC,SAAS,EAAE,gBAAgB,CAAC,SAAS;iBACtC,CAAC;gBACF,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE;oBAE7C,YAAY,EAAE,GAAG,CAAC,KAAK,CAAC,cAAc;oBACtC,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAC1C,WAAW,EAAE,gBAAgB,CAAC,WAAW,CAAC,QAAQ,EAAE;oBACpD,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;iBAC/C,CAAC;aACH,CAAC;iBACC,IAAI,CAAC,GAAG,EAAE;gBACT,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;oBACtC,cAAc,EAAE,gBAAgB,CAAC,cAAc;iBAChD,CAAC,CAAC;YACL,CAAC,CAAC;iBAED,KAAK,CAAC,CAAC,GAAY,EAAE,EAAE;gBAEtB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC,CAAC,CACL,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,SAAS,CAAC;IACnB,CAAC;CACF,CAAA;AAnFoB,oCAAoC;IADxD,qBAAU,EAAE;IAIR,WAAA,iBAAM,CAAC,gBAAgB,CAAC,CAAA;IACxB,WAAA,iBAAM,CAAC,YAAY,CAAC,CAAA;;GAJJ,oCAAoC,CAmFxD;kBAnFoB,oCAAoC","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\n/**\n * Handler for the Authorization Code with PKCE Flow\n */\nimport {\n  IOidcHandler,\n  IOidcOptions,\n  IRedirector,\n  IStorageUtility,\n  LoginResult,\n} from \"@inrupt/solid-client-authn-core\";\nimport { injectable, inject } from \"tsyringe\";\nimport { OidcClient, SigninRequest } from \"@inrupt/oidc-client-ext\";\n\n/**\n * @hidden\n */\n@injectable()\nexport default class AuthorizationCodeWithPkceOidcHandler\n  implements IOidcHandler {\n  constructor(\n    @inject(\"storageUtility\") private storageUtility: IStorageUtility,\n    @inject(\"redirector\") private redirector: IRedirector\n  ) {}\n\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\n    return !!(\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\n        \"authorization_code\"\n      ) > -1\n    );\n  }\n\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\n    /* eslint-disable camelcase */\n    const oidcOptions = {\n      authority: oidcLoginOptions.issuer?.toString(),\n      client_id: oidcLoginOptions.client.clientId,\n      client_secret: oidcLoginOptions.client.clientSecret,\n      redirect_uri: oidcLoginOptions.redirectUrl?.toString(),\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl?.toString(),\n      response_type: \"code\",\n      // TODO: The 'webid' scope is still a spec discussion topic\n      //  https://github.com/solid/specification/issues/203, i.e. the 'webid'\n      //  scope does not yet appear in the Solid specification (it's not even\n      //  mentioned in the WebID-OIDC spec).\n      scope: \"openid webid offline_access\",\n      filterProtocolClaims: true,\n      // The userinfo endpoint on NSS fails, so disable this for now\n      // Note that in Solid, information should be retrieved from the\n      // profile referenced by the WebId.\n      loadUserInfo: false,\n      code_verifier: true,\n    };\n    /* eslint-enable camelcase */\n\n    const oidcClientLibrary = new OidcClient(oidcOptions);\n\n    const { redirector } = this;\n    const storage = this.storageUtility;\n\n    await oidcClientLibrary.createSigninRequest().then((req: SigninRequest) => {\n      // We use the OAuth 'state' value (which should be crypto-random) as\n      // the key in our storage to store our actual SessionID. We do this 'cos\n      // we'll need to lookup our session information again when the browser\n      // is redirected back to us (i.e. the OAuth client application) from the\n      // Authorization Server.\n      // We don't want to use our session ID as the OAuth 'state' value, as\n      // that session ID can be any developer-specified value, and therefore\n      // may not be appropriate (since the OAuth 'state' value should really\n      // be an unguessable crypto-random value).\n      return (\n        Promise.all([\n          // eslint-disable-next-line no-underscore-dangle\n          storage.setForUser(req.state._id, {\n            sessionId: oidcLoginOptions.sessionId,\n          }),\n          storage.setForUser(oidcLoginOptions.sessionId, {\n            // eslint-disable-next-line no-underscore-dangle\n            codeVerifier: req.state._code_verifier,\n            issuer: oidcLoginOptions.issuer.toString(),\n            redirectUri: oidcLoginOptions.redirectUrl.toString(),\n            dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\n          }),\n        ])\n          .then(() => {\n            redirector.redirect(req.url.toString(), {\n              handleRedirect: oidcLoginOptions.handleRedirect,\n            });\n          })\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .catch((err: unknown) => {\n            // eslint-disable-next-line no-console\n            console.error(err);\n          })\n      );\n    });\n    // The login is only completed AFTER redirect, so nothin to return here.\n    return undefined;\n  }\n}\n"]}},"error":null,"hash":"0a9674d45da1b8297f24b67066914454","cacheData":{"env":{}}}