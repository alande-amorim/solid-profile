{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js","dependencies":[{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js.map","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/src/login/oidc/refresh/TokenRefresher.ts","includedInParent":true,"mtime":1611945169054},{"name":"/Users/amorim.alande/Projects/pod-profile/package.json","includedInParent":true,"mtime":1612221001734},{"name":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/package.json","includedInParent":true,"mtime":1611945169054},{"name":"tsyringe","loc":{"line":15,"column":27},"parent":"/Users/amorim.alande/Projects/pod-profile/node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js","resolved":"/Users/amorim.alande/Projects/pod-profile/node_modules/tsyringe/dist/esm5/index.js"}],"generated":{"js":"\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tsyringe_1 = require(\"tsyringe\");\nlet TokenRefresher = class TokenRefresher {\n    constructor(storageUtility, tokenRequester) {\n        this.storageUtility = storageUtility;\n        this.tokenRequester = tokenRequester;\n    }\n    async refresh(localUserId) {\n        const refreshToken = await this.storageUtility.getForUser(localUserId, \"refreshToken\", { errorIfNull: true, secure: true });\n        await this.tokenRequester.request(localUserId, {\n            grant_type: \"refresh_token\",\n            refresh_token: refreshToken,\n        });\n    }\n};\nTokenRefresher = __decorate([\n    tsyringe_1.injectable(),\n    __param(0, tsyringe_1.inject(\"storageUtility\")),\n    __param(1, tsyringe_1.inject(\"tokenRequester\")),\n    __metadata(\"design:paramtypes\", [Object, Object])\n], TokenRefresher);\nexports.default = TokenRefresher;\n"},"sourceMaps":{"js":{"version":3,"file":"TokenRefresher.js","sourceRoot":"","sources":["../../../../src/login/oidc/refresh/TokenRefresher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AA0BA,uCAA8C;AAe9C,IAAqB,cAAc,GAAnC,MAAqB,cAAc;IACjC,YACoC,cAA+B,EAC/B,cAA+B;QAD/B,mBAAc,GAAd,cAAc,CAAiB;QAC/B,mBAAc,GAAd,cAAc,CAAiB;IAChE,CAAC;IAEJ,KAAK,CAAC,OAAO,CAAC,WAAmB;QAE/B,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CACvD,WAAW,EACX,cAAc,EACd,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,CACpC,CAAC;QAEF,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,WAAW,EAAE;YAC7C,UAAU,EAAE,eAAe;YAC3B,aAAa,EAAE,YAAsB;SACtC,CAAC,CAAC;IAEL,CAAC;CACF,CAAA;AApBoB,cAAc;IADlC,qBAAU,EAAE;IAGR,WAAA,iBAAM,CAAC,gBAAgB,CAAC,CAAA;IACxB,WAAA,iBAAM,CAAC,gBAAgB,CAAC,CAAA;;GAHR,cAAc,CAoBlC;kBApBoB,cAAc","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport { injectable, inject } from \"tsyringe\";\nimport { IStorageUtility } from \"@inrupt/solid-client-authn-core\";\nimport { ITokenRequester } from \"../TokenRequester\";\n\n/**\n * @hidden\n */\nexport interface ITokenRefresher {\n  refresh(localUserId: string): Promise<void>;\n}\n\n/**\n * @hidden\n */\n@injectable()\nexport default class TokenRefresher implements ITokenRefresher {\n  constructor(\n    @inject(\"storageUtility\") private storageUtility: IStorageUtility,\n    @inject(\"tokenRequester\") private tokenRequester: ITokenRequester\n  ) {}\n\n  async refresh(localUserId: string): Promise<void> {\n    // Get the refresh token and the issuer\n    const refreshToken = await this.storageUtility.getForUser(\n      localUserId,\n      \"refreshToken\",\n      { errorIfNull: true, secure: true }\n    );\n    /* eslint-disable camelcase */\n    await this.tokenRequester.request(localUserId, {\n      grant_type: \"refresh_token\",\n      refresh_token: refreshToken as string, // This cast can be safely made because getForUser will error if refreshToken is null\n    });\n    /* eslint-enable camelcase */\n  }\n}\n"]}},"error":null,"hash":"3e151a0f601cb271c3d7976db896fe0b","cacheData":{"env":{}}}